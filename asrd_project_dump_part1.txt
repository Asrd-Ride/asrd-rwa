
--- package.json ---
{
  "name": "asset-ride-pro",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@react-three/drei": "^9.85.0",
    "@react-three/fiber": "^8.15.0",
    "@types/three": "^0.158.0",
    "canvas-confetti": "1.6.0",
    "framer-motion": "^10.16.4",
    "lucide-react": "^0.292.0",
    "next": "^14.2.33",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "three": "^0.158.0",
    "use-sound": "4.0.1"
  },
  "devDependencies": {
    "@types/canvas-confetti": "1.6.0",
    "@types/node": "20.8.6",
    "@types/react": "18.2.25",
    "@types/react-dom": "18.2.11",
    "autoprefixer": "10.4.16",
    "eslint": "8.51.0",
    "eslint-config-next": "14.0.3",
    "postcss": "8.4.31",
    "tailwindcss": "3.3.5",
    "typescript": "5.2.2"
  }
}

--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es2022",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [{"name": "next"}],
    "baseUrl": ".",
    "paths": {"@/*": ["./src/*"]}
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

--- next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  typescript: {
    ignoreBuildErrors: false,
  },
  eslint: {
    ignoreDuringBuilds: false,
  },
  images: {
    // FIXED: Updated from domains to remotePatterns (no more deprecation warning)
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'images.unsplash.com',
      }
    ],
    formats: ['image/avif', 'image/webp'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    minimumCacheTTL: 60,
  },
  compiler: {
    removeConsole: process.env.NODE_ENV === 'production',
  },
}

module.exports = nextConfig

--- tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          dark: '#0A0F2C',
          cyan: '#00D1FF',
          violet: '#7B61FF',
        }
      },
      animation: {
        'pulse-glow': 'pulse-glow 2s ease-in-out infinite alternate',
        'float': 'float 6s ease-in-out infinite',
        'glow': 'glow 2s ease-in-out infinite alternate',
      },
      keyframes: {
        'pulse-glow': {
          '0%': { boxShadow: '0 0 5px #00D1FF, 0 0 10px #00D1FF, 0 0 15px #00D1FF' },
          '100%': { boxShadow: '0 0 10px #00D1FF, 0 0 20px #00D1FF, 0 0 30px #00D1FF' },
        },
        'float': {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-10px)' },
        },
        'glow': {
          '0%': { textShadow: '0 0 5px #00D1FF, 0 0 10px #00D1FF' },
          '100%': { textShadow: '0 0 10px #00D1FF, 0 0 20px #00D1FF, 0 0 30px #00D1FF' },
        }
      }
    },
  },
  plugins: [],
}

--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

--- .gitignore ---
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.

--- src/app/layout.tsx ---
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import '../styles/premium-3d-system.css'
import '../styles/premium-fluid.css'
import { AuthProvider } from '@/contexts/AuthContext'
import { NotificationProvider } from '@/contexts/NotificationContext'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'AssetRide - Premium Real World Asset Investment',
  description: 'Democratizing access to premium real world assets with world-class returns',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <AuthProvider>
          <NotificationProvider>
            {children}
          </NotificationProvider>
        </AuthProvider>
      </body>
    </html>
  )
}

--- src/app/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Professional Financial Design System */
:root {
  /* Primary Colors - Sophisticated & Trustworthy */
  --deep-navy: #0A1128;
  --space-blue: #1C2541;
  --midnight: #2A3D66;
  --steel-blue: #3A506B;
  
  /* Accent Colors - Professional & Energetic */
  --ocean-teal: #00B4D8;
  --royal-blue: #4361EE;
  --emerald: #06D6A0;
  --gold: #FFD166;
  
  /* Neutral Colors */
  --pure-white: #FFFFFF;
  --light-gray: #F8F9FA;
  --mid-gray: #E9ECEF;
  --dark-gray: #6C757D;
}

/* Professional Backgrounds */
.bg-professional-dark {
  background: linear-gradient(135deg, var(--deep-navy) 0%, var(--space-blue) 100%);
}

.bg-professional-card {
  background: linear-gradient(135deg, var(--space-blue) 0%, var(--midnight) 100%);
}

.bg-professional-light {
  background: linear-gradient(135deg, var(--midnight) 0%, var(--steel-blue) 100%);
}

/* Professional Glass Morphism */
.glass-professional {
  background: rgba(255, 255, 255, 0.08);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.12);
  border-radius: 16px;
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
}

.glass-professional:hover {
  border-color: var(--ocean-teal);
  box-shadow: 
    0 12px 40px rgba(0, 180, 216, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
  transform: translateY(-2px);
}

/* Professional Gradients */
.gradient-primary {
  background: linear-gradient(135deg, var(--ocean-teal) 0%, var(--royal-blue) 100%);
}

.gradient-success {
  background: linear-gradient(135deg, var(--emerald) 0%, var(--ocean-teal) 100%);
}

.gradient-premium {
  background: linear-gradient(135deg, var(--gold) 0%, var(--emerald) 100%);
}

/* Base styles */
html {
  scroll-behavior: smooth;
}

body {
  margin: 0;
  padding: 0;
  overflow-x: hidden;
  background: var(--deep-navy);
  color: var(--pure-white);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

/* Container utilities */
.container-pro {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

@media (min-width: 768px) {
  .container-pro {
    padding: 0 2rem;
  }
}

/* Typography scale */
.text-hero {
  font-size: clamp(2.5rem, 5vw, 4.5rem);
  font-weight: 800;
  line-height: 1.1;
}

.text-display {
  font-size: clamp(2rem, 4vw, 3rem);
  font-weight: 700;
  line-height: 1.2;
}

.text-title {
  font-size: clamp(1.5rem, 3vw, 2rem);
  font-weight: 600;
  line-height: 1.3;
}

/* Animation utilities */
@keyframes float {
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fadeInUp {
  animation: fadeInUp 0.8s ease-out;
}

/* Color Classes for Tailwind */
.bg-deep-navy { background-color: var(--deep-navy); }
.bg-space-blue { background-color: var(--space-blue); }
.bg-midnight { background-color: var(--midnight); }
.bg-steel-blue { background-color: var(--steel-blue); }
.bg-ocean-teal { background-color: var(--ocean-teal); }
.bg-royal-blue { background-color: var(--royal-blue); }
.bg-emerald { background-color: var(--emerald); }
.bg-gold { background-color: var(--gold); }

.text-ocean-teal { color: var(--ocean-teal); }
.text-royal-blue { color: var(--royal-blue); }
.text-emerald { color: var(--emerald); }
.text-gold { color: var(--gold); }

.border-ocean-teal { border-color: var(--ocean-teal); }
.border-royal-blue { border-color: var(--royal-blue); }
.border-emerald { border-color: var(--emerald); }

.from-ocean-teal { --tw-gradient-from: var(--ocean-teal); }
.to-royal-blue { --tw-gradient-to: var(--royal-blue); }

/* Professional Investor Animations */
@keyframes gridMove {
  0% { transform: translate(0, 0); }
  100% { transform: translate(80px, 80px); }
}

@keyframes gradient-shift {
  0%, 100% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
}

.animate-gradient-shift {
  background-size: 200% 200%;
  animation: gradient-shift 3s ease infinite;
}

@keyframes float-premium {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg) scale(1); 
  }
  33% { 
    transform: translateY(-20px) rotate(120deg) scale(1.05); 
  }
  66% { 
    transform: translateY(-10px) rotate(240deg) scale(1.02); 
  }
}

.animate-float-premium {
  animation: float-premium 8s ease-in-out infinite;
}

/* Professional color transitions */
.professional-gradient {
  background: linear-gradient(135deg, #0A1128 0%, #1C2541 25%, #2A3D66 50%, #3A506B 75%, #0F172A 100%);
}

/* Enhanced glass morphism for investors */
.glass-institutional {
  background: rgba(255, 255, 255, 0.03);
  backdrop-filter: blur(40px);
  border: 1px solid rgba(255, 255, 255, 0.08);
  border-radius: 24px;
  box-shadow: 
    0 25px 50px -12px rgba(0, 0, 0, 0.25),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

/* Professional hover effects */
.hover-lift {
  transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

.hover-lift:hover {
  transform: translateY(-8px);
  box-shadow: 
    0 35px 60px -12px rgba(0, 0, 0, 0.3),
    0 0 0 1px rgba(59, 130, 246, 0.1);
}

/* Performance metric animations */
.metric-enter {
  opacity: 0;
  transform: translateY(40px) scale(0.9);
}

.metric-enter-active {
  opacity: 1;
  transform: translateY(0) scale(1);
  transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
}

/* Institutional border animations */
.border-glow {
  position: relative;
}

.border-glow::before {
  content: '';
  position: absolute;
  inset: -2px;
  border-radius: inherit;
  padding: 2px;
  background: linear-gradient(45deg, #06b6d4, #3b82f6, #8b5cf6);
  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  mask-composite: exclude;
  animation: border-glow 3s ease-in-out infinite;
}

@keyframes border-glow {
  0%, 100% { opacity: 0.5; }
  50% { opacity: 1; }
}

/* Futuristic Animations */
@keyframes float-hologram {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg) scale(1); 
    opacity: 0.6;
  }
  25% { 
    transform: translateY(-20px) rotate(90deg) scale(1.1);
    opacity: 0.8;
  }
  50% { 
    transform: translateY(-10px) rotate(180deg) scale(1.05);
    opacity: 0.7;
  }
  75% { 
    transform: translateY(-15px) rotate(270deg) scale(1.08);
    opacity: 0.75;
  }
}

@keyframes float-data {
  0%, 100% { 
    transform: translateY(0) translateX(0) scale(1);
    opacity: 0.4;
  }
  25% { 
    transform: translateY(-40px) translateX(20px) scale(1.2);
    opacity: 0.8;
  }
  50% { 
    transform: translateY(-20px) translateX(-15px) scale(1.1);
    opacity: 0.6;
  }
  75% { 
    transform: translateY(-30px) translateX(10px) scale(1.15);
    opacity: 0.7;
  }
}

@keyframes pulse-glow {
  0%, 100% { 
    box-shadow: 0 0 20px currentColor;
    opacity: 0.3;
  }
  50% { 
    box-shadow: 0 0 40px currentColor, 0 0 60px currentColor;
    opacity: 0.6;
  }
}

@keyframes text-glow {
  0%, 100% { 
    text-shadow: 0 0 20px rgba(34, 211, 238, 0.5);
  }
  50% { 
    text-shadow: 0 0 30px rgba(34, 211, 238, 0.8), 0 0 40px rgba(34, 211, 238, 0.6);
  }
}

.animate-float-hologram {
  animation: float-hologram 8s ease-in-out infinite;
}

.animate-float-data {
  animation: float-data 6s ease-in-out infinite;
}

.animate-pulse-glow {
  animation: pulse-glow 3s ease-in-out infinite;
}

.animate-text-glow {
  animation: text-glow 2s ease-in-out infinite;
}

/* Glass morphism effects */
.glass-futuristic {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 16px;
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.1),
    0 0 0 1px rgba(255, 255, 255, 0.05);
}

/* Holographic borders */
.holographic-border {
  position: relative;
}

.holographic-border::before {
  content: '';
  position: absolute;
  inset: -2px;
  border-radius: inherit;
  padding: 2px;
  background: linear-gradient(45deg, #06b6d4, #3b82f6, #8b5cf6, #06b6d4);
  background-size: 400% 400%;
  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  mask-composite: exclude;
  animation: holographic-shift 3s ease infinite;
}

@keyframes holographic-shift {
  0%, 100% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
}

--- src/app/page.tsx ---
import { redirect } from 'next/navigation';

export default function RootPage() {
  redirect('/home');
}

--- src/contexts/AppContext.tsx ---
"use client";

import React, { createContext, useContext, useState, ReactNode } from 'react';
import { mockProposals, mockAssets, ownedAssets, platformStats, testimonialData, howItWorksData } from '@/data/mockData';

// Enhanced treasury data matching our new design
const mockTreasuryData = {
  totalValue: 25420000,
  availableFunds: 5250000,
  allocatedFunds: 20170000,
  monthlyIncome: 825000,
  monthlyExpenses: 225000,
  netCashFlow: 600000,
  assets: [
    { name: 'Real Estate', value: 12500000, percentage: 49.2, color: 'emerald' },
    { name: 'Thoroughbred', value: 5200000, percentage: 20.5, color: 'amber' },
    { name: 'Marine Assets', value: 3200000, percentage: 12.6, color: 'sapphire' },
    { name: 'Venture Capital', value: 2800000, percentage: 11.0, color: 'violet' },
    { name: 'Luxury Goods', value: 1720000, percentage: 6.7, color: 'rose' }
  ],
  growth: {
    monthly: "+8.2%",
    quarterly: "+24.7%", 
    yearly: "+89.3%"
  },
  performance: {
    currentMonth: "+8.2%",
    lastMonth: "+7.5%",
    ytd: "+42.8%"
  }
};

// Enhanced user portfolio using real ownedAssets data
const mockUserPortfolio = {
  totalValue: 890000,
  monthlyIncome: 25950,
  asrdTokens: 15642,
  activeInvestments: ownedAssets.length,
  performance: "+18.4%",
  totalReturns: 156800,
  diversification: [
    { type: 'Real Estate', percentage: 45, value: 400500, color: 'emerald' },
    { type: 'Thoroughbred', percentage: 25, value: 222500, color: 'amber' },
    { type: 'Marine Assets', percentage: 20, value: 178000, color: 'sapphire' },
    { type: 'Other', percentage: 10, value: 89000, color: 'violet' }
  ],
  recentActivity: [
    { id: 1, type: 'investment', asset: 'Dubai Luxury Villa', amount: 50000, date: '2024-01-15', status: 'completed', roi: "32.5%" },
    { id: 2, type: 'income', asset: 'Rental Payment', amount: 4250, date: '2024-01-10', status: 'completed', roi: "N/A" },
    { id: 3, type: 'income', asset: 'Race Winnings', amount: 8500, date: '2024-01-05', status: 'completed', roi: "45.2%" },
    { id: 4, type: 'investment', asset: 'Mediterranean Superyacht', amount: 25000, date: '2024-01-02', status: 'completed', roi: "41.3%" }
  ],
  upcomingPayouts: ownedAssets.map(asset => ({
    id: asset.id,
    asset: asset.title,
    amount: asset.payoutAmount,
    date: asset.nextPayout,
    type: asset.type,
    roi: asset.roi
  })),
  riskProfile: {
    level: "Moderate",
    score: 6.2,
    description: "Well-diversified across asset classes"
  }
};

// Enhanced platform analytics
const platformAnalytics = {
  totalInvestors: platformStats.totalInvestors,
  totalAssets: platformStats.totalAssets,
  averageROI: platformStats.averageRoi,
  totalVolume: 185000000,
  userGrowth: "+12.4%",
  assetGrowth: "+8.7%",
  geographicDistribution: [
    { region: 'North America', percentage: 45, investors: 1561, color: 'emerald' },
    { region: 'Europe', percentage: 30, investors: 1041, color: 'sapphire' },
    { region: 'Asia', percentage: 15, investors: 520, color: 'amber' },
    { region: 'Other', percentage: 10, investors: 348, color: 'violet' }
  ],
  assetDistribution: [
    { type: 'Real Estate', percentage: 42, value: 77700000, count: 18 },
    { type: 'Marine Assets', percentage: 18, value: 33300000, count: 8 },
    { type: 'Thoroughbred', percentage: 15, value: 27750000, count: 6 },
    { type: 'Venture Capital', percentage: 12, value: 22200000, count: 5 },
    { type: 'Luxury Goods', percentage: 8, value: 14800000, count: 4 },
    { type: 'Aviation', percentage: 5, value: 9250000, count: 3 }
  ]
};

// Enhanced community data
const communityData = {
  totalMembers: platformStats.totalInvestors,
  activeProposals: mockProposals.length,
  totalVotes: 4230,
  recentActivities: [
    { id: 1, user: 'Sarah Chen', action: 'invested in', asset: 'Dubai Luxury Villa', amount: 25000, time: '2 hours ago', avatar: 'SC' },
    { id: 2, user: 'Marcus R.', action: 'voted on', proposal: 'Expand Real Estate Portfolio', time: '4 hours ago', avatar: 'MR' },
    { id: 3, user: 'Jennifer Kim', action: 'earned', amount: 3200, asset: 'from Superyacht charter', time: '6 hours ago', avatar: 'JK' },
    { id: 4, user: 'Alex Thompson', action: 'joined the platform', time: '1 day ago', avatar: 'AT' }
  ],
  leaderboard: [
    { rank: 1, user: 'WealthBuilder', portfolio: 1250000, investments: 15, performance: "+22.4%" },
    { rank: 2, user: 'EliteInvestor', portfolio: 980000, investments: 12, performance: "+19.8%" },
    { rank: 3, user: 'CryptoKing', portfolio: 875000, investments: 10, performance: "+25.1%" },
    { rank: 4, user: 'Sarah Chen', portfolio: 765000, investments: 8, performance: "+18.4%" },
    { rank: 5, user: 'RealEstatePro', portfolio: 642000, investments: 9, performance: "+16.7%" }
  ],
  discussionTopics: [
    { id: 1, title: 'Real Estate Market Trends 2024', replies: 42, views: 312, lastActivity: '3 hours ago' },
    { id: 2, title: 'New Asset Proposal: Tech Startups', replies: 28, views: 198, lastActivity: '5 hours ago' },
    { id: 3, title: 'Quarterly Returns Discussion', replies: 65, views: 425, lastActivity: '1 day ago' }
  ]
};

// Enhanced educational content
const educationalContent = {
  featuredArticles: [
    { id: 1, title: 'Fractional Ownership: The Future of Asset Investment', readTime: '5 min', category: 'Education', featured: true },
    { id: 2, title: 'Understanding Real World Asset (RWA) Tokenization', readTime: '8 min', category: 'Blockchain', featured: true },
    { id: 3, title: 'Diversifying Your Portfolio with Alternative Assets', readTime: '6 min', category: 'Strategy', featured: false },
    { id: 4, title: 'Risk Management in Real World Asset Investing', readTime: '7 min', category: 'Strategy', featured: false }
  ],
  upcomingWebinars: [
    { id: 1, title: 'Introduction to Real World Asset Investing', date: '2024-02-20', speaker: 'Dr. Emily Chen', attendees: 124 },
    { id: 2, title: 'Advanced Portfolio Diversification Strategies', date: '2024-02-25', speaker: 'Marcus Rodriguez', attendees: 89 },
    { id: 3, title: 'Blockchain Security for Asset Tokenization', date: '2024-03-05', speaker: 'Sarah Kim', attendees: 67 }
  ],
  learningPaths: [
    { id: 1, title: 'Beginner Investor', duration: '2 weeks', courses: 4, completed: 65 },
    { id: 2, title: 'Advanced Portfolio Management', duration: '4 weeks', courses: 6, completed: 42 },
    { id: 3, title: 'Blockchain & Assets Expert', duration: '6 weeks', courses: 8, completed: 28 }
  ]
};

// Enhanced market insights
const marketInsights = {
  trendingAssets: mockAssets.slice(0, 3).map(asset => ({
    ...asset,
    trend: 'rising',
    demand: 'high'
  })),
  marketSentiment: {
    overall: "Bullish",
    confidence: 78,
    factors: [
      { factor: 'Real Estate Market', sentiment: 'positive', impact: 'high' },
      { factor: 'Tech Investments', sentiment: 'positive', impact: 'medium' },
      { factor: 'Global Economy', sentiment: 'neutral', impact: 'medium' }
    ]
  },
  regulatoryUpdates: [
    { id: 1, title: 'New Digital Asset Regulations', impact: 'positive', date: '2024-01-15' },
    { id: 2, title: 'Tax Benefits for Real Estate Investors', impact: 'positive', date: '2024-01-10' },
    { id: 3, title: 'International Investment Guidelines', impact: 'neutral', date: '2024-01-05' }
  ]
};

interface AppContextType {
  // Core data
  proposals: any[];
  treasury: any;
  userPortfolio: any;
  
  // Enhanced data
  platformAnalytics: any;
  communityData: any;
  educationalContent: any;
  marketInsights: any;
  testimonials: any[];
  howItWorks: any[];
  
  // Functions
  refreshData: () => void;
  getAssetPerformance: (assetId: number) => any;
  getUserRank: () => number;
}

const AppContext = createContext<AppContextType | undefined>(undefined);

export function AppProvider({ children }: { children: ReactNode }) {
  const [proposals, setProposals] = useState(mockProposals);
  const [treasury, setTreasury] = useState(mockTreasuryData);
  const [userPortfolio, setUserPortfolio] = useState(mockUserPortfolio);

  const refreshData = () => {
    // Simulate data refresh - in real app, this would fetch from API
    setProposals([...mockProposals]);
    setTreasury({ ...mockTreasuryData });
    setUserPortfolio({ ...mockUserPortfolio });
  };

  const getAssetPerformance = (assetId: number) => {
    const asset = mockAssets.find(a => a.id === assetId);
    return asset ? {
      performance: asset.performance,
      roi: asset.roi,
      investorCount: asset.investorCount,
      timeLeft: asset.timeLeft
    } : null;
  };

  const getUserRank = () => {
    // Mock user rank calculation
    return 4; // Sarah Chen's rank from leaderboard
  };

  const value: AppContextType = {
    // Core data
    proposals,
    treasury,
    userPortfolio,
    
    // Enhanced data
    platformAnalytics,
    communityData,
    educationalContent,
    marketInsights,
    testimonials: testimonialData,
    howItWorks: howItWorksData,
    
    // Functions
    refreshData,
    getAssetPerformance,
    getUserRank
  };

  return (
    <AppContext.Provider value={value}>
      {children}
    </AppContext.Provider>
  );
}

export function useApp() {
  const context = useContext(AppContext);
  if (context === undefined) {
    throw new Error('useApp must be used within an AppProvider');
  }
  return context;
}
--- src/contexts/AuthContext.tsx ---
"use client";

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

interface User {
  name: string;
  email: string;
  asrdBalance: number;
  portfolioValue: number;
}

interface AuthContextType {
  user: User | null;
  login: (redirectPath?: string) => void;
  logout: () => void;
  buyASRD: (amount: number) => void;
  invest: (amount: number, assetName: string) => boolean;
  claimRental: (assetId: number) => void;
  claimWinnings: (assetId: number) => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const router = useRouter();

  useEffect(() => {
    // Check for existing session
    const savedUser = localStorage.getItem('assetRideUser');
    if (savedUser) {
      setUser(JSON.parse(savedUser));
    }
  }, []);

  const login = (redirectPath: string = '/dashboard') => {
    const demoUser = {
      name: "Premium Investor",
      email: "demo@assetride.com",
      asrdBalance: 5000,
      portfolioValue: 490000
    };
    setUser(demoUser);
    localStorage.setItem('assetRideUser', JSON.stringify(demoUser));

    // Redirect to dashboard after login
    router.push(redirectPath);
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('assetRideUser');
    router.push('/home');
  };

  const buyASRD = (amount: number) => {
    if (!user) return;
    const asrdTokens = amount / 32; // $32 per ASRD token
    const updatedUser = {
      ...user,
      asrdBalance: user.asrdBalance + asrdTokens,
      portfolioValue: user.portfolioValue + amount // Increase portfolio when buying ASRD
    };
    setUser(updatedUser);
    localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));
  };

  const invest = (amount: number, assetName: string): boolean => {
    if (!user) return false;
    const asrdTokensCost = amount / 32; // Calculate ASRD tokens needed

    // Check if user has enough ASRD balance
    if (user.asrdBalance < asrdTokensCost) {
      // Show notification instead of alert
      if (typeof window !== 'undefined' && (window as any).showNotification) {
        (window as any).showNotification({
          type: 'error',
          title: 'Insufficient Balance',
          message: `You need ${asrdTokensCost.toFixed(2)} ASRD but only have ${user.asrdBalance.toFixed(2)}.`,
          duration: 5000
        });
      }
      return false;
    }

    // CORRECT: When investing ASRD tokens, portfolio USD value decreases proportionally
    const updatedUser = {
      ...user,
      asrdBalance: user.asrdBalance - asrdTokensCost,
      portfolioValue: user.portfolioValue - amount // Decrease portfolio value by investment amount
    };
    setUser(updatedUser);
    localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));

    console.log(`Invested $${amount} in ${assetName}. Deducted ${asrdTokensCost.toFixed(2)} ASRD tokens.`);
    return true;
  };

  const claimRental = (assetId: number) => {
    if (!user) return;
    const rentalAmount = 4250;
    const asrdTokens = 132;
    const updatedUser = {
      ...user,
      asrdBalance: user.asrdBalance + asrdTokens,
      portfolioValue: user.portfolioValue + rentalAmount // Increase portfolio when claiming rental
    };
    setUser(updatedUser);
    localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));

    // Show notification instead of alert
    if (typeof window !== 'undefined' && (window as any).showNotification) {
      (window as any).showNotification({
        type: 'success',
        title: 'Rental Income Claimed!',
        message: `Successfully claimed $${rentalAmount} rental income! Received ${asrdTokens} ASRD tokens.`,
        duration: 6000
      });
    }
  };

  const claimWinnings = (assetId: number) => {
    if (!user) return;
    const winningsAmount = 8500;
    const asrdTokens = 265;
    const updatedUser = {
      ...user,
      asrdBalance: user.asrdBalance + asrdTokens,
      portfolioValue: user.portfolioValue + winningsAmount // Increase portfolio when claiming winnings
    };
    setUser(updatedUser);
    localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));

    // Show notification instead of alert
    if (typeof window !== 'undefined' && (window as any).showNotification) {
      (window as any).showNotification({
        type: 'success',
        title: 'Winnings Claimed!',
        message: `Successfully claimed $${winningsAmount} race winnings! Received ${asrdTokens} ASRD tokens.`,
        duration: 6000
      });
    }
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, buyASRD, invest, claimRental, claimWinnings }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

--- src/contexts/NotificationContext.tsx ---
"use client";

import React, { createContext, useContext, useState, ReactNode } from 'react';
import Premium3DNotification from '@/components/ui/Premium3DNotification';

interface Notification {
  id: string;
  type: 'success' | 'error' | 'warning' | 'info' | 'premium';
  title: string;
  message: string;
  duration?: number;
}

interface NotificationContextType {
  showNotification: (notification: Omit<Notification, 'id'>) => void;
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

export function NotificationProvider({ children }: { children: ReactNode }) {
  const [notifications, setNotifications] = useState<Notification[]>([]);

  const showNotification = (notification: Omit<Notification, 'id'>) => {
    const id = Math.random().toString(36).substr(2, 9);
    setNotifications(prev => [...prev, { ...notification, id }]);
  };

  const removeNotification = (id: string) => {
    setNotifications(prev => prev.filter(notification => notification.id !== id));
  };

  return (
    <NotificationContext.Provider value={{ showNotification }}>
      {children}
      {notifications.map(notification => (
        <Premium3DNotification
          key={notification.id}
          type={notification.type}
          title={notification.title}
          message={notification.message}
          isVisible={true}
          onClose={() => removeNotification(notification.id)}
          duration={notification.duration}
        />
      ))}
    </NotificationContext.Provider>
  );
}

export function useNotification() {
  const context = useContext(NotificationContext);
  if (context === undefined) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
}

--- src/contexts/WalletContext.tsx ---
"use client";

import React, { createContext, useContext, useState } from 'react';

interface WalletContextType {
  isConnected: boolean;
  connect: () => void;
  disconnect: () => void;
}

const WalletContext = createContext<WalletContextType | undefined>(undefined);

export function WalletProvider({ children }: { children: React.ReactNode }) {
  const [isConnected, setIsConnected] = useState(false);

  const connect = () => setIsConnected(true);
  const disconnect = () => setIsConnected(false);

  return (
    <WalletContext.Provider value={{ isConnected, connect, disconnect }}>
      {children}
    </WalletContext.Provider>
  );
}

--- src/components/Providers.tsx ---
"use client";

import React from 'react';
import { AppProvider } from '@/contexts/AppContext';
import { AuthProvider } from '@/contexts/AuthContext';
import { WalletProvider } from '@/contexts/WalletContext';

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <AppProvider>
      <AuthProvider>
        <WalletProvider>
          {children}
        </WalletProvider>
      </AuthProvider>
    </AppProvider>
  );
}

--- src/hooks/useScrollAnimation.ts ---
"use client";

import { useState, useEffect } from 'react';

export function useScrollAnimation() {
  const [scrollY, setScrollY] = useState(0);
  const [scrollDirection, setScrollDirection] = useState<'up' | 'down'>('down');
  const [scrollProgress, setScrollProgress] = useState(0);

  useEffect(() => {
    let lastScrollY = window.scrollY;

    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const progress = (currentScrollY / docHeight) * 100;

      setScrollY(currentScrollY);
      setScrollDirection(currentScrollY > lastScrollY ? 'down' : 'up');
      setScrollProgress(progress);
      lastScrollY = currentScrollY;
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // 3D Parallax effects
  const getParallaxStyle = (speed: number = 0.5) => ({
    transform: `translateY(${scrollY * speed}px)`,
  });

  // Fade in/out based on scroll
  const getFadeStyle = (start: number, end: number) => {
    const opacity = Math.max(0, Math.min(1, (scrollY - start) / (end - start)));
    return { opacity };
  };

  // Scale based on scroll
  const getScaleStyle = (start: number, end: number) => {
    const scale = 1 - Math.max(0, Math.min(1, (scrollY - start) / (end - start))) * 0.3;
    return { transform: `scale(${scale})` };
  };

  // Rotate based on scroll
  const getRotateStyle = (start: number, end: number, maxRotate: number = 10) => {
    const rotate = Math.max(0, Math.min(1, (scrollY - start) / (end - start))) * maxRotate;
    return { transform: `rotateX(${rotate}deg)` };
  };

  return {
    scrollY,
    scrollDirection,
    scrollProgress,
    getParallaxStyle,
    getFadeStyle,
    getScaleStyle,
    getRotateStyle
  };
}

--- src/hooks/useScrollColor.ts ---
"use client";

import { useState, useEffect } from 'react';

export function useScrollColor() {
  const [scrollProgress, setScrollProgress] = useState(0);
  const [isScrolled, setIsScrolled] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.scrollY;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const progress = (scrollTop / docHeight) * 100;
      
      setScrollProgress(progress);
      setIsScrolled(scrollTop > 100);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  // Enhanced color transitions
  const getScrollColor = () => {
    if (scrollProgress < 15) {
      return 'from-blue-900 via-indigo-900 to-purple-900'; // Deep blue/purple
    } else if (scrollProgress < 30) {
      return 'from-indigo-900 via-purple-900 to-blue-900'; // Purple/blue mix
    } else if (scrollProgress < 45) {
      return 'from-purple-900 via-blue-900 to-cyan-900'; // Purple/cyan transition
    } else if (scrollProgress < 60) {
      return 'from-cyan-900 via-blue-900 to-gray-900'; // Cyan to dark
    } else if (scrollProgress < 75) {
      return 'from-gray-900 via-slate-900 to-black'; // Dark gray to black
    } else {
      return 'from-black via-gray-900 to-slate-900'; // Pure black
    }
  };

  const getTextColor = () => {
    if (scrollProgress < 30) {
      return 'text-blue-100';
    } else if (scrollProgress < 60) {
      return 'text-cyan-100';
    } else {
      return 'text-gray-100';
    }
  };

  const getAccentColor = () => {
    if (scrollProgress < 25) {
      return 'text-cyan-300';
    } else if (scrollProgress < 50) {
      return 'text-blue-300';
    } else if (scrollProgress < 75) {
      return 'text-purple-300';
    } else {
      return 'text-cyan-400';
    }
  };

  return {
    scrollProgress,
    isScrolled,
    getScrollColor,
    getTextColor,
    getAccentColor
  };
}

--- src/hooks/useScrollAnimation.tsx ---
'use client';

import { useState, useEffect } from 'react';

export function useScrollAnimation() {
  const [scrollY, setScrollY] = useState(0);
  const [scrollProgress, setScrollProgress] = useState(0);

  useEffect(() => {
    const handleScroll = () => {
      setScrollY(window.scrollY);
      const winHeight = window.innerHeight;
      const docHeight = document.documentElement.scrollHeight;
      const scrollTop = window.pageYOffset;
      const trackLength = docHeight - winHeight;
      setScrollProgress(scrollTop / trackLength * 100);
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const getFadeStyle = (delay: number, duration: number) => ({
    opacity: scrollY > delay ? 1 : 0,
    transform: scrollY > delay ? 'translateY(0)' : 'translateY(30px)',
    transition: `all 0.6s ease-out ${scrollY > delay ? 0 : duration}ms`
  });

  const getParallaxStyle = (speed: number) => ({
    transform: `translateY(${scrollY * speed}px)`
  });

  const getScaleStyle = (delay: number, duration: number) => ({
    transform: scrollY > delay ? 'scale(1)' : 'scale(0.9)',
    transition: `transform 0.6s ease-out ${scrollY > delay ? 0 : duration}ms`
  });

  const getRotateStyle = (delay: number, duration: number, degrees: number) => ({
    transform: scrollY > delay ? 'rotate(0deg)' : `rotate(${degrees}deg)`,
    transition: `transform 0.8s ease-out ${scrollY > delay ? 0 : duration}ms`
  });

  return {
    scrollY,
    scrollProgress,
    getFadeStyle,
    getParallaxStyle,
    getScaleStyle,
    getRotateStyle
  };
}

--- src/hooks/useScrollColor.tsx ---
'use client';

import { useState, useEffect } from 'react';

export function useScrollColor() {
  const [scrollColor, setScrollColor] = useState('from-gray-900 via-blue-900 to-purple-900');
  const [textColor, setTextColor] = useState('text-white');

  useEffect(() => {
    const handleScroll = () => {
      const scrollY = window.scrollY;
      const winHeight = window.innerHeight;
      
      if (scrollY < winHeight * 0.25) {
        setScrollColor('from-gray-900 via-blue-900 to-purple-900');
        setTextColor('text-white');
      } else if (scrollY < winHeight * 0.5) {
        setScrollColor('from-blue-900 via-purple-900 to-cyan-900');
        setTextColor('text-white');
      } else if (scrollY < winHeight * 0.75) {
        setScrollColor('from-purple-900 via-cyan-900 to-blue-900');
        setTextColor('text-white');
      } else {
        setScrollColor('from-cyan-900 via-blue-900 to-gray-900');
        setTextColor('text-white');
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const getScrollColor = () => scrollColor;
  const getTextColor = () => textColor;

  return {
    getScrollColor,
    getTextColor
  };
}

--- src/styles/premium-fluid.css ---
/* ===== PREMIUM FLUID DESIGN SYSTEM ===== */
:root {
  /* Premium Color Palette */
  --fluid-black: #050505;
  --fluid-charcoal: #1A1A1A;
  --fluid-navy: #0A1128;
  --fluid-slate: #2A3441;
  
  /* Premium Fluid Accents */
  --fluid-gold: #FFD700;
  --fluid-emerald: #00D4AA;
  --fluid-sapphire: #4A90E2;
  --fluid-platinum: #F8FAFC;
  --fluid-silver: #CBD5E1;
  
  /* Fluid Animation Timing */
  --ease-fluid: cubic-bezier(0.4, 0, 0.2, 1);
  --ease-smooth: cubic-bezier(0.25, 0.46, 0.45, 0.94);
  --ease-bounce: cubic-bezier(0.68, -0.55, 0.265, 1.55);
}

/* Premium Fluid Backgrounds */
.fluid-bg {
  background: linear-gradient(135deg, var(--fluid-black) 0%, var(--fluid-navy) 50%, var(--fluid-charcoal) 100%);
  position: relative;
  overflow: hidden;
}

.fluid-bg::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: 
    radial-gradient(circle at 20% 80%, rgba(255, 215, 0, 0.03) 0%, transparent 50%),
    radial-gradient(circle at 80% 20%, rgba(0, 212, 170, 0.03) 0%, transparent 50%),
    radial-gradient(circle at 40% 40%, rgba(74, 144, 226, 0.02) 0%, transparent 50%);
  pointer-events: none;
}

/* Premium Fluid Typography */
.fluid-hero {
  font-size: clamp(2.75rem, 6vw, 4.5rem);
  font-weight: 700;
  line-height: 1.1;
  background: linear-gradient(135deg, var(--fluid-platinum) 0%, var(--fluid-gold) 50%, var(--fluid-emerald) 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  margin-bottom: 1.5rem;
}

.fluid-heading {
  font-size: clamp(2.25rem, 4vw, 3.25rem);
  font-weight: 600;
  line-height: 1.2;
  color: var(--fluid-platinum);
  margin-bottom: 1rem;
}

.fluid-subheading {
  font-size: 1.75rem;
  font-weight: 500;
  line-height: 1.3;
  color: var(--fluid-platinum);
  margin-bottom: 0.75rem;
}

.fluid-body {
  font-size: 1.125rem;
  line-height: 1.7;
  color: var(--fluid-silver);
}

.fluid-caption {
  font-size: 1rem;
  line-height: 1.5;
  color: var(--fluid-silver);
  opacity: 0.8;
}

/* Premium Fluid Cards */
.fluid-card {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 16px;
  padding: 1.75rem;
  transition: all 0.4s var(--ease-fluid);
  position: relative;
  overflow: hidden;
}

.fluid-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.03), transparent);
  transition: left 0.6s var(--ease-fluid);
}

.fluid-card:hover::before {
  left: 100%;
}

.fluid-card:hover {
  border-color: var(--fluid-gold);
  transform: translateY(-4px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

.fluid-card-panel {
  background: rgba(255, 255, 255, 0.03);
  backdrop-filter: blur(30px);
  border: 1px solid rgba(255, 255, 255, 0.08);
  border-radius: 20px;
  padding: 2.5rem;
  transition: all 0.4s var(--ease-fluid);
}

.fluid-card-panel:hover {
  border-color: var(--fluid-emerald);
  transform: translateY(-2px);
}

/* Premium Fluid Buttons */
.btn-fluid {
  background: linear-gradient(135deg, var(--fluid-gold) 0%, #FFED4E 100%);
  color: var(--fluid-black);
  border: none;
  border-radius: 12px;
  padding: 1rem 2rem;
  font-weight: 600;
  transition: all 0.4s var(--ease-fluid);
  position: relative;
  overflow: hidden;
}

.btn-fluid::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.6s var(--ease-fluid);
}

.btn-fluid:hover::before {
  left: 100%;
}

.btn-fluid:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 30px rgba(255, 215, 0, 0.3);
}

.btn-fluid-secondary {
  background: transparent;
  color: var(--fluid-platinum);
  border: 1px solid var(--fluid-silver);
  border-radius: 12px;
  padding: 1rem 2rem;
  font-weight: 500;
  transition: all 0.4s var(--ease-fluid);
}

.btn-fluid-secondary:hover {
  border-color: var(--fluid-sapphire);
  color: var(--fluid-sapphire);
  transform: translateY(-2px);
}

/* Premium Fluid Layout */
.fluid-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1.5rem;
}

.fluid-section {
  padding: 5rem 0;
}

.fluid-section-sm {
  padding: 3rem 0;
}

.fluid-section-lg {
  padding: 8rem 0;
}

/* Premium Fluid Grid */
.fluid-grid {
  display: grid;
  gap: 2rem;
}

.fluid-grid-cols-1 { grid-template-columns: 1fr; }
.fluid-grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
.fluid-grid-cols-3 { grid-template-columns: repeat(3, 1fr); }
.fluid-grid-cols-4 { grid-template-columns: repeat(4, 1fr); }

/* Premium Fluid Animations */
@keyframes fluid-float {
  0%, 100% { transform: translateY(0px) scale(1); }
  50% { transform: translateY(-10px) scale(1.02); }
}

@keyframes fluid-glow {
  0%, 100% { opacity: 0.5; }
  50% { opacity: 1; }
}

.fluid-float {
  animation: fluid-float 6s var(--ease-smooth) infinite;
}

.fluid-glow {
  animation: fluid-glow 4s var(--ease-smooth) infinite;
}

/* Premium Fluid Scroll Animations */
.fluid-scroll-item {
  opacity: 0;
  transform: translateY(30px);
  transition: all 0.8s var(--ease-fluid);
}

.fluid-scroll-item.visible {
  opacity: 1;
  transform: translateY(0);
}

/* Premium Fluid Utility Classes */
.text-fluid-gold { color: var(--fluid-gold); }
.text-fluid-emerald { color: var(--fluid-emerald); }
.text-fluid-sapphire { color: var(--fluid-sapphire); }

.bg-fluid-gold { background: var(--fluid-gold); }
.bg-fluid-emerald { background: var(--fluid-emerald); }
.bg-fluid-sapphire { background: var(--fluid-sapphire); }

.border-fluid-gold { border-color: var(--fluid-gold); }
.border-fluid-emerald { border-color: var(--fluid-emerald); }
.border-fluid-sapphire { border-color: var(--fluid-sapphire); }

/* Premium Fluid Responsive Design */
@media (max-width: 768px) {
  .fluid-container {
    padding: 0 1rem;
  }
  
  .fluid-section {
    padding: 3rem 0;
  }
  
  .fluid-grid-cols-2,
  .fluid-grid-cols-3,
  .fluid-grid-cols-4 {
    grid-template-columns: 1fr;
  }
  
  .fluid-card,
  .fluid-card-panel {
    padding: 1.5rem;
  }
}

/* ===== ENHANCED MOBILE RESPONSIVENESS ===== */
@media (max-width: 640px) {
  /* Mobile Typography */
  .fluid-hero {
    font-size: clamp(2.25rem, 8vw, 3.5rem);
    line-height: 1.1;
    margin-bottom: 1rem;
  }
  
  .fluid-heading {
    font-size: clamp(1.75rem, 6vw, 2.5rem);
    line-height: 1.2;
  }
  
  .fluid-subheading {
    font-size: 1.375rem;
    line-height: 1.3;
  }
  
  .fluid-body {
    font-size: 1rem;
    line-height: 1.6;
  }
  
  /* Mobile Layout */
  .fluid-container {
    padding: 0 1rem;
  }
  
  .fluid-section {
    padding: 3rem 0;
  }
  
  .fluid-section-sm {
    padding: 2rem 0;
  }
  
  .fluid-section-lg {
    padding: 4rem 0;
  }
  
  /* Mobile Cards */
  .fluid-card,
  .fluid-card-panel {
    padding: 1.25rem;
    border-radius: 12px;
  }
  
  /* Mobile Buttons */
  .btn-fluid,
  .btn-fluid-secondary {
    padding: 0.875rem 1.5rem;
    font-size: 0.95rem;
    width: 100%;
    justify-content: center;
  }
  
  /* Mobile Grid Systems */
  .fluid-grid-cols-2,
  .fluid-grid-cols-3,
  .fluid-grid-cols-4 {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
  
  /* Mobile Spacing */
  .mobile\\:space-y-4 > * + * {
    margin-top: 1rem;
  }
  
  .mobile\\:text-center {
    text-align: center;
  }
  
  .mobile\\:flex-col {
    flex-direction: column;
  }
  
  .mobile\\:w-full {
    width: 100%;
  }
  
  .mobile\\:px-4 {
    padding-left: 1rem;
    padding-right: 1rem;
  }
  
  .mobile\\:py-3 {
    padding-top: 0.75rem;
    padding-bottom: 0.75rem;
  }
}

/* Tablet Responsive (641px - 768px) */
@media (min-width: 641px) and (max-width: 768px) {
  .fluid-grid-cols-4 {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .fluid-grid-cols-3 {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* Mobile Header Spacing Fix */
@media (max-width: 768px) {
  .fluid-header-spacing {
    margin-top: 70px;
  }
  
  /* Mobile Navigation Improvements */
  .mobile-nav-item {
    padding: 0.75rem 1rem;
    font-size: 0.95rem;
  }
  
  /* Mobile Form Elements */
  input, select, textarea {
    font-size: 16px; /* Prevents zoom on iOS */
  }
}

/* Mobile Touch Improvements */
@media (max-width: 768px) {
  .btn-fluid,
  .btn-fluid-secondary,
  .fluid-card {
    min-height: 44px; /* Minimum touch target size */
  }
  
  /* Improve touch scrolling */
  .fluid-container {
    -webkit-overflow-scrolling: touch;
  }
}

/* Mobile Performance Optimizations */
@media (max-width: 768px) {
  .fluid-card::before {
    display: none; /* Disable complex hover effects on mobile */
  }
  
  .fluid-float {
    animation: none; /* Reduce animations on mobile for performance */
  }
}

--- src/styles/premium-3d-system.css ---
/* ===== PREMIUM 3D DESIGN SYSTEM ===== */
/* Consolidated unified design system for AssetRide */

:root {
  /* ===== 3D COLOR PALETTE ===== */
  --space-black: #05060A;
  --deep-space: #0A0B0F;
  --cosmic-purple: #1A1D29;
  --nebula-blue: #0F1117;
  
  /* ===== 3D ACCENT GRADIENTS ===== */
  --cyber-cyan: #00F5FF;
  --quantum-blue: #4361EE;
  --cosmic-purple: #7209B7;
  --neon-pink: #F72585;
  --holographic-gold: #FFD166;
  --matrix-green: #06D6A0;
  
  /* ===== 3D DEPTH SHADOWS ===== */
  --shadow-3d-soft: 0 4px 20px rgba(0, 245, 255, 0.1);
  --shadow-3d-medium: 0 8px 32px rgba(67, 97, 238, 0.15);
  --shadow-3d-intense: 0 12px 48px rgba(114, 9, 183, 0.2);
  --shadow-3d-glow: 0 0 40px rgba(247, 37, 133, 0.3);
  
  /* ===== 3D SPACING SYSTEM ===== */
  --space-3d-xs: 0.5rem;
  --space-3d-sm: 1rem;
  --space-3d-md: 1.5rem;
  --space-3d-lg: 2rem;
  --space-3d-xl: 3rem;
  --space-3d-2xl: 4rem;
  --space-3d-3xl: 6rem;
  
  /* ===== 3D ANIMATION TIMING ===== */
  --ease-3d-bounce: cubic-bezier(0.68, -0.55, 0.265, 1.55);
  --ease-3d-smooth: cubic-bezier(0.4, 0, 0.2, 1);
  --ease-3d-power: cubic-bezier(0.77, 0, 0.175, 1);
}

/* ===== 3D BACKGROUND SYSTEM ===== */
.bg-3d-space {
  background: linear-gradient(135deg, var(--space-black) 0%, var(--deep-space) 50%, var(--cosmic-purple) 100%);
}

.bg-3d-deep {
  background: linear-gradient(135deg, var(--deep-space) 0%, var(--nebula-blue) 50%, var(--space-black) 100%);
}

.bg-3d-cosmic {
  background: 
    radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.15) 0%, transparent 50%),
    radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.15) 0%, transparent 50%),
    radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.2) 0%, transparent 50%),
    linear-gradient(135deg, var(--space-black) 0%, var(--deep-space) 100%);
}

/* ===== 3D CARD SYSTEM ===== */
.card-3d {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  box-shadow: 
    var(--shadow-3d-soft),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
  transition: all 0.4s var(--ease-3d-smooth);
  transform-style: preserve-3d;
  perspective: 1000px;
}

.card-3d:hover {
  border-color: rgba(0, 245, 255, 0.4);
  box-shadow: 
    var(--shadow-3d-medium),
    var(--shadow-3d-glow),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
  transform: translateY(-8px) rotateX(5deg);
}

.card-3d-premium {
  composes: card-3d;
  background: linear-gradient(135deg, 
    rgba(255, 255, 255, 0.08) 0%, 
    rgba(255, 255, 255, 0.03) 100%);
  border: 1px solid rgba(0, 245, 255, 0.2);
}

/* ===== 3D BUTTON SYSTEM ===== */
.btn-3d {
  background: linear-gradient(135deg, var(--cyber-cyan) 0%, var(--quantum-blue) 100%);
  color: white;
  border: none;
  border-radius: 16px;
  padding: 14px 28px;
  font-weight: 600;
  transition: all 0.4s var(--ease-3d-bounce);
  box-shadow: var(--shadow-3d-medium);
  position: relative;
  overflow: hidden;
}

.btn-3d::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.6s;
}

.btn-3d:hover {
  transform: translateY(-4px) scale(1.02);
  box-shadow: var(--shadow-3d-intense);
  background: linear-gradient(135deg, var(--quantum-blue) 0%, var(--cosmic-purple) 100%);
}

.btn-3d:hover::before {
  left: 100%;
}

.btn-3d-secondary {
  background: rgba(255, 255, 255, 0.1);
  color: white;
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 16px;
  padding: 14px 28px;
  font-weight: 600;
  transition: all 0.4s var(--ease-3d-smooth);
  backdrop-filter: blur(10px);
}

.btn-3d-secondary:hover {
  background: rgba(255, 255, 255, 0.15);
  border-color: var(--cyber-cyan);
  transform: translateY(-2px);
  box-shadow: var(--shadow-3d-soft);
}

/* ===== 3D TYPOGRAPHY SYSTEM ===== */
.text-3d-hero {
  font-size: clamp(3rem, 8vw, 6rem);
  font-weight: 900;
  line-height: 1.1;
  background: linear-gradient(135deg, #FFFFFF 0%, var(--cyber-cyan) 50%, var(--quantum-blue) 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-shadow: 0 4px 20px rgba(0, 245, 255, 0.3);
}

.text-3d-heading {
  font-size: clamp(2rem, 5vw, 3.5rem);
  font-weight: 800;
  line-height: 1.2;
  color: white;
  text-shadow: 0 2px 10px rgba(255, 255, 255, 0.1);
}

.text-3d-subheading {
  font-size: clamp(1.5rem, 4vw, 2.5rem);
  font-weight: 700;
  line-height: 1.3;
  color: white;
}

.text-3d-body {
  font-size: 1.125rem;
  line-height: 1.7;
  color: #E2E8F0;
}

.text-3d-glow {
  color: var(--cyber-cyan);
  text-shadow: 0 0 20px currentColor;
}

/* ===== 3D GRADIENT SYSTEM ===== */
.gradient-3d-cyber {
  background: linear-gradient(135deg, var(--cyber-cyan) 0%, var(--quantum-blue) 100%);
}

.gradient-3d-cosmic {
  background: linear-gradient(135deg, var(--cosmic-purple) 0%, var(--neon-pink) 100%);
}

.gradient-3d-matrix {
  background: linear-gradient(135deg, var(--matrix-green) 0%, var(--cyber-cyan) 100%);
}

.gradient-3d-holographic {
  background: linear-gradient(135deg, 
    var(--cyber-cyan) 0%, 
    var(--quantum-blue) 25%, 
    var(--cosmic-purple) 50%, 
    var(--neon-pink) 75%, 
    var(--holographic-gold) 100%);
}

/* ===== 3D ANIMATION SYSTEM ===== */
@keyframes float-3d {
  0%, 100% { transform: translateY(0px) rotateX(0deg); }
  50% { transform: translateY(-20px) rotateX(5deg); }
}

@keyframes glow-3d {
  0%, 100% { box-shadow: var(--shadow-3d-soft); }
  50% { box-shadow: var(--shadow-3d-glow); }
}

@keyframes hologram-scan {
  0% { transform: translateY(-100%) rotateX(45deg); opacity: 0; }
  50% { opacity: 0.5; }
  100% { transform: translateY(100%) rotateX(45deg); opacity: 0; }
}

.animate-float-3d {
  animation: float-3d 6s var(--ease-3d-smooth) infinite;
}

.animate-glow-3d {
  animation: glow-3d 4s var(--ease-3d-smooth) infinite;
}

.animate-hologram {
  position: relative;
  overflow: hidden;
}

.animate-hologram::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 2px;
  background: linear-gradient(90deg, transparent, var(--cyber-cyan), transparent);
  animation: hologram-scan 3s var(--ease-3d-power) infinite;
}

/* ===== 3D LAYOUT SYSTEM ===== */
.container-3d {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 var(--space-3d-md);
}

.section-3d {
  padding: var(--space-3d-3xl) 0;
}

.section-3d-sm {
  padding: var(--space-3d-xl) 0;
}

.section-3d-lg {
  padding: var(--space-3d-3xl) 0;
}

/* ===== 3D COMPONENT VARIANTS ===== */
.asset-card-3d {
  composes: card-3d;
  transition: all 0.5s var(--ease-3d-bounce);
}

.asset-card-3d:hover {
  transform: translateY(-12px) rotateY(5deg) scale(1.02);
}

.stats-card-3d {
  composes: card-3d;
  text-align: center;
  padding: var(--space-3d-lg);
}

.stats-card-3d:hover {
  transform: translateY(-6px) scale(1.05);
}

/* ===== 3D RESPONSIVE SYSTEM ===== */
@media (max-width: 768px) {
  .container-3d {
    padding: 0 var(--space-3d-sm);
  }
  
  .section-3d {
    padding: var(--space-3d-xl) 0;
  }
  
  .btn-3d, .btn-3d-secondary {
    padding: 12px 24px;
    width: 100%;
  }
}

/* ===== 3D UTILITY CLASSES ===== */
.border-3d {
  border: 1px solid rgba(255, 255, 255, 0.1);
}

.border-3d-glow {
  border: 1px solid var(--cyber-cyan);
  box-shadow: 0 0 20px rgba(0, 245, 255, 0.3);
}

.shadow-3d {
  box-shadow: var(--shadow-3d-medium);
}

.backdrop-3d {
  backdrop-filter: blur(20px);
  background: rgba(255, 255, 255, 0.05);
}

.glass-3d {
  background: rgba(255, 255, 255, 0.08);
  backdrop-filter: blur(30px);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

/* ===== PREMIUM CONTAINER (Header Specific) ===== */
.premium-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 var(--space-3d-sm);
}

@media (min-width: 768px) {
  .premium-container {
    padding: 0 var(--space-3d-md);
  }
}

--- src/components/ui/AdvancedFilters.tsx ---
"use client";

import React, { useState } from 'react';
import { DollarSign, TrendingUp, MapPin, Building, Filter } from 'lucide-react';

interface AdvancedFiltersProps {
  onFilterChange: (filters: any) => void;
}

export default function AdvancedFilters({ onFilterChange }: AdvancedFiltersProps) {
  const [filters, setFilters] = useState({
    category: 'all',
    minPrice: 0,
    maxPrice: 10000000,
    minROI: 0,
    maxROI: 50,
    status: 'all',
    location: 'all'
  });

  const categories = [
    { value: 'all', label: 'All Categories' },
    { value: 'real-estate', label: 'Real Estate' },
    { value: 'thoroughbred', label: 'Thoroughbred' },
    { value: 'marine', label: 'Marine Assets' },
    { value: 'aviation', label: 'Aviation' },
    { value: 'venture', label: 'Venture Capital' },
    { value: 'luxury', label: 'Luxury Goods' }
  ];

  const locations = [
    { value: 'all', label: 'All Locations' },
    { value: 'dubai', label: 'Dubai, UAE' },
    { value: 'kentucky', label: 'Kentucky, USA' },
    { value: 'french-riviera', label: 'French Riviera' },
    { value: 'silicon-valley', label: 'Silicon Valley' },
    { value: 'antwerp', label: 'Antwerp, Belgium' }
  ];

  const statuses = [
    { value: 'all', label: 'All Status' },
    { value: 'available', label: 'Available' },
    { value: 'coming-soon', label: 'Coming Soon' }
  ];

  const handleFilterChange = (key: string, value: any) => {
    const newFilters = { ...filters, [key]: value };
    setFilters(newFilters);
    onFilterChange(newFilters);
  };

  const resetFilters = () => {
    const resetFilters = {
      category: 'all',
      minPrice: 0,
      maxPrice: 10000000,
      minROI: 0,
      maxROI: 50,
      status: 'all',
      location: 'all'
    };
    setFilters(resetFilters);
    onFilterChange(resetFilters);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-white flex items-center space-x-2">
          <Filter className="w-5 h-5 text-cyan-400" />
          <span>Advanced Filters</span>
        </h3>
        <button
          onClick={resetFilters}
          className="text-cyan-400 hover:text-cyan-300 text-sm font-medium transition-colors"
        >
          Reset All
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {/* Category Filter */}
        <div>
          <label className="flex items-center space-x-2 text-gray-300 mb-3 text-sm font-semibold">
            <Building className="w-4 h-4" />
            <span>Category</span>
          </label>
          <select
            value={filters.category}
            onChange={(e) => handleFilterChange('category', e.target.value)}
            className="w-full bg-gray-800/50 border border-gray-600 rounded-xl px-3 py-2 text-white focus:outline-none focus:border-cyan-500 text-sm"
          >
            {categories.map(category => (
              <option key={category.value} value={category.value} className="bg-gray-800">
                {category.label}
              </option>
            ))}
          </select>
        </div>

        {/* Location Filter */}
        <div>
          <label className="flex items-center space-x-2 text-gray-300 mb-3 text-sm font-semibold">
            <MapPin className="w-4 h-4" />
            <span>Location</span>
          </label>
          <select
            value={filters.location}
            onChange={(e) => handleFilterChange('location', e.target.value)}
            className="w-full bg-gray-800/50 border border-gray-600 rounded-xl px-3 py-2 text-white focus:outline-none focus:border-cyan-500 text-sm"
          >
            {locations.map(location => (
              <option key={location.value} value={location.value} className="bg-gray-800">
                {location.label}
              </option>
            ))}
          </select>
        </div>

        {/* Price Range */}
        <div>
          <label className="flex items-center space-x-2 text-gray-300 mb-3 text-sm font-semibold">
            <DollarSign className="w-4 h-4" />
            <span>Price Range</span>
          </label>
          <div className="space-y-4">
            <div>
              <label className="text-gray-400 text-xs">Min: ${filters.minPrice.toLocaleString()}</label>
              <input
                type="range"
                min="0"
                max="10000000"
                step="100000"
                value={filters.minPrice}
                onChange={(e) => handleFilterChange('minPrice', Number(e.target.value))}
                className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
              />
            </div>
            <div>
              <label className="text-gray-400 text-xs">Max: ${filters.maxPrice.toLocaleString()}</label>
              <input
                type="range"
                min="0"
                max="10000000"
                step="100000"
                value={filters.maxPrice}
                onChange={(e) => handleFilterChange('maxPrice', Number(e.target.value))}
                className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
              />
            </div>
          </div>
        </div>

        {/* ROI Range */}
        <div>
          <label className="flex items-center space-x-2 text-gray-300 mb-3 text-sm font-semibold">
            <TrendingUp className="w-4 h-4" />
            <span>ROI Range</span>
          </label>
          <div className="space-y-4">
            <div>
              <label className="text-gray-400 text-xs">Min: {filters.minROI}%</label>
              <input
                type="range"
                min="0"
                max="50"
                step="1"
                value={filters.minROI}
                onChange={(e) => handleFilterChange('minROI', Number(e.target.value))}
                className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
              />
            </div>
            <div>
              <label className="text-gray-400 text-xs">Max: {filters.maxROI}%</label>
              <input
                type="range"
                min="0"
                max="50"
                step="1"
                value={filters.maxROI}
                onChange={(e) => handleFilterChange('maxROI', Number(e.target.value))}
                className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

--- src/components/ui/AnalyticsChart.tsx ---
"use client";

import React from 'react';

export default function AnalyticsChart() {
  // Mock data for the chart
  const performanceData = [
    { month: 'Jan', value: 65 },
    { month: 'Feb', value: 78 },
    { month: 'Mar', value: 90 },
    { month: 'Apr', value: 81 },
    { month: 'May', value: 56 },
    { month: 'Jun', value: 55 },
    { month: 'Jul', value: 40 },
    { month: 'Aug', value: 45 },
    { month: 'Sep', value: 60 },
    { month: 'Oct', value: 75 },
    { month: 'Nov', value: 85 },
    { month: 'Dec', value: 95 }
  ];

  const maxValue = Math.max(...performanceData.map(d => d.value));

  return (
    <div className="glass-ultimate rounded-3xl border border-white/10 p-8">
      <h3 className="text-2xl font-bold text-white mb-6">Portfolio Performance</h3>
      
      {/* Chart Container */}
      <div className="h-64 relative">
        {/* Grid Lines */}
        <div className="absolute inset-0 flex flex-col justify-between">
          {[0, 25, 50, 75, 100].map((line) => (
            <div key={line} className="flex items-center">
              <div className="text-blue-300 text-xs w-8 mr-2 text-right">{line}%</div>
              <div className="flex-1 border-t border-white/10" />
            </div>
          ))}
        </div>

        {/* Chart Bars */}
        <div className="absolute inset-0 flex items-end justify-between px-4 pb-8">
          {performanceData.map((point, index) => (
            <div key={index} className="flex flex-col items-center group">
              <div
                className="w-6 bg-gradient-to-t from-cyan-500 to-blue-600 rounded-t-lg transition-all duration-500 hover:from-cyan-400 hover:to-blue-500 cursor-pointer relative"
                style={{ height: `${(point.value / maxValue) * 80}%` }}
              >
                {/* Tooltip */}
                <div className="absolute -top-12 left-1/2 transform -translate-x-1/2 bg-black/90 backdrop-blur-sm text-white text-xs py-1 px-2 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap">
                  {point.month}: {point.value}%
                </div>
              </div>
              <div className="text-blue-300 text-xs mt-2">{point.month}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Performance Summary */}
      <div className="mt-6 grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="text-center p-4 bg-white/5 rounded-xl border border-white/10">
          <div className="text-2xl font-black text-emerald-400">+24.7%</div>
          <div className="text-cyan-100 text-sm">Total Growth</div>
        </div>
        <div className="text-center p-4 bg-white/5 rounded-xl border border-white/10">
          <div className="text-2xl font-black text-cyan-400">12.8%</div>
          <div className="text-cyan-100 text-sm">Avg. Monthly</div>
        </div>
        <div className="text-center p-4 bg-white/5 rounded-xl border border-white/10">
          <div className="text-2xl font-black text-purple-400">$1.2M</div>
          <div className="text-cyan-100 text-sm">Portfolio Value</div>
        </div>
        <div className="text-center p-4 bg-white/5 rounded-xl border border-white/10">
          <div className="text-2xl font-black text-orange-400">8</div>
          <div className="text-cyan-100 text-sm">Active Assets</div>
        </div>
      </div>
    </div>
  );
}

--- src/components/ui/AnimatedBackground.tsx ---
"use client";

import React from 'react';
import { useScrollColor } from '@/hooks/useScrollColor';

export default function AnimatedBackground() {
  const { getScrollColor, getTextColor } = useScrollColor();

  return (
    <div className="fixed inset-0 -z-10 overflow-hidden">
      {/* Animated Gradient Background */}
      <div className={`absolute inset-0 bg-gradient-to-br ${getScrollColor()} transition-all duration-1000`}>
        {/* Animated Particles */}
        <div className="absolute inset-0">
          {[...Array(20)].map((_, i) => (
            <div
              key={i}
              className="absolute w-2 h-2 bg-white/10 rounded-full animate-float"
              style={{
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
                animationDelay: `${Math.random() * 5}s`,
                animationDuration: `${10 + Math.random() * 10}s`
              }}
            />
          ))}
        </div>
        
        {/* Grid Pattern */}
        <div className="absolute inset-0 bg-[linear-gradient(rgba(255,255,255,0.05)_1px,transparent_1px),linear-gradient(90deg,rgba(255,255,255,0.05)_1px,transparent_1px)] bg-[size:50px_50px] [mask-image:radial-gradient(ellipse_80%_50%_at_50%_50%,black,transparent)]" />
      </div>
    </div>
  );
}

--- src/components/ui/AssetDetailsModal.tsx ---
// Enhanced AssetDetailsModal.tsx
"use client";

import { motion, AnimatePresence } from 'framer-motion';
import React from 'react';
import { 
  X, MapPin, Calendar, TrendingUp, DollarSign, Users, Building, Shield, Star, Target,
  BadgeCheck, Clock, Zap, BarChart3, Crown, Gem, Coins, Lock, Sparkles, Eye, ArrowRight,
  CheckCircle, Home, Trophy, Ship, Plane, Palette, Briefcase
} from 'lucide-react';
import RealAssetImage from './RealAssetImage';

interface AssetDetailsModalProps {
  isOpen: boolean;
  onClose: () => void;
  asset: any;
  onInvest: (assetId: number) => void;
  context?: 'marketplace' | 'dashboard' | 'featured';
}

export default function AssetDetailsModal({ 
  isOpen, 
  onClose, 
  asset, 
  onInvest,
  context = 'marketplace'
}: AssetDetailsModalProps) {
  if (!isOpen || !asset) return null;

  // Determine if this is an owned asset (dashboard context)
  const isOwnedAsset = context === 'dashboard';
  const canInvest = context !== 'dashboard' && onInvest;

  const getAssetIcon = (type: string) => {
    const icons = {
      'Real Estate': Home,
      'Thoroughbred': Trophy,
      'Marine Asset': Ship,
      'Aviation': Plane,
      'Fine Art': Palette,
      'Venture Capital': Briefcase,
      'Luxury Goods': Gem
    };
    return icons[type as keyof typeof icons] || Building;
  };

  const AssetIcon = getAssetIcon(asset.type);

  const features = [
    { icon: Shield, label: 'Blockchain Verified', color: 'emerald', description: 'Every transaction recorded on immutable blockchain' },
    { icon: Target, label: 'Proven Track Record', color: 'amber', description: 'Consistent returns with verified performance history' },
    { icon: Users, label: 'Professional Management', color: 'cyan', description: 'Managed by industry experts and asset specialists' },
    { icon: Star, label: 'Premium Asset Class', color: 'purple', description: 'Exclusive access to elite investment opportunities' },
    { icon: Lock, label: 'Fully Secured', color: 'blue', description: 'Bank-level security and comprehensive insurance' },
    { icon: Zap, label: 'Instant Liquidity', color: 'amber', description: 'Secondary market trading available' }
  ];

  const performanceMetrics = [
    { 
      label: 'Historical ROI', 
      value: asset.roi, 
      color: 'from-amber-500 to-orange-500',
      icon: TrendingUp,
      description: 'Average annual returns'
    },
    { 
      label: 'Asset Value', 
      value: `$${(asset.value / 1000000).toFixed(1)}M`, 
      color: 'from-cyan-500 to-blue-500',
      icon: DollarSign,
      description: 'Current market valuation'
    },
    { 
      label: 'Minimum Investment', 
      value: `$${asset.minInvestment}`, 
      color: 'from-emerald-500 to-teal-500',
      icon: Coins,
      description: 'Start with fractional ownership'
    },
    { 
      label: 'Investment Timeline', 
      value: asset.timeline, 
      color: 'from-purple-500 to-pink-500',
      icon: Calendar,
      description: 'Recommended holding period'
    }
  ];

  const assetStats = [
    { label: 'Funding Progress', value: `${asset.sharesSold || 78}%`, color: 'cyan', icon: BarChart3 },
    { label: 'Investor Count', value: asset.investorCount?.toString() || '247', color: 'emerald', icon: Users },
    { label: 'Time Remaining', value: asset.timeLeft || '5 days', color: 'amber', icon: Clock },
    { label: 'Asset Rating', value: '4.8/5', color: 'amber', icon: Star }
  ];

  const getContextBadge = () => {
    switch (context) {
      case 'dashboard':
        return { label: 'Owned Asset', color: 'emerald', icon: CheckCircle };
      case 'featured':
        return { label: 'Featured', color: 'amber', icon: Star };
      default:
        return { label: 'Available', color: 'cyan', icon: BadgeCheck };
    }
  };

  const contextBadge = getContextBadge();
  const ContextBadgeIcon = contextBadge.icon;

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-[100] flex items-center justify-center p-4 bg-black/80 backdrop-blur-sm overflow-y-auto"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0, y: 20 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.9, opacity: 0, y: 20 }}
            className="bg-gradient-to-br from-slate-900 to-slate-800 border border-slate-700 rounded-3xl shadow-2xl w-full max-w-6xl max-h-[90vh] overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Enhanced Header */}
            <div className="flex flex-col sm:flex-row sm:items-start justify-between p-6 border-b border-slate-700 sticky top-0 bg-slate-900/80 backdrop-blur-sm z-10 rounded-t-3xl">
              <div className="flex flex-col sm:flex-row sm:items-start gap-4 mb-4 sm:mb-0">
                <div className="relative">
                  <RealAssetImage type={asset.type} title={asset.title} size="xl" />
                  <div className="absolute -top-2 -right-2 bg-amber-500 rounded-full p-1">
                    <Crown className="w-4 h-4 text-white" />
                  </div>
                </div>
                <div className="flex-1 min-w-0">
                  <div className="flex items-center space-x-3 mb-3">
                    <div className={`flex items-center space-x-2 bg-${contextBadge.color}-500/20 px-3 py-1 rounded-full border border-${contextBadge.color}-500/30`}>
                      <ContextBadgeIcon className={`w-4 h-4 text-${contextBadge.color}-400`} />
                      <span className={`text-${contextBadge.color}-400 text-sm font-medium`}>{contextBadge.label}</span>
                    </div>
                    {asset.badges && asset.badges.slice(0, 2).map((badge: any, index: number) => (
                      <div key={index} className={`flex items-center space-x-2 bg-${badge.color}-500/20 px-3 py-1 rounded-full border border-${badge.color}-500/30`}>
                        <span className={`text-${badge.color}-400 text-sm font-medium`}>{badge.label}</span>
                      </div>
                    ))}
                  </div>
                  
                  <h2 className="text-3xl font-bold text-white mb-2 break-words">{asset.title}</h2>
                  <div className="flex flex-wrap items-center gap-4 text-slate-300">
                    <div className="flex items-center space-x-2">
                      <AssetIcon className="w-5 h-5 text-cyan-400" />
                      <span className="font-medium">{asset.type}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <MapPin className="w-5 h-5 text-amber-400" />
                      <span>{asset.location}</span>
                    </div>
                    <div className="flex items-center space-x-2 text-amber-400">
                      <TrendingUp className="w-5 h-5" />
                      <span className="font-semibold">{asset.roi} ROI</span>
                    </div>
                    {asset.performance && (
                      <div className="flex items-center space-x-2 text-emerald-400">
                        <BarChart3 className="w-5 h-5" />
                        <span className="font-medium">{asset.performance}</span>
                      </div>
                    )}
                  </div>
                </div>
              </div>
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                onClick={onClose}
                className="w-10 h-10 bg-slate-700 rounded-full flex items-center justify-center hover:bg-slate-600 transition-colors flex-shrink-0 self-start sm:self-auto"
              >
                <X className="w-5 h-5 text-slate-300" />
              </motion.button>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 p-8">
              {/* Main Content */}
              <div className="lg:col-span-2 space-y-8">
                {/* Asset Description */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.1 }}
                  className="bg-slate-800/50 rounded-2xl p-6 border border-slate-700"
                >
                  <h3 className="text-2xl font-bold text-white mb-4 flex items-center space-x-2">
                    <Eye className="w-6 h-6 text-cyan-400" />
                    <span>Asset Overview</span>
                  </h3>
                  <p className="text-slate-300 leading-relaxed text-lg">{asset.description}</p>
                </motion.div>

                {/* Performance Metrics */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.2 }}
                  className="bg-slate-800/50 rounded-2xl p-6 border border-slate-700"
                >
                  <h3 className="text-2xl font-bold text-white mb-6 flex items-center space-x-2">
                    <TrendingUp className="w-6 h-6 text-amber-400" />
                    <span>Performance Metrics</span>
                  </h3>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                    {performanceMetrics.map((metric, index) => {
                      const MetricIcon = metric.icon;
                      return (
                        <motion.div
                          key={metric.label}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: 0.3 + index * 0.1 }}
                          className="text-center p-6 rounded-2xl border border-slate-700 hover:border-cyan-400/30 transition-all group bg-gradient-to-br from-slate-800/50 to-slate-900/50"
                        >
                          <div className={`w-16 h-16 bg-gradient-to-r ${metric.color} rounded-2xl flex items-center justify-center mx-auto mb-4 transform group-hover:scale-110 transition-transform`}>
                            <MetricIcon className="w-8 h-8 text-white" />
                          </div>
                          <div className="text-2xl font-bold text-white mb-2">{metric.value}</div>
                          <div className="text-slate-300 font-medium mb-2">{metric.label}</div>
                          <div className="text-slate-400 text-sm">{metric.description}</div>
                        </motion.div>
                      );
                    })}
                  </div>
                </motion.div>

                {/* Features */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.4 }}
                  className="bg-slate-800/50 rounded-2xl p-6 border border-slate-700"
                >
                  <h3 className="text-2xl font-bold text-white mb-6 flex items-center space-x-2">
                    <Sparkles className="w-6 h-6 text-purple-400" />
                    <span>Key Features & Benefits</span>
                  </h3>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    {features.map((feature, index) => {
                      const FeatureIcon = feature.icon;
                      return (
                        <motion.div
                          key={feature.label}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ delay: 0.5 + index * 0.1 }}
                          className="flex items-start space-x-4 p-4 bg-slate-700/30 rounded-xl border border-slate-600 hover:border-slate-500 transition-all group"
                        >
                          <div className={`w-12 h-12 bg-${feature.color}-500/20 rounded-xl flex items-center justify-center flex-shrink-0 group-hover:scale-110 transition-transform`}>
                            <FeatureIcon className={`w-6 h-6 text-${feature.color}-400`} />
                          </div>
                          <div>
                            <h4 className={`text-${feature.color}-400 font-semibold text-lg mb-1`}>{feature.label}</h4>
                            <p className="text-slate-300 text-sm">{feature.description}</p>
                          </div>
                        </motion.div>
                      );
                    })}
                  </div>
                </motion.div>
              </div>

              {/* Sidebar */}
              <div className="space-y-6">
                {/* Investment Card */}
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.3 }}
                  className="bg-gradient-to-br from-cyan-500/10 to-blue-500/10 border border-cyan-500/30 rounded-2xl p-6"
                >
                  <h3 className="text-2xl font-bold text-white mb-6 flex items-center space-x-2">
                    <DollarSign className="w-6 h-6 text-cyan-400" />
                    <span>Investment Details</span>
                  </h3>

                  <div className="space-y-4 mb-6">
                    {[
                      { label: 'Asset Value', value: `$${(asset.value / 1000000).toFixed(1)}M`, color: 'white' },
                      { label: 'Minimum Investment', value: `$${asset.minInvestment}`, color: 'cyan-400' },
                      { label: 'Projected ROI', value: asset.roi, color: 'amber-400' },
                      { label: 'Investment Timeline', value: asset.timeline, color: 'white' },
                      { label: 'Asset Category', value: asset.type, color: 'cyan-400' }
                    ].map((item, index) => (
                      <div key={index} className="flex justify-between items-center py-2 border-b border-cyan-500/20 last:border-b-0">
                        <span className="text-slate-300">{item.label}</span>
                        <span className={`text-${item.color} font-semibold`}>{item.value}</span>
                      </div>
                    ))}
                  </div>

                  {isOwnedAsset ? (
                    <div className="bg-emerald-500/20 rounded-xl p-4 border border-emerald-500/30 text-center">
                      <CheckCircle className="w-8 h-8 text-emerald-400 mx-auto mb-2" />
                      <div className="text-emerald-400 font-semibold">Asset Owned</div>
                      <div className="text-emerald-300 text-sm">In your portfolio</div>
                    </div>
                  ) : canInvest ? (
                    <motion.button
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={() => onInvest(asset.id)}
                      className="w-full bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white py-4 rounded-xl font-semibold transition-all duration-300 flex items-center justify-center space-x-2 shadow-lg hover:shadow-xl"
                    >
                      <DollarSign className="w-5 h-5" />
                      <span>Invest in this Asset</span>
                      <ArrowRight className="w-4 h-4" />
                    </motion.button>
                  ) : null}
                </motion.div>

                {/* Asset Statistics */}
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.4 }}
                  className="bg-slate-800/50 rounded-2xl p-6 border border-slate-700"
                >
                  <h3 className="text-2xl font-bold text-white mb-6 flex items-center space-x-2">
                    <BarChart3 className="w-6 h-6 text-emerald-400" />
                    <span>Asset Statistics</span>
                  </h3>
                  <div className="space-y-4">
                    {assetStats.map((stat, index) => {
                      const StatIcon = stat.icon;
                      return (
                        <div key={index} className="flex items-center justify-between p-3 bg-slate-700/30 rounded-xl border border-slate-600">
                          <div className="flex items-center space-x-3">
                            <div className={`w-8 h-8 bg-${stat.color}-500/20 rounded-lg flex items-center justify-center`}>
                              <StatIcon className={`w-4 h-4 text-${stat.color}-400`} />
                            </div>
                            <span className="text-slate-300">{stat.label}</span>
                          </div>
                          <span className={`text-${stat.color}-400 font-semibold`}>{stat.value}</span>
                        </div>
                      );
                    })}
                  </div>
                </motion.div>

                {/* Security Badge */}
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: 0.5 }}
                  className="bg-slate-800/30 rounded-2xl p-4 border border-slate-700 text-center"
                >
                  <div className="flex items-center justify-center space-x-2 text-slate-400 text-sm mb-2">
                    <Shield className="w-4 h-4 text-emerald-400" />
                    <span>Secured by Blockchain Technology</span>
                  </div>
                  <div className="text-slate-500 text-xs">
                    Fully insured • Regulated platform • Instant settlements
                  </div>
                </motion.div>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
--- src/components/ui/AssetGrid.tsx ---
"use client";

import React, { useState } from 'react';
import { mockAssets } from '@/data/mockData';
import EnhancedAssetCard from './EnhancedAssetCard';
import { useScrollAnimation } from '@/hooks/useScrollAnimation';
import { Filter, Search, Grid, List } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { Asset } from '@/types/asset';

export default function AssetGrid() {
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [assets] = useState<Asset[]>(mockAssets); // Use enhanced mockAssets directly
  const { getFadeStyle } = useScrollAnimation();

  const categories = ['all', ...new Set(assets.map(asset => asset.type))];
  const statuses = ['all', ...new Set(assets.map(asset => asset.status || 'Available'))];

  const handleFilter = (category: string, status: string) => {
    setSelectedCategory(category);
    setSelectedStatus(status);
  };

  const filteredAssets = assets.filter(asset => {
    const categoryMatch = selectedCategory === 'all' || asset.type === selectedCategory;
    const statusMatch = selectedStatus === 'all' || (asset.status || 'Available') === selectedStatus;
    const searchMatch = asset.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                       (asset.description || '').toLowerCase().includes(searchQuery.toLowerCase()) ||
                       asset.location.toLowerCase().includes(searchQuery.toLowerCase());
    
    return categoryMatch && statusMatch && searchMatch;
  });

  const getCategoryLabel = (category: string) => {
    return category === 'all' ? 'All Assets' : category;
  };

  const getStatusLabel = (status: string) => {
    return status === 'all' ? 'All Status' : status;
  };

  // UPDATED HANDLERS - Accept Asset objects
  const handleInvest = (asset: Asset) => {
    console.log('Invest in:', asset.id);
  };

  const handleViewDetails = (asset: Asset) => {
    console.log('View details:', asset.id);
  };

  return (
    <div className="space-y-8">
      {/* Enhanced Filters Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6"
      >
        <div className="flex flex-col lg:flex-row gap-6 items-center justify-between">
          {/* Search Bar */}
          <div className="flex-1 w-full lg:max-w-md">
            <div className="relative">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5" />
              <input
                type="text"
                placeholder="Search assets by name, location, or description..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-12 pr-4 py-3 bg-slate-900/50 border border-slate-600 rounded-xl text-white placeholder-slate-400 focus:border-amber-400 focus:outline-none transition-all duration-300 backdrop-blur-sm"
              />
            </div>
          </div>

          {/* View Mode Toggle */}
          <div className="flex items-center gap-2 bg-slate-900/50 rounded-xl p-2 border border-slate-600 backdrop-blur-sm">
            <button
              onClick={() => setViewMode('grid')}
              className={`p-3 rounded-lg transition-all duration-300 ${
                viewMode === 'grid'
                  ? 'bg-amber-500 text-white shadow-lg'
                  : 'text-slate-400 hover:text-white hover:bg-slate-700'
              }`}
            >
              <Grid className="w-5 h-5" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={`p-3 rounded-lg transition-all duration-300 ${
                viewMode === 'list'
                  ? 'bg-amber-500 text-white shadow-lg'
                  : 'text-slate-400 hover:text-white hover:bg-slate-700'
              }`}
            >
              <List className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Category and Status Filters */}
        <div className="mt-6 flex flex-col lg:flex-row gap-4 items-center justify-between">
          {/* Category Filters */}
          <div className="flex flex-wrap gap-2">
            <div className="flex items-center space-x-2 text-slate-300 mr-4">
              <Filter className="w-4 h-4" />
              <span className="text-sm font-medium">Category:</span>
            </div>
            {categories.map(category => (
              <button
                key={category}
                onClick={() => handleFilter(category, selectedStatus)}
                className={`px-4 py-2 rounded-xl font-medium transition-all duration-300 backdrop-blur-sm border ${
                  selectedCategory === category
                    ? 'bg-gradient-to-r from-amber-500 to-amber-600 text-white border-amber-400/50 shadow-lg'
                    : 'bg-slate-700/50 text-slate-300 border-slate-600 hover:border-amber-400/30 hover:bg-slate-700'
                }`}
              >
                {getCategoryLabel(category)}
              </button>
            ))}
          </div>

          {/* Status Filters */}
          <div className="flex flex-wrap gap-2">
            <span className="text-slate-300 text-sm font-medium mr-4">Status:</span>
            {statuses.map(status => (
              <button
                key={status}
                onClick={() => handleFilter(selectedCategory, status)}
                className={`px-3 py-1 rounded-lg text-sm font-medium transition-all duration-300 backdrop-blur-sm border ${
                  selectedStatus === status
                    ? 'bg-gradient-to-r from-emerald-500 to-emerald-600 text-white border-emerald-400/50'
                    : 'bg-slate-700/50 text-slate-300 border-slate-600 hover:border-emerald-400/30 hover:bg-slate-700'
                }`}
              >
                {getStatusLabel(status)}
              </button>
            ))}
          </div>
        </div>

        {/* Results Count */}
        <div className="mt-4 flex items-center justify-between">
          <div className="text-slate-300 text-sm">
            Showing <span className="text-white font-semibold">{filteredAssets.length}</span> of{' '}
            <span className="text-white font-semibold">{assets.length}</span> premium assets
          </div>
          <div className="text-slate-400 text-sm">
            {viewMode === 'grid' ? 'Grid View' : 'List View'}
          </div>
        </div>
      </motion.div>

      {/* Asset Grid/List */}
      <AnimatePresence mode="wait">
        {filteredAssets.length > 0 ? (
          <motion.div
            key={viewMode}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{ duration: 0.4 }}
            className={viewMode === 'grid'
              ? "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6"
              : "space-y-4"
            }
          >
            {filteredAssets.map((asset, index) => (
              <motion.div
                key={asset.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
              >
                {/* UPDATED: Pass asset object instead of spreading */}
                <EnhancedAssetCard
                  asset={asset}
                  onInvest={handleInvest}
                  onViewDetails={handleViewDetails}
                  enhanced={true}
                />
              </motion.div>
            ))}
          </motion.div>
        ) : (
          /* Enhanced Empty State */
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="text-center py-16 bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700"
          >
            <div className="max-w-md mx-auto">
              <div className="w-16 h-16 bg-slate-700 rounded-2xl flex items-center justify-center mx-auto mb-4">
                <Filter className="w-8 h-8 text-slate-400" />
              </div>
              <h3 className="text-2xl font-bold text-white mb-2">No Assets Found</h3>
              <p className="text-slate-300 mb-6">
                Try adjusting your search criteria or filters to find more investment opportunities.
              </p>
              <button
                onClick={() => {
                  setSearchQuery('');
                  setSelectedCategory('all');
                  setSelectedStatus('all');
                }}
                className="bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 text-white px-8 py-3 rounded-xl font-semibold transition-all duration-300 shadow-lg hover:shadow-xl"
              >
                Clear All Filters
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
--- src/components/ui/AssetImage.tsx ---
"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { 
  Building2, 
  TrendingUp,  // Using TrendingUp instead of Horse
  Ship, 
  Plane, 
  Gem, 
  LandPlot,
  Factory,
  Car,
  Zap,         // Using Zap instead of TreePine
  Battery      // Using Battery instead of SolarPanel
} from 'lucide-react';

interface AssetImageProps {
  type: string;
  title: string;
  className?: string;
  size?: 'sm' | 'md' | 'lg';
}

const getAssetIcon = (type: string) => {
  const typeLower = type.toLowerCase();
  
  if (typeLower.includes('real estate') || typeLower.includes('villa') || typeLower.includes('property')) {
    return Building2;
  } else if (typeLower.includes('thoroughbred') || typeLower.includes('horse')) {
    return TrendingUp;  // Using TrendingUp as alternative
  } else if (typeLower.includes('marine') || typeLower.includes('yacht') || typeLower.includes('ship')) {
    return Ship;
  } else if (typeLower.includes('aviation') || typeLower.includes('plane') || typeLower.includes('jet')) {
    return Plane;
  } else if (typeLower.includes('diamond') || typeLower.includes('gem') || typeLower.includes('luxury')) {
    return Gem;
  } else if (typeLower.includes('land') || typeLower.includes('plot')) {
    return LandPlot;
  } else if (typeLower.includes('factory') || typeLower.includes('industrial')) {
    return Factory;
  } else if (typeLower.includes('car') || typeLower.includes('auto')) {
    return Car;
  } else if (typeLower.includes('forest') || typeLower.includes('timber')) {
    return Zap;  // Using Zap as alternative
  } else if (typeLower.includes('solar') || typeLower.includes('energy')) {
    return Battery;  // Using Battery as alternative
  }
  
  return Building2; // Default icon
};

const getAssetGradient = (type: string) => {
  const typeLower = type.toLowerCase();
  
  if (typeLower.includes('real estate') || typeLower.includes('villa') || typeLower.includes('property')) {
    return 'from-blue-500 to-cyan-500';
  } else if (typeLower.includes('thoroughbred') || typeLower.includes('horse')) {
    return 'from-amber-500 to-orange-500';
  } else if (typeLower.includes('marine') || typeLower.includes('yacht') || typeLower.includes('ship')) {
    return 'from-cyan-500 to-blue-500';
  } else if (typeLower.includes('aviation') || typeLower.includes('plane') || typeLower.includes('jet')) {
    return 'from-slate-500 to-gray-500';
  } else if (typeLower.includes('diamond') || typeLower.includes('gem') || typeLower.includes('luxury')) {
    return 'from-purple-500 to-pink-500';
  } else if (typeLower.includes('land') || typeLower.includes('plot')) {
    return 'from-emerald-500 to-teal-500';
  } else if (typeLower.includes('factory') || typeLower.includes('industrial')) {
    return 'from-orange-500 to-red-500';
  } else if (typeLower.includes('car') || typeLower.includes('auto')) {
    return 'from-red-500 to-pink-500';
  } else if (typeLower.includes('forest') || typeLower.includes('timber')) {
    return 'from-green-500 to-emerald-500';
  } else if (typeLower.includes('solar') || typeLower.includes('energy')) {
    return 'from-yellow-500 to-amber-500';
  }
  
  return 'from-cyan-500 to-blue-500'; // Default gradient
};

const getSizeClasses = (size: 'sm' | 'md' | 'lg') => {
  switch (size) {
    case 'sm':
      return 'w-8 h-8';
    case 'md':
      return 'w-12 h-12';
    case 'lg':
      return 'w-16 h-16';
    default:
      return 'w-12 h-12';
  }
};

export default function AssetImage({ type, title, className = '', size = 'md' }: AssetImageProps) {
  const IconComponent = getAssetIcon(type);
  const gradient = getAssetGradient(type);
  const sizeClasses = getSizeClasses(size);

  return (
    <motion.div
      whileHover={{ scale: 1.05 }}
      className={`${sizeClasses} bg-gradient-to-r ${gradient} rounded-xl flex items-center justify-center ${className}`}
    >
      <IconComponent className="text-white" size={size === 'sm' ? 16 : size === 'md' ? 24 : 32} />
    </motion.div>
  );
}

--- src/components/ui/CosmicBackground.tsx ---
'use client'

import { useEffect, useRef } from 'react'

export function CosmicBackground() {
  const canvasRef = useRef<HTMLCanvasElement>(null)

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext('2d')
    if (!ctx) return

    // Set canvas size
    const resizeCanvas = () => {
      canvas.width = window.innerWidth
      canvas.height = window.innerHeight
    }
    resizeCanvas()
    window.addEventListener('resize', resizeCanvas)

    // Particle system
    const particles: Array<{
      x: number
      y: number
      vx: number
      vy: number
      size: number
      color: string
      life: number
    }> = []

    const colors = [
      '#00F5FF', '#4361EE', '#7209B7', '#F72585', '#FFD166', '#06D6A0'
    ]

    // Create particles
    for (let i = 0; i < 150; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        vx: (Math.random() - 0.5) * 0.5,
        vy: (Math.random() - 0.5) * 0.5,
        size: Math.random() * 2 + 0.5,
        color: colors[Math.floor(Math.random() * colors.length)],
        life: Math.random() * 100
      })
    }

    // Animation
    const animate = () => {
      ctx.fillStyle = 'rgba(10, 11, 15, 0.1)'
      ctx.fillRect(0, 0, canvas.width, canvas.height)

      particles.forEach((particle, index) => {
        // Update position
        particle.x += particle.vx
        particle.y += particle.vy
        particle.life += 0.1

        // Wrap around edges
        if (particle.x < 0) particle.x = canvas.width
        if (particle.x > canvas.width) particle.x = 0
        if (particle.y < 0) particle.y = canvas.height
        if (particle.y > canvas.height) particle.y = 0

        // Draw particle
        ctx.beginPath()
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2)
        ctx.fillStyle = particle.color
        ctx.globalAlpha = 0.6 + Math.sin(particle.life * 0.1) * 0.4
        ctx.fill()

        // Draw connections
        particles.forEach((otherParticle, otherIndex) => {
          if (index === otherIndex) return

          const dx = particle.x - otherParticle.x
          const dy = particle.y - otherParticle.y
          const distance = Math.sqrt(dx * dx + dy * dy)

          if (distance < 100) {
            ctx.beginPath()
            ctx.strokeStyle = particle.color
            ctx.globalAlpha = 0.2 * (1 - distance / 100)
            ctx.lineWidth = 0.5
            ctx.moveTo(particle.x, particle.y)
            ctx.lineTo(otherParticle.x, otherParticle.y)
            ctx.stroke()
          }
        })
      })

      requestAnimationFrame(animate)
    }

    animate()

    return () => {
      window.removeEventListener('resize', resizeCanvas)
    }
  }, [])

  return (
    <canvas
      ref={canvasRef}
      className="fixed inset-0 pointer-events-none z-0"
      style={{ background: 'linear-gradient(135deg, #0A0B0F 0%, #0F1117 50%, #1A1D29 100%)' }}
    />
  )
}

--- src/components/ui/EnhancedAnalytics.tsx ---
"use client";

import React from 'react';

export default function EnhancedAnalytics() {
  const metrics = [
    { label: 'Current Value', value: '$1,247,500', change: '+12.8%', color: 'text-emerald-400' },
    { label: '24h Volume', value: '$45,280', change: '+5.2%', color: 'text-cyan-400' },
    { label: 'Active Assets', value: '8', change: '+2', color: 'text-blue-400' },
    { label: 'Avg. ROI', value: '15.3%', change: '+1.2%', color: 'text-purple-400' }
  ];

  const allocationData = [
    { asset: 'Real Estate', percentage: 45, color: 'from-blue-500 to-cyan-500' },
    { asset: 'Thoroughbred', percentage: 30, color: 'from-purple-500 to-pink-500' },
    { asset: 'Liquid Assets', percentage: 15, color: 'from-emerald-500 to-teal-500' },
    { asset: 'Development', percentage: 10, color: 'from-amber-500 to-orange-500' }
  ];

  return (
    <div className="glass-ultimate rounded-3xl border border-white/10 p-8">
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6">
        <h3 className="text-2xl font-bold text-white mb-4 lg:mb-0">Portfolio Analytics</h3>
        <div className="flex gap-2">
          <button className="px-4 py-2 bg-cyan-500/20 text-cyan-300 rounded-lg border border-cyan-400/30 text-sm font-medium">
            Live
          </button>
          <button className="px-4 py-2 bg-white/5 text-cyan-100 rounded-lg border border-white/20 text-sm font-medium hover:bg-white/10">
            1D
          </button>
          <button className="px-4 py-2 bg-white/5 text-cyan-100 rounded-lg border border-white/20 text-sm font-medium hover:bg-white/10">
            1W
          </button>
          <button className="px-4 py-2 bg-white/5 text-cyan-100 rounded-lg border border-white/20 text-sm font-medium hover:bg-white/10">
            1M
          </button>
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        {metrics.map((metric, index) => (
          <div key={index} className="bg-white/5 rounded-xl p-4 border border-white/10">
            <div className={`text-2xl font-black ${metric.color} mb-1`}>{metric.value}</div>
            <div className="text-cyan-100 text-sm mb-1">{metric.label}</div>
            <div className="text-emerald-400 text-xs font-semibold">{metric.change}</div>
          </div>
        ))}
      </div>

      {/* Asset Allocation */}
      <div>
        <h4 className="font-semibold text-white mb-4">Asset Allocation</h4>
        <div className="space-y-3">
          {allocationData.map((item, index) => (
            <div key={index} className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className={`w-4 h-4 rounded bg-gradient-to-br ${item.color}`}></div>
                <span className="text-white font-medium text-sm">{item.asset}</span>
              </div>
              <div className="flex items-center gap-3">
                <div className="w-32 bg-white/10 rounded-full h-2">
                  <div
                    className={`h-2 rounded-full bg-gradient-to-r ${item.color} transition-all duration-500`}
                    style={{ width: `${item.percentage}%` }}
                  ></div>
                </div>
                <span className="text-white font-bold w-10 text-sm">{item.percentage}%</span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

--- src/components/ui/EnhancedAssetCard.tsx ---
"use client";

import { motion } from "framer-motion";
import React from "react";
import RealAssetImage from "./RealAssetImage";
import { Eye, TrendingUp, Users, DollarSign, Clock, Building, MapPin, Crown } from "lucide-react";
import { Asset } from '@/types/asset';

interface Props {
  asset: Asset;
  onViewDetails: (asset: Asset) => void;
  onInvest?: (asset: Asset) => void;
  enhanced?: boolean;
}

export default function EnhancedAssetCard({ asset, onViewDetails, onInvest, enhanced = true }: Props) {
  const calculateProgress = () => {
    if (asset.sharesAvailable && asset.sharesSold) {
      return (asset.sharesSold / asset.sharesAvailable) * 100;
    }
    return 75; // Default progress
  };

  const progress = calculateProgress();

  return (
    <motion.div
      whileHover={{ scale: 1.03, y: -5 }}
      transition={{ type: "spring", stiffness: 300, damping: 20 }}
      className="bg-gradient-to-br from-slate-800/60 to-slate-900/60 backdrop-blur-md rounded-2xl border border-slate-700 p-6 hover:border-cyan-400/40 hover:shadow-[0_0_30px_rgba(6,182,212,0.3)] cursor-pointer group"
      onClick={() => onViewDetails(asset)}
    >
      {/* Header with Image and Badges */}
      <div className="flex items-start space-x-4 mb-4">
        <div className="relative">
          <RealAssetImage type={asset.type} title={asset.title} size="lg" />
          {enhanced && (
            <div className="absolute -top-2 -right-2 bg-amber-500 rounded-full p-1">
              <Crown className="w-3 h-3 text-white" />
            </div>
          )}
        </div>
        
        <div className="flex-1 min-w-0">
          <div className="flex items-start justify-between mb-2">
            <div className="flex-1">
              <h3 className="font-bold text-white text-lg mb-1 group-hover:text-cyan-400 transition-colors line-clamp-1">
                {asset.title}
              </h3>
              <p className="text-slate-300 text-sm mb-2">{asset.location}</p>
            </div>
            <span className="bg-gradient-to-r from-amber-500 to-amber-600 text-white px-3 py-1 rounded-full text-sm font-semibold border border-amber-500/30">
              {asset.roi}
            </span>
          </div>

          {/* Badges */}
          {asset.badges && asset.badges.length > 0 && (
            <div className="flex flex-wrap gap-1 mb-3">
              {asset.badges.slice(0, 2).map((badge, i) => (
                <span
                  key={i}
                  className={`px-2 py-1 rounded-full text-xs font-medium border ${
                    badge.color === "emerald"
                      ? "bg-emerald-500/20 text-emerald-300 border-emerald-500/30"
                      : badge.color === "amber"
                      ? "bg-amber-500/20 text-amber-300 border-amber-500/30"
                      : badge.color === "rose"
                      ? "bg-rose-500/20 text-rose-300 border-rose-500/30"
                      : "bg-cyan-500/20 text-cyan-300 border-cyan-500/30"
                  }`}
                >
                  {badge.label}
                </span>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Investment Progress */}
      <div className="mb-4">
        <div className="flex justify-between text-sm text-slate-400 mb-2">
          <span>Funding Progress</span>
          <span className="text-cyan-400">{progress}%</span>
        </div>
        <div className="w-full bg-slate-700 rounded-full h-2">
          <div
            className="bg-gradient-to-r from-cyan-500 to-blue-500 h-2 rounded-full transition-all duration-1000"
            style={{ width: `${progress}%` }}
          />
        </div>
      </div>

      {/* Enhanced Metrics */}
      <div className="grid grid-cols-2 gap-4 mb-4">
        <div>
          <p className="text-slate-400 text-sm">Asset Value</p>
          <p className="text-white font-semibold">${(asset.value / 1000000).toFixed(1)}M</p>
        </div>
        <div>
          <p className="text-slate-400 text-sm">Minimum</p>
          <p className="text-cyan-400 font-semibold">${asset.minInvestment}</p>
        </div>
      </div>

      {/* Footer */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4 text-slate-400 text-sm">
          <div className="flex items-center space-x-1">
            <Users className="w-4 h-4" />
            <span>{asset.investorCount} investors</span>
          </div>
          {asset.performance && (
            <div className="flex items-center space-x-1 text-emerald-400">
              <TrendingUp className="w-4 h-4" />
              <span>{asset.performance}</span>
            </div>
          )}
        </div>
        <button
          className="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-xl transition-all duration-300 flex items-center space-x-2 text-sm group-hover:bg-cyan-600"
          onClick={(e) => {
            e.stopPropagation();
            onViewDetails(asset);
          }}
        >
          <Eye className="w-4 h-4" />
          <span>View Details</span>
        </button>
      </div>
    </motion.div>
  );
}
--- src/components/ui/EnhancedCharts.tsx ---
'use client'
import { motion } from 'framer-motion'

interface ChartDataItem {
  value: number
  label: string
  month?: string
}

interface GradientBarChartProps {
  data: ChartDataItem[]
  maxValue: number
  colorFrom: string
  colorTo: string
}

export const GradientBarChart = ({ data, maxValue, colorFrom, colorTo }: GradientBarChartProps) => {
  return (
    <div className="h-64 relative">
      <div className="absolute inset-0 flex items-end justify-between px-4 pb-8">
        {data.map((item, index) => (
          <div key={index} className="flex flex-col items-center space-y-2" style={{ flex: 1 }}>
            <motion.div
              initial={{ height: 0 }}
              animate={{ height: `${(item.value / maxValue) * 80}%` }}
              transition={{ duration: 0.8, delay: index * 0.1, type: "spring" }}
              className="w-6 rounded-t-lg relative group cursor-pointer"
              style={{
                background: `linear-gradient(to top, ${colorFrom}, ${colorTo})`,
                boxShadow: '0 4px 15px rgba(0, 0, 0, 0.3)'
              }}
              whileHover={{ 
                scale: 1.15,
                transition: { duration: 0.2 }
              }}
            >
              <div className="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-slate-800 text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 border border-slate-600">
                {item.label}
              </div>
            </motion.div>
            <span className="text-slate-400 text-xs">{item.month || ''}</span>
          </div>
        ))}
      </div>
    </div>
  )
}

--- src/components/ui/InvestmentModal.tsx ---
// Enhanced InvestmentModal.tsx
"use client";

import { motion, AnimatePresence } from 'framer-motion';
import React, { useState } from 'react';
import { 
  X, DollarSign, TrendingUp, MapPin, Zap, Building, Shield, Check, 
  BadgeCheck, Users, Clock, Star, ArrowRight, Target, BarChart3, 
  Percent, Calendar, Crown, Gem, Coins, Lock, Sparkles
} from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';
import RealAssetImage from './RealAssetImage';

interface InvestmentModalProps {
  isOpen: boolean;
  onClose: () => void;
  asset: any;
  onInvest: (assetId: number, amount: number) => void;
}

export default function InvestmentModal({ isOpen, onClose, asset, onInvest }: InvestmentModalProps) {
  const { user } = useAuth();
  const [investmentAmount, setInvestmentAmount] = useState(asset?.minInvestment || 100);
  const [isProcessing, setIsProcessing] = useState(false);
  const [step, setStep] = useState(1);

  if (!isOpen || !asset) return null;

  const asrdTokens = investmentAmount / 32;
  const userPortfolioValue = user?.portfolioValue || 0;
  const maxInvestment = Math.min(userPortfolioValue * 0.1 || 10000, asset.value * 0.05);
  const ownershipPercentage = (investmentAmount / asset.value) * 100;

  const predefinedAmounts = [100, 500, 1000, 5000, 10000].filter(amount =>
    amount >= asset.minInvestment && amount <= maxInvestment
  );

  const handleInvest = async () => {
    if (investmentAmount < asset.minInvestment) {
      alert(`Minimum investment is $${asset.minInvestment}`);
      return;
    }

    if (investmentAmount > maxInvestment) {
      alert(`Maximum investment for this asset is $${maxInvestment.toLocaleString()}`);
      return;
    }

    setIsProcessing(true);
    setStep(2);

    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      onInvest(asset.id, investmentAmount);
      setStep(3);
      await new Promise(resolve => setTimeout(resolve, 1500));
    } catch (error) {
      console.error('Investment failed:', error);
    } finally {
      setIsProcessing(false);
      setStep(1);
    }
  };

  const getStepContent = () => {
    switch (step) {
      case 1:
        return (
          <div className="space-y-6">
            {/* Enhanced Asset Header */}
            <div className="flex flex-col sm:flex-row sm:items-start gap-4 mb-2">
              <div className="relative">
                <RealAssetImage type={asset.type} title={asset.title} size="lg" />
                <div className="absolute -top-2 -right-2 bg-amber-500 rounded-full p-1">
                  <Crown className="w-4 h-4 text-white" />
                </div>
              </div>
              <div className="flex-1 min-w-0">
                <div className="flex items-center space-x-2 mb-2">
                  <BadgeCheck className="w-5 h-5 text-emerald-400" />
                  <span className="text-emerald-400 text-sm font-medium">Verified Asset</span>
                </div>
                <h3 className="text-2xl font-bold text-white mb-2 break-words">{asset.title}</h3>
                <div className="flex flex-wrap items-center gap-3 text-sm">
                  <div className="flex items-center space-x-1 text-slate-300">
                    <MapPin className="w-4 h-4 flex-shrink-0" />
                    <span className="truncate">{asset.location}</span>
                  </div>
                  <div className="flex items-center space-x-1 text-amber-400">
                    <TrendingUp className="w-4 h-4 flex-shrink-0" />
                    <span className="font-semibold">{asset.roi} ROI</span>
                  </div>
                  {asset.performance && (
                    <div className="flex items-center space-x-1 text-emerald-400">
                      <BarChart3 className="w-4 h-4" />
                      <span className="font-medium">{asset.performance}</span>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Enhanced Investment Cards */}
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div className="bg-gradient-to-br from-cyan-500/10 to-blue-500/10 rounded-2xl p-5 border border-cyan-500/20">
                <div className="flex items-center space-x-3 mb-3">
                  <div className="w-10 h-10 bg-cyan-500/20 rounded-xl flex items-center justify-center">
                    <DollarSign className="w-5 h-5 text-cyan-400" />
                  </div>
                  <div>
                    <div className="text-cyan-300 font-semibold text-sm">Investment Amount</div>
                    <div className="text-2xl font-bold text-white">${investmentAmount.toLocaleString()}</div>
                  </div>
                </div>
                <div className="text-slate-400 text-sm">
                  <div className="flex justify-between">
                    <span>Ownership:</span>
                    <span className="text-cyan-400">{ownershipPercentage.toFixed(4)}%</span>
                  </div>
                </div>
              </div>

              <div className="bg-gradient-to-br from-amber-500/10 to-orange-500/10 rounded-2xl p-5 border border-amber-500/20">
                <div className="flex items-center space-x-3 mb-3">
                  <div className="w-10 h-10 bg-amber-500/20 rounded-xl flex items-center justify-center">
                    <Zap className="w-5 h-5 text-amber-400" />
                  </div>
                  <div>
                    <div className="text-amber-300 font-semibold text-sm">ASRD Tokens</div>
                    <div className="text-2xl font-bold text-white">{asrdTokens.toFixed(2)}</div>
                  </div>
                </div>
                <div className="text-slate-400 text-sm">
                  <div className="flex justify-between">
                    <span>Rate:</span>
                    <span className="text-amber-400">$32 = 1 ASRD</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Enhanced Amount Selection */}
            <div className="bg-slate-800/50 rounded-2xl p-6 border border-slate-700">
              <h4 className="text-lg font-bold text-white mb-4 flex items-center space-x-2">
                <Coins className="w-5 h-5 text-amber-400" />
                <span>Select Investment Amount</span>
              </h4>
              
              {/* Quick Amounts */}
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 mb-6">
                {predefinedAmounts.map((amount) => (
                  <motion.button
                    key={amount}
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                    onClick={() => setInvestmentAmount(amount)}
                    className={`p-4 rounded-xl border transition-all font-medium ${
                      investmentAmount === amount
                        ? 'bg-gradient-to-r from-cyan-500 to-blue-600 text-white border-cyan-500 shadow-lg'
                        : 'bg-slate-700/50 border-slate-600 text-slate-300 hover:border-cyan-400/50 hover:bg-slate-700'
                    }`}
                  >
                    ${amount.toLocaleString()}
                  </motion.button>
                ))}
              </div>

              {/* Custom Amount */}
              <div className="space-y-3">
                <label className="text-slate-300 font-medium">Custom Amount</label>
                <div className="relative">
                  <DollarSign className="absolute left-4 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5" />
                  <input
                    type="number"
                    value={investmentAmount}
                    onChange={(e) => setInvestmentAmount(Number(e.target.value))}
                    min={asset.minInvestment}
                    max={maxInvestment}
                    className="w-full pl-12 pr-4 py-4 bg-slate-900/50 border border-slate-600 rounded-xl text-white placeholder-slate-400 focus:outline-none focus:border-cyan-500 focus:ring-2 focus:ring-cyan-500/20 text-lg font-medium"
                    placeholder="Enter amount"
                  />
                </div>
                <div className="flex justify-between text-sm text-slate-400">
                  <span>Min: ${asset.minInvestment.toLocaleString()}</span>
                  <span>Max: ${maxInvestment.toLocaleString()}</span>
                </div>
              </div>
            </div>

            {/* Enhanced Investment Summary */}
            <div className="bg-gradient-to-br from-emerald-500/10 to-teal-500/10 rounded-2xl p-6 border border-emerald-500/20">
              <h4 className="text-lg font-bold text-white mb-4 flex items-center space-x-2">
                <Target className="w-5 h-5 text-emerald-400" />
                <span>Investment Summary</span>
              </h4>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm">
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-slate-300">Asset Value</span>
                    <span className="text-white font-semibold">${(asset.value / 1000000).toFixed(1)}M</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-slate-300">Projected ROI</span>
                    <span className="text-amber-400 font-semibold">{asset.roi}</span>
                  </div>
                </div>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-slate-300">Timeline</span>
                    <span className="text-white font-semibold">{asset.timeline}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-slate-300">Asset Type</span>
                    <span className="text-cyan-400 font-semibold">{asset.type}</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Security Features */}
            <div className="bg-slate-800/30 rounded-2xl p-4 border border-slate-700">
              <div className="flex items-center justify-center space-x-6 text-slate-400 text-sm">
                <div className="flex items-center space-x-2">
                  <Shield className="w-4 h-4 text-emerald-400" />
                  <span>Blockchain Secured</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Lock className="w-4 h-4 text-cyan-400" />
                  <span>Fully Insured</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Sparkles className="w-4 h-4 text-amber-400" />
                  <span>Instant Settlement</span>
                </div>
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="text-center py-8">
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
              className="w-20 h-20 border-4 border-cyan-500 border-t-transparent rounded-full mx-auto mb-6"
            />
            <h3 className="text-2xl font-bold text-white mb-4">Processing Your Investment</h3>
            <p className="text-slate-300 mb-6">Securing your ownership in {asset.title}</p>
            
            <div className="grid grid-cols-1 gap-4 max-w-xs mx-auto">
              {[
                { icon: Shield, text: 'Verifying transaction', color: 'emerald' },
                { icon: Building, text: 'Allocating asset shares', color: 'cyan' },
                { icon: Zap, text: 'Minting ASRD tokens', color: 'amber' },
                { icon: Check, text: 'Finalizing ownership', color: 'emerald' }
              ].map((item, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.2 }}
                  className="flex items-center space-x-3 text-slate-400"
                >
                  <div className={`w-8 h-8 bg-${item.color}-500/20 rounded-lg flex items-center justify-center`}>
                    <item.icon className={`w-4 h-4 text-${item.color}-400`} />
                  </div>
                  <span>{item.text}</span>
                </motion.div>
              ))}
            </div>
          </div>
        );

      case 3:
        return (
          <div className="text-center py-8">
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              className="w-20 h-20 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-full flex items-center justify-center mx-auto mb-6"
            >
              <Check className="w-10 h-10 text-white" />
            </motion.div>
            <h3 className="text-2xl font-bold text-white mb-3">Investment Successful!</h3>
            <p className="text-slate-300 mb-6">Welcome to the elite club of {asset.title} owners</p>
            
            <div className="bg-gradient-to-br from-emerald-500/10 to-teal-500/10 rounded-2xl p-6 border border-emerald-500/20 mb-6">
              <div className="space-y-3 text-sm">
                <div className="flex justify-between">
                  <span className="text-slate-300">Investment Amount</span>
                  <span className="text-white font-semibold">${investmentAmount.toLocaleString()}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-300">ASRD Tokens</span>
                  <span className="text-cyan-400 font-semibold">{asrdTokens.toFixed(2)} ASRD</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-300">Ownership</span>
                  <span className="text-emerald-400 font-semibold">{ownershipPercentage.toFixed(4)}%</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-slate-300">Asset</span>
                  <span className="text-white font-semibold truncate">{asset.title}</span>
                </div>
              </div>
            </div>

            <div className="flex items-center justify-center space-x-2 text-emerald-400 text-sm">
              <Gem className="w-4 h-4" />
              <span>Your digital ownership certificate has been minted</span>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 z-[100] flex items-center justify-center p-4 bg-black/80 backdrop-blur-sm"
          onClick={onClose}
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0, y: 20 }}
            animate={{ scale: 1, opacity: 1, y: 0 }}
            exit={{ scale: 0.9, opacity: 0, y: 20 }}
            className="bg-gradient-to-br from-slate-900 to-slate-800 border border-slate-700 rounded-3xl shadow-2xl w-full max-w-lg max-h-[90vh] overflow-y-auto"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Enhanced Header */}
            <div className="flex items-center justify-between p-6 border-b border-slate-700 sticky top-0 bg-slate-900/80 backdrop-blur-sm z-10 rounded-t-3xl">
              <h2 className="text-xl font-bold text-white">
                {step === 1 && 'Invest in Elite Asset'}
                {step === 2 && 'Securing Investment'}
                {step === 3 && 'Ownership Confirmed'}
              </h2>
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                onClick={onClose}
                className="w-8 h-8 bg-slate-700 rounded-full flex items-center justify-center hover:bg-slate-600 transition-colors"
              >
                <X className="w-4 h-4 text-slate-300" />
              </motion.button>
            </div>

            <div className="p-6">
              {getStepContent()}

              {/* Enhanced Action Buttons */}
              {step === 1 && (
                <div className="flex flex-col sm:flex-row gap-3 mt-8">
                  <motion.button
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={onClose}
                    className="flex-1 bg-slate-700 hover:bg-slate-600 text-white py-4 rounded-xl transition-all duration-300 font-semibold"
                  >
                    Cancel
                  </motion.button>
                  <motion.button
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={handleInvest}
                    disabled={isProcessing || investmentAmount < asset.minInvestment}
                    className="flex-1 bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white py-4 rounded-xl transition-all duration-300 font-semibold disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2 shadow-lg hover:shadow-xl"
                  >
                    <DollarSign className="w-5 h-5" />
                    <span>Confirm Investment</span>
                    <ArrowRight className="w-4 h-4" />
                  </motion.button>
                </div>
              )}

              {step === 3 && (
                <motion.button
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.5 }}
                  onClick={onClose}
                  className="w-full bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 text-white py-4 rounded-xl transition-all duration-300 font-semibold mt-6 shadow-lg hover:shadow-xl"
                >
                  View My Portfolio
                </motion.button>
              )}
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
}
--- src/components/ui/OptimizedImage.tsx ---
"use client";

import React from 'react';
import Image from 'next/image';

interface OptimizedImageProps {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  className?: string;
  priority?: boolean;
  fallback?: string;
}

export default function OptimizedImage({
  src,
  alt,
  width,
  height,
  className = '',
  priority = false,
  fallback = '/images/placeholder.jpg'
}: OptimizedImageProps) {
  const [imgSrc, setImgSrc] = React.useState(src);
  const [isLoading, setIsLoading] = React.useState(true);

  return (
    <div className={`relative overflow-hidden ${className}`}>
      {/* Loading Skeleton */}
      {isLoading && (
        <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-blue-500/10 animate-pulse rounded-lg" />
      )}
      
      {/* Image */}
      <Image
        src={imgSrc}
        alt={alt}
        width={width}
        height={height}
        className={`transition-all duration-500 ${
          isLoading ? 'opacity-0' : 'opacity-100'
        } ${className}`}
        priority={priority}
        onLoad={() => setIsLoading(false)}
        onError={() => {
          setImgSrc(fallback);
          setIsLoading(false);
        }}
      />
      
      {/* Image Overlay Effect */}
      <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-300" />
    </div>
  );
}

--- src/components/ui/PerformanceMetrics.tsx ---
"use client";

import React from 'react';

export default function PerformanceMetrics() {
  const metrics = [
    { label: 'Total Return', value: '+24.7%', description: 'Since inception', color: 'from-emerald-400 to-cyan-400' },
    { label: 'Monthly Average', value: '+2.1%', description: 'Last 12 months', color: 'from-blue-400 to-indigo-400' },
    { label: 'Volatility', value: '8.2%', description: 'Annualized', color: 'from-purple-400 to-pink-400' },
    { label: 'Sharpe Ratio', value: '2.8', description: 'Risk-adjusted', color: 'from-amber-400 to-orange-400' }
  ];

  const assetPerformance = [
    { name: 'Dubai Hills Villa', return: '+32.5%', value: '$2.5M' },
    { name: 'Champion Thoroughbred', return: '+45.2%', value: '$850K' },
    { name: 'Commercial Complex', return: '+18.7%', value: '$1.2M' },
    { name: 'Breeding Stock', return: '+22.1%', value: '$650K' }
  ];

  return (
    <div className="glass-ultimate rounded-3xl border border-white/10 p-8">
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6">
        <h3 className="text-2xl font-bold text-white mb-4 lg:mb-0">Performance Metrics</h3>
        <div className="flex gap-2">
          <button className="px-4 py-2 bg-cyan-500/20 text-cyan-300 rounded-lg border border-cyan-400/30 text-sm font-medium">
            Real-time
          </button>
          <button className="px-4 py-2 bg-white/5 text-cyan-100 rounded-lg border border-white/20 text-sm font-medium hover:bg-white/10">
            Historical
          </button>
        </div>
      </div>

      {/* Key Metrics Grid */}
      <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
        {metrics.map((metric, index) => (
          <div key={index} className="bg-white/5 rounded-xl p-4 border border-white/10 hover:border-cyan-400/30 transition-all duration-300">
            <div className={`text-2xl font-black bg-gradient-to-r ${metric.color} bg-clip-text text-transparent mb-1`}>
              {metric.value}
            </div>
            <div className="text-white font-semibold text-sm mb-1">{metric.label}</div>
            <div className="text-cyan-100 text-xs">{metric.description}</div>
          </div>
        ))}
      </div>

      {/* Asset Performance */}
      <div>
        <h4 className="font-semibold text-white mb-4">Top Performing Assets</h4>
        <div className="space-y-3">
          {assetPerformance.map((asset, index) => (
            <div key={index} className="flex items-center justify-between p-3 bg-white/5 rounded-lg border border-white/10 hover:border-cyan-400/20 transition-colors duration-300">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-lg flex items-center justify-center text-white text-sm font-bold">
                  {index + 1}
                </div>
                <div>
                  <div className="text-white font-semibold text-sm">{asset.name}</div>
                  <div className="text-cyan-100 text-xs">{asset.value}</div>
                </div>
              </div>
              <div className={`text-right ${
                asset.return.startsWith('+') ? 'text-emerald-400' : 'text-red-400'
              } font-bold text-sm`}>
                {asset.return}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Performance Indicators */}
      <div className="mt-6 grid grid-cols-3 gap-4 text-center">
        <div className="p-3 bg-emerald-500/10 rounded-xl border border-emerald-400/20">
          <div className="text-emerald-300 font-bold text-sm">Excellent</div>
          <div className="text-emerald-200 text-xs">Risk Profile</div>
        </div>
        <div className="p-3 bg-cyan-500/10 rounded-xl border border-cyan-400/20">
          <div className="text-cyan-300 font-bold text-sm">Diversified</div>
          <div className="text-cyan-200 text-xs">Portfolio</div>
        </div>
        <div className="p-3 bg-purple-500/10 rounded-xl border border-purple-400/20">
          <div className="text-purple-300 font-bold text-sm">Growing</div>
          <div className="text-purple-200 text-xs">Trend</div>
        </div>
      </div>
    </div>
  );
}

--- src/components/ui/Premium3DBackground.tsx ---
'use client'

import { useEffect, useRef } from 'react'

export function Premium3DBackground() {
  const canvasRef = useRef<HTMLCanvasElement>(null)

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext('2d')
    if (!ctx) return

    // Set canvas size
    const resizeCanvas = () => {
      canvas.width = window.innerWidth
      canvas.height = window.innerHeight
    }
    resizeCanvas()
    window.addEventListener('resize', resizeCanvas)

    // Enhanced particle system with 3D depth
    const particles: Array<{
      x: number
      y: number
      z: number
      vx: number
      vy: number
      vz: number
      size: number
      color: string
      life: number
    }> = []

    const colors = [
      '#00F5FF', '#4361EE', '#7209B7', '#F72585', '#FFD166', '#06D6A0'
    ]

    // Create particles with depth
    for (let i = 0; i < 120; i++) {
      particles.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height,
        z: Math.random() * 100,
        vx: (Math.random() - 0.5) * 0.3,
        vy: (Math.random() - 0.5) * 0.3,
        vz: (Math.random() - 0.5) * 0.1,
        size: Math.random() * 3 + 1,
        color: colors[Math.floor(Math.random() * colors.length)],
        life: Math.random() * 100
      })
    }

    // 3D Animation with depth perception
    const animate = () => {
      ctx.fillStyle = 'rgba(10, 11, 15, 0.05)'
      ctx.fillRect(0, 0, canvas.width, canvas.height)

      particles.forEach((particle, index) => {
        // Update position with 3D depth
        particle.x += particle.vx * (particle.z / 50)
        particle.y += particle.vy * (particle.z / 50)
        particle.z += particle.vz
        particle.life += 0.1

        // Wrap around edges with depth consideration
        if (particle.x < -100) particle.x = canvas.width + 100
        if (particle.x > canvas.width + 100) particle.x = -100
        if (particle.y < -100) particle.y = canvas.height + 100
        if (particle.y > canvas.height + 100) particle.y = -100
        if (particle.z < 0) particle.z = 100
        if (particle.z > 100) particle.z = 0

        // Calculate size based on depth (parallax effect)
        const depthSize = particle.size * (particle.z / 50)
        const alpha = 0.4 + Math.sin(particle.life * 0.1) * 0.3

        // Draw particle with depth
        ctx.beginPath()
        ctx.arc(particle.x, particle.y, depthSize, 0, Math.PI * 2)
        ctx.fillStyle = particle.color
        ctx.globalAlpha = alpha * (particle.z / 100)
        ctx.fill()

        // Draw 3D connections between particles
        particles.forEach((otherParticle, otherIndex) => {
          if (index === otherIndex) return

          const dx = particle.x - otherParticle.x
          const dy = particle.y - otherParticle.y
          const dz = Math.abs(particle.z - otherParticle.z)
          const distance = Math.sqrt(dx * dx + dy * dy)

          // Connect particles that are close in 3D space
          if (distance < 150 && dz < 30) {
            ctx.beginPath()
            ctx.strokeStyle = particle.color
            ctx.globalAlpha = 0.1 * (1 - distance / 150) * (1 - dz / 30)
            ctx.lineWidth = 0.8
            ctx.moveTo(particle.x, particle.y)
            ctx.lineTo(otherParticle.x, otherParticle.y)
            ctx.stroke()
          }
        })
      })

      requestAnimationFrame(animate)
    }

    animate()

    return () => {
      window.removeEventListener('resize', resizeCanvas)
    }
  }, [])

  return (
    <canvas
      ref={canvasRef}
      className="fixed inset-0 pointer-events-none z-0"
      style={{ 
        background: 'linear-gradient(135deg, #0A0B0F 0%, #0F1117 30%, #1A1D29 70%, #0A0B0F 100%)',
        opacity: 0.6
      }}
    />
  )
}

--- src/components/ui/Premium3DNotification.tsx ---
"use client";

import { motion, AnimatePresence } from 'framer-motion';
import React from 'react';
import { CheckCircle, XCircle, AlertTriangle, Info, Zap } from 'lucide-react';

interface NotificationProps {
  type: 'success' | 'error' | 'warning' | 'info' | 'premium';
  title: string;
  message: string;
  isVisible: boolean;
  onClose: () => void;
  duration?: number;
}

export default function Premium3DNotification({ 
  type, 
  title, 
  message, 
  isVisible, 
  onClose,
  duration = 5000 
}: NotificationProps) {
  React.useEffect(() => {
    if (isVisible && duration > 0) {
      const timer = setTimeout(onClose, duration);
      return () => clearTimeout(timer);
    }
  }, [isVisible, duration, onClose]);

  const getIcon = () => {
    switch (type) {
      case 'success':
        return <CheckCircle className="w-6 h-6 text-emerald-400" />;
      case 'error':
        return <XCircle className="w-6 h-6 text-red-400" />;
      case 'warning':
        return <AlertTriangle className="w-6 h-6 text-amber-400" />;
      case 'info':
        return <Info className="w-6 h-6 text-cyan-400" />;
      case 'premium':
        return <Zap className="w-6 h-6 text-purple-400" />;
      default:
        return <Info className="w-6 h-6 text-cyan-400" />;
    }
  };

  const getStyles = () => {
    switch (type) {
      case 'success':
        return 'border-emerald-500/30 bg-emerald-500/10';
      case 'error':
        return 'border-red-500/30 bg-red-500/10';
      case 'warning':
        return 'border-amber-500/30 bg-amber-500/10';
      case 'info':
        return 'border-cyan-500/30 bg-cyan-500/10';
      case 'premium':
        return 'border-purple-500/30 bg-gradient-to-r from-purple-500/10 to-cyan-500/10';
      default:
        return 'border-cyan-500/30 bg-cyan-500/10';
    }
  };

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, x: 300, scale: 0.8, rotateY: 45 }}
          animate={{ 
            opacity: 1, 
            x: 0, 
            scale: 1, 
            rotateY: 0,
            transition: {
              type: "spring",
              stiffness: 300,
              damping: 25
            }
          }}
          exit={{ 
            opacity: 0, 
            x: 300, 
            scale: 0.8, 
            rotateY: -45,
            transition: { duration: 0.2 }
          }}
          className={`fixed top-24 right-6 z-50 max-w-sm rounded-2xl border p-4 backdrop-blur-xl ${getStyles()} shadow-2xl transform-gpu`}
          style={{
            transformStyle: 'preserve-3d',
            perspective: '1000px'
          }}
        >
          <div className="flex items-start space-x-3">
            <motion.div
              initial={{ scale: 0 }}
              animate={{ scale: 1 }}
              transition={{ delay: 0.1, type: "spring" }}
              className="flex-shrink-0"
            >
              {getIcon()}
            </motion.div>
            <div className="flex-1 min-w-0">
              <motion.h3
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
                className="text-white font-semibold text-sm mb-1"
              >
                {title}
              </motion.h3>
              <motion.p
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
                className="text-gray-300 text-sm leading-relaxed"
              >
                {message}
              </motion.p>
            </div>
            <motion.button
              whileHover={{ scale: 1.1, rotate: 90 }}
              whileTap={{ scale: 0.9 }}
              onClick={onClose}
              className="flex-shrink-0 text-gray-400 hover:text-white transition-colors"
            >
              <XCircle className="w-4 h-4" />
            </motion.button>
          </div>
          
          {/* Progress bar */}
          {duration > 0 && (
            <motion.div
              initial={{ scaleX: 1 }}
              animate={{ scaleX: 0 }}
              transition={{ duration: duration / 1000, ease: "linear" }}
              className="absolute bottom-0 left-0 right-0 h-0.5 bg-current opacity-30 origin-left rounded-full"
            />
          )}
        </motion.div>
      )}
    </AnimatePresence>
  );
}

--- src/components/ui/PremiumBackground.tsx ---
"use client";

import React from 'react';
import { useScrollAnimation } from '@/hooks/useScrollAnimation';

export default function PremiumBackground() {
  const { getParallaxStyle, scrollProgress } = useScrollAnimation();

  const getGradient = () => {
    if (scrollProgress < 20) {
      return 'linear-gradient(135deg, #0f172a 0%, #1e293b 25%, #334155 50%, #475569 100%)';
    } else if (scrollProgress < 40) {
      return 'linear-gradient(135deg, #1e293b 0%, #334155 25%, #475569 50%, #64748b 100%)';
    } else if (scrollProgress < 60) {
      return 'linear-gradient(135deg, #334155 0%, #475569 25%, #64748b 50%, #94a3b8 100%)';
    } else {
      return 'linear-gradient(135deg, #475569 0%, #64748b 25%, #94a3b8 50%, #cbd5e1 100%)';
    }
  };

  return (
    <div className="fixed inset-0 -z-50 overflow-hidden">
      {/* Main Gradient Background */}
      <div
        className="absolute inset-0 transition-all duration-2000"
        style={{
          background: getGradient(),
        }}
      />

      {/* Futuristic Grid */}
      <div
        className="absolute inset-0 opacity-40"
        style={{
          backgroundImage: `
            linear-gradient(rgba(14, 165, 233, 0.1) 1px, transparent 1px),
            linear-gradient(90deg, rgba(14, 165, 233, 0.1) 1px, transparent 1px)
          `,
          backgroundSize: '60px 60px',
          ...getParallaxStyle(0.05)
        }}
      />

      {/* Animated Circuit Lines */}
      <div className="absolute inset-0">
        <div
          className="absolute top-1/4 left-0 w-full h-px bg-gradient-to-r from-transparent via-sky-400/30 to-transparent animate-pulse"
          style={getParallaxStyle(0.1)}
        />
        <div
          className="absolute top-3/4 left-0 w-full h-px bg-gradient-to-r from-transparent via-blue-400/30 to-transparent animate-pulse"
          style={{...getParallaxStyle(0.1), animationDelay: '1s'}}
        />
      </div>

      {/* Floating Holographic Elements */}
      <div className="absolute inset-0">
        {/* Main Hologram */}
        <div
          className="absolute top-1/3 left-1/4 w-64 h-64 bg-gradient-to-br from-sky-400/10 to-blue-500/10 rounded-full blur-3xl animate-float-hologram"
          style={{
            ...getParallaxStyle(0.2)
          }}
        />
        
        {/* Secondary Holograms */}
        <div
          className="absolute top-2/3 right-1/4 w-48 h-48 bg-gradient-to-br from-purple-400/10 to-pink-500/10 rounded-full blur-3xl animate-float-hologram"
          style={{
            ...getParallaxStyle(0.15),
            animationDelay: '2s'
          }}
        />
        
        <div
          className="absolute bottom-1/4 left-1/3 w-32 h-32 bg-gradient-to-br from-emerald-400/10 to-cyan-500/10 rounded-full blur-3xl animate-float-hologram"
          style={{
            ...getParallaxStyle(0.1),
            animationDelay: '4s'
          }}
        />
      </div>

      {/* Data Particles */}
      {[...Array(20)].map((_, i) => (
        <div
          key={i}
          className="absolute w-1 h-1 bg-cyan-400/40 rounded-full animate-float-data"
          style={{
            left: `${10 + (i * 4)}%`,
            top: `${20 + (i * 3)}%`,
            animationDelay: `${i * 0.3}s`,
            animationDuration: `${8 + i * 1}s`,
            ...getParallaxStyle(0.05 + i * 0.02)
          }}
        />
      ))}

      {/* Scan Lines */}
      <div
        className="absolute inset-0 opacity-20"
        style={{
          background: `repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(14, 165, 233, 0.1) 2px, rgba(14, 165, 233, 0.1) 4px)`,
          ...getParallaxStyle(0.02)
        }}
      />
    </div>
  );
}

--- src/components/ui/PremiumCarousel.tsx ---
"use client";

import { motion, AnimatePresence } from 'framer-motion';
import React, { useState, useEffect } from 'react';
import { ChevronLeft, ChevronRight, MapPin, Calendar, TrendingUp } from 'lucide-react';

interface Asset {
  id: number;
  title: string;
  type: string;
  location: string;
  value: number;
  roi: string;
  image: string;
  description: string;
}

interface PremiumCarouselProps {
  assets: Asset[];
  autoPlay?: boolean;
  interval?: number;
}

export default function PremiumCarousel({ 
  assets, 
  autoPlay = true, 
  interval = 5000 
}: PremiumCarouselProps) {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [direction, setDirection] = useState(0);

  useEffect(() => {
    if (!autoPlay) return;

    const timer = setInterval(() => {
      nextSlide();
    }, interval);

    return () => clearInterval(timer);
  }, [currentIndex, autoPlay, interval]);

  const nextSlide = () => {
    setDirection(1);
    setCurrentIndex((prevIndex) => 
      prevIndex === assets.length - 1 ? 0 : prevIndex + 1
    );
  };

  const prevSlide = () => {
    setDirection(-1);
    setCurrentIndex((prevIndex) => 
      prevIndex === 0 ? assets.length - 1 : prevIndex - 1
    );
  };

  const goToSlide = (index: number) => {
    setDirection(index > currentIndex ? 1 : -1);
    setCurrentIndex(index);
  };

  const slideVariants = {
    enter: (direction: number) => ({
      x: direction > 0 ? 300 : -300,
      opacity: 0,
      scale: 0.9
    }),
    center: {
      x: 0,
      opacity: 1,
      scale: 1,
      transition: {
        duration: 0.6,
        ease: [0.4, 0, 0.2, 1]
      }
    },
    exit: (direction: number) => ({
      x: direction < 0 ? 300 : -300,
      opacity: 0,
      scale: 0.9,
      transition: {
        duration: 0.6,
        ease: [0.4, 0, 0.2, 1]
      }
    })
  };

  return (
    <div className="premium-carousel relative">
      {/* Main Carousel */}
      <div className="relative h-96 rounded-2xl overflow-hidden">
        <AnimatePresence custom={direction} mode="wait">
          <motion.div
            key={currentIndex}
            custom={direction}
            variants={slideVariants}
            initial="enter"
            animate="center"
            exit="exit"
            className="carousel-slide absolute inset-0"
          >
            {/* Asset Image */}
            <div className="absolute inset-0 bg-gradient-to-br from-cyan-900/40 to-purple-900/40 rounded-2xl">
              <div className="w-full h-full bg-gradient-to-br from-cyan-500/20 to-blue-500/20 rounded-2xl flex items-center justify-center">
                <div className="text-center text-white">
                  <TrendingUp className="w-16 h-16 mx-auto mb-4 text-cyan-300" />
                  <p className="text-lg font-semibold">{assets[currentIndex].title}</p>
                  <p className="text-cyan-200">{assets[currentIndex].type}</p>
                </div>
              </div>
            </div>

            {/* Overlay Content */}
            <div className="absolute bottom-0 left-0 right-0 p-6 bg-gradient-to-t from-black/80 to-transparent">
              <h3 className="text-2xl font-bold text-white mb-2">
                {assets[currentIndex].title}
              </h3>
              <div className="flex items-center space-x-4 text-sm text-gray-300 mb-3">
                <div className="flex items-center space-x-1">
                  <MapPin className="w-4 h-4" />
                  <span>{assets[currentIndex].location}</span>
                </div>
                <div className="flex items-center space-x-1">
                  <TrendingUp className="w-4 h-4" />
                  <span className="text-cyan-300 font-semibold">{assets[currentIndex].roi} ROI</span>
                </div>
              </div>
              <p className="text-gray-300 text-sm leading-relaxed">
                {assets[currentIndex].description}
              </p>
            </div>
          </motion.div>
        </AnimatePresence>

        {/* Navigation Arrows */}
        <button
          onClick={prevSlide}
          className="absolute left-4 top-1/2 transform -translate-y-1/2 w-10 h-10 bg-black/50 rounded-full flex items-center justify-center hover:bg-black/70 transition-colors"
        >
          <ChevronLeft className="w-5 h-5 text-white" />
        </button>
        <button
          onClick={nextSlide}
          className="absolute right-4 top-1/2 transform -translate-y-1/2 w-10 h-10 bg-black/50 rounded-full flex items-center justify-center hover:bg-black/70 transition-colors"
        >
          <ChevronRight className="w-5 h-5 text-white" />
        </button>
      </div>

      {/* Indicators */}
      <div className="flex justify-center space-x-2 mt-6">
        {assets.map((_, index) => (
          <button
            key={index}
            onClick={() => goToSlide(index)}
            className={`w-3 h-3 rounded-full transition-all duration-300 ${
              index === currentIndex
                ? 'bg-cyan-400 w-8'
                : 'bg-gray-600 hover:bg-gray-400'
            }`}
          />
        ))}
      </div>
    </div>
  );
}

--- src/components/ui/PremiumLogo.tsx ---
"use client";

import React from 'react';
import Link from 'next/link';
import { motion } from 'framer-motion';

interface PremiumLogoProps {
  size?: 'sm' | 'md' | 'lg';
  showText?: boolean;
  showTagline?: boolean;
  className?: string;
}

export default function PremiumLogo({
  size = 'md',
  showText = true,
  showTagline = false,
  className = ''
}: PremiumLogoProps) {
  const sizeClasses = {
    sm: 'w-6 h-6',
    md: 'w-8 h-8',
    lg: 'w-12 h-12'
  };

  const textSizes = {
    sm: 'text-lg',
    md: 'text-xl',
    lg: 'text-2xl'
  };

  return (
    <Link href="/home" className={`flex items-center space-x-2 md:space-x-3 ${className}`}>
      {/* Enhanced Logo Mark */}
      <motion.div
        whileHover={{ scale: 1.05, rotate: 5 }}
        whileTap={{ scale: 0.95 }}
        className={`${sizeClasses[size]} bg-gradient-to-br from-fluid-gold to-fluid-emerald rounded-xl flex items-center justify-center relative overflow-hidden group`}
      >
        {/* Holographic Effect */}
        <div className="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" />

        {/* Logo Symbol */}
        <div className="relative z-10">
          <span className="text-fluid-black font-black text-xs md:text-sm">AR</span>
        </div>

        {/* Glow Effect */}
        <div className="absolute inset-0 rounded-xl bg-fluid-gold opacity-0 group-hover:opacity-20 blur-sm transition-opacity duration-300" />
      </motion.div>

      {/* Logo Text and Tagline Container */}
      <div className="flex flex-col">
        {/* Logo Text - Hidden on mobile if specified */}
        {showText && (
          <motion.span
            initial={{ opacity: 0, x: -10 }}
            animate={{ opacity: 1, x: 0 }}
            className={`${textSizes[size]} font-black text-white tracking-tight block`}
          >
            Asset<span className="text-fluid-gold">Ride</span>
          </motion.span>
        )}

        {/* Tagline - Show only when specified and on desktop */}
        {showTagline && showText && (
          <motion.span
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.2 }}
            className="text-fluid-silver text-xs font-medium block mt-[-2px]"
          >
            Elite Assets. Accessible to All.
          </motion.span>
        )}
      </div>
    </Link>
  );
}
--- src/components/ui/ProfessionalIcons.tsx ---
"use client";

import React from 'react';

export const ChartBarIcon = ({ className = "w-6 h-6" }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
  </svg>
);

export const BuildingLibraryIcon = ({ className = "w-6 h-6" }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 21v-8.25M15.75 21v-8.25M8.25 21v-8.25M3 9l9-6 9 6m-1.5 12V10.332A48.36 48.36 0 0012 9.75c-2.551 0-5.056.2-7.5.582V21M3 21h18M12 6.75h.008v.008H12V6.75z" />
  </svg>
);

export const CurrencyDollarIcon = ({ className = "w-6 h-6" }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 6v12m-3-2.818l.879.659c1.171.879 3.07.879 4.242 0 1.172-.879 1.172-2.303 0-3.182C13.536 12.219 12.768 12 12 12c-.725 0-1.45-.22-2.003-.659-1.106-.879-1.106-2.303 0-3.182s2.9-.879 4.006 0l.415.33M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
  </svg>
);

export const TrendingUpIcon = ({ className = "w-6 h-6" }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M2.25 18L9 11.25l4.306 4.307a11.95 11.95 0 015.814-5.519l2.74-1.22m0 0l-5.94-2.28m5.94 2.28l-2.28 5.941" />
  </svg>
);

export const UsersIcon = ({ className = "w-6 h-6" }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M15 19.128a9.38 9.38 0 002.625.372 9.337 9.337 0 004.121-.952 4.125 4.125 0 00-7.533-2.493M15 19.128v-.003c0-1.113-.285-2.16-.786-3.07M15 19.128v.106A12.318 12.318 0 018.624 21c-2.331 0-4.512-.645-6.374-1.766l-.001-.109a6.375 6.375 0 0111.964-3.07M12 6.375a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zm8.25 2.25a2.625 2.625 0 11-5.25 0 2.625 2.625 0 015.25 0z" />
  </svg>
);

export const ScaleIcon = ({ className = "w-6 h-6" }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 3v17.25m0 0c-1.472 0-2.882.265-4.185.75M12 20.25c1.472 0 2.882.265 4.185.75M18.75 4.97A48.416 48.416 0 0012 4.5c-2.291 0-4.545.16-6.75.47m13.5 0c1.01.143 2.01.317 3 .52m-3-.52l2.62 10.726c.122.499-.106 1.028-.589 1.202a5.988 5.988 0 01-2.031.352 5.988 5.988 0 01-2.031-.352c-.483-.174-.711-.703-.59-1.202L18.75 4.971zm-16.5.52c.99-.203 1.99-.377 3-.52m0 0l2.62 10.726c.122.499-.106 1.028-.589 1.202a5.989 5.989 0 01-2.031.352 5.989 5.989 0 01-2.031-.352c-.483-.174-.711-.703-.59-1.202L5.25 4.971z" />
  </svg>
);

export const TrophyIcon = ({ className = "w-6 h-6" }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M16.5 18.75h-9m9 0a3 3 0 013 3h-15a3 3 0 013-3m9 0v-3.375c0-.621-.503-1.125-1.125-1.125h-.871M7.5 18.75v-3.375c0-.621.504-1.125 1.125-1.125h.872m5.007 0H9.497m5.007 0a7.454 7.454 0 01-.982-3.172M9.497 14.25a7.454 7.454 0 00.981-3.172M5.25 4.236c-.982.143-1.954.317-2.916.52A6.003 6.003 0 007.73 9.728M5.25 4.236V4.5c0 2.108.966 3.99 2.48 5.228M5.25 4.236V2.721C7.456 2.41 9.71 2.25 12 2.25c2.291 0 4.545.16 6.75.47v1.516M7.73 9.728a6.726 6.726 0 002.748 1.35m8.272-6.842V4.5c0 2.108-.966 3.99-2.48 5.228m2.48-5.492a46.32 46.32 0 012.916.52 6.003 6.003 0 01-5.395 4.972m0 0a6.726 6.726 0 01-2.749 1.35m0 0a6.772 6.772 0 01-3.044 0" />
  </svg>
);

export const CubeIcon = ({ className = "w-6 h-6" }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M21 7.5l-9-5.25L3 7.5m18 0l-9 5.25m9-5.25v9l-9 5.25M3 7.5l9 5.25M3 7.5v9l9 5.25m0-9v9" />
  </svg>
);

export const GlobeIcon = ({ className = "w-6 h-6" }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 21a9.004 9.004 0 008.716-6.747M12 21a9.004 9.004 0 01-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 017.843 4.582M12 3a8.997 8.997 0 00-7.843 4.582m15.686 0A11.953 11.953 0 0112 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0121 12c0 .778-.099 1.533-.284 2.253m0 0A17.919 17.919 0 0112 16.5a17.92 17.92 0 01-8.716-2.247m0 0A9.015 9.015 0 013 12c0-1.605.42-3.113 1.157-4.418" />
  </svg>
);

export const AnalyticsIcon = ({ className = "w-6 h-6" }) => (
  <svg className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 013 19.875v-6.75zM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V8.625zM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25C20.496 3 21 3.504 21 4.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 01-1.125-1.125V4.125z" />
  </svg>
);

--- src/components/ui/RealAssetImage.tsx ---
"use client";

import { motion } from 'framer-motion';
import React from 'react';

interface RealAssetImageProps {
  type: string;
  title: string;
  className?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

const getAssetImage = (type: string, title: string) => {
  const typeLower = type.toLowerCase();

  // Real estate assets - using reliable Unsplash sources
  if (typeLower.includes('real estate') || typeLower.includes('villa') || typeLower.includes('property') || typeLower.includes('commercial')) {
    const realEstateImages = [
      'https://images.unsplash.com/photo-1613490493576-7fde63acd811?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1513584684374-8bab748fbf90?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=600&h=400&fit=crop'
    ];
    return {
      src: realEstateImages[Math.floor(Math.random() * realEstateImages.length)],
      alt: `${title} - Premium Real Estate Asset`
    };
  }

  // Thoroughbred assets
  if (typeLower.includes('thoroughbred') || typeLower.includes('horse')) {
    const horseImages = [
      'https://images.unsplash.com/photo-1546975490-e8b92a96b9fd?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1513279922550-250c2129b13a?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1577881590157-6d6035524cf5?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1553284965-83fd3e82fa5a?w=600&h=400&fit=crop'
    ];
    return {
      src: horseImages[Math.floor(Math.random() * horseImages.length)],
      alt: `${title} - Champion Thoroughbred Asset`
    };
  }

  // Marine assets
  if (typeLower.includes('marine') || typeLower.includes('yacht') || typeLower.includes('ship')) {
    const marineImages = [
      'https://images.unsplash.com/photo-1544551763-46a013bb70d5?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1504307651254-35680f356dfd?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1577717903315-1691ae25ab3f?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1505373877841-8d25f7d46678?w=600&h=400&fit=crop'
    ];
    return {
      src: marineImages[Math.floor(Math.random() * marineImages.length)],
      alt: `${title} - Luxury Marine Asset`
    };
  }

  // Aviation assets
  if (typeLower.includes('aviation') || typeLower.includes('plane') || typeLower.includes('jet')) {
    const aviationImages = [
      'https://images.unsplash.com/photo-1436491865332-7a61a109cc05?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1558618666-fcd25856cd49?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1551887373-3c5bd1f0fa27?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1529074963764-98f45dc5d00f?w=600&h=400&fit=crop'
    ];
    return {
      src: aviationImages[Math.floor(Math.random() * aviationImages.length)],
      alt: `${title} - Aviation Asset`
    };
  }

  // Venture assets
  if (typeLower.includes('venture') || typeLower.includes('startup') || typeLower.includes('tech')) {
    const ventureImages = [
      'https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?w=600&h=400&fit=crop'
    ];
    return {
      src: ventureImages[Math.floor(Math.random() * ventureImages.length)],
      alt: `${title} - Venture Capital Asset`
    };
  }

  // Luxury assets
  if (typeLower.includes('luxury') || typeLower.includes('diamond') || typeLower.includes('gem')) {
    const luxuryImages = [
      'https://images.unsplash.com/photo-1515562141207-7a88fb7ce338?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1599643478518-a784e5dc4c8f?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1599643477877-530eb83abc8e?w=600&h=400&fit=crop',
      'https://images.unsplash.com/photo-1601924582970-9238bcb495d9?w=600&h=400&fit=crop'
    ];
    return {
      src: luxuryImages[Math.floor(Math.random() * luxuryImages.length)],
      alt: `${title} - Luxury Asset`
    };
  }

  // Default premium asset image
  return {
    src: 'https://images.unsplash.com/photo-1450101499163-c8848c66ca85?w=600&h=400&fit=crop',
    alt: `${title} - Premium Real World Asset`
  };
};

const getSizeClasses = (size: 'sm' | 'md' | 'lg' | 'xl') => {
  switch (size) {
    case 'sm':
      return 'w-16 h-16';
    case 'md':
      return 'w-24 h-24';
    case 'lg':
      return 'w-32 h-32';
    case 'xl':
      return 'w-full h-48';
    default:
      return 'w-24 h-24';
  }
};

export default function RealAssetImage({ type, title, className = '', size = 'md' }: RealAssetImageProps) {
  const { src, alt } = getAssetImage(type, title);
  const sizeClasses = getSizeClasses(size);

  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      className={`${sizeClasses} relative rounded-xl overflow-hidden border-2 border-cyan-500/30 bg-gray-800 ${className}`}
    >
      <img
        src={src}
        alt={alt}
        className="w-full h-full object-cover"
      />
      {/* Gradient overlay for better text readability */}
      <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent" />
    </motion.div>
  );
}

--- src/components/ui/Slider.tsx ---
"use client";

import React from 'react';

interface SliderProps {
  min: number;
  max: number;
  value: number;
  onChange: (value: number) => void;
  step?: number;
  className?: string;
}

export function Slider({ min, max, value, onChange, step = 1, className = '' }: SliderProps) {
  const percentage = ((value - min) / (max - min)) * 100;
  
  return (
    <div className={`relative ${className}`}>
      <input
        type="range"
        min={min}
        max={max}
        value={value}
        step={step}
        onChange={(e) => onChange(Number(e.target.value))}
        className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer slider-thumb"
        style={{
          background: `linear-gradient(to right, #06b6d4 0%, #06b6d4 ${percentage}%, #374151 ${percentage}%, #374151 100%)`
        }}
      />
    </div>
  );
}

--- src/components/layout/FluidLayout.tsx ---
"use client";

import React, { useEffect, useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import PremiumHeader from './PremiumHeader';

interface FluidLayoutProps {
  children: React.ReactNode;
  showHeader?: boolean;
}

export default function FluidLayout({ children, showHeader = true }: FluidLayoutProps) {
  const { user } = useAuth();
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    // Check if mobile on mount
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  useEffect(() => {
    // Fluid scroll animation observer
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
        }
      });
    }, {
      threshold: isMobile ? 0.05 : 0.1, // Lower threshold on mobile
      rootMargin: isMobile ? '0px 0px -30px 0px' : '0px 0px -50px 0px'
    });

    // Observe all fluid scroll items
    document.querySelectorAll('.fluid-scroll-item').forEach(item => {
      observer.observe(item);
    });

    return () => observer.disconnect();
  }, [isMobile]);

  return (
    <div className="fluid-bg min-h-screen">
      {/* Fluid Background Elements - Reduced on mobile */}
      <div className="fixed inset-0 pointer-events-none">
        {!isMobile && (
          <>
            <div className="absolute top-1/4 left-1/4 w-64 h-64 bg-fluid-gold rounded-full opacity-5 fluid-float"></div>
            <div className="absolute top-1/3 right-1/4 w-56 h-56 bg-fluid-emerald rounded-full opacity-5 fluid-float" style={{ animationDelay: '2s' }}></div>
            <div className="absolute bottom-1/4 left-1/3 w-48 h-48 bg-fluid-sapphire rounded-full opacity-5 fluid-float" style={{ animationDelay: '4s' }}></div>
          </>
        )}
      </div>
      
      {/* Main content container */}
      <div className="relative z-10">
        {showHeader && <PremiumHeader />}

        {/* Main content area with mobile-optimized spacing */}
        <main className="w-full">
          <div className={`${showHeader ? 'pt-16 md:pt-24' : 'pt-0'} fluid-header-spacing`}>
            {children}
          </div>
        </main>
      </div>
    </div>
  );
}

--- src/components/layout/PremiumHeader.tsx ---
"use client";

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Home, BarChart3, ShoppingCart, Users, Building2,
  Menu, X, LogOut, User, Zap, ChevronDown, Globe
} from 'lucide-react';
import PremiumLogo from '@/components/ui/PremiumLogo';

export default function PremiumHeader() {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const pathname = usePathname();
  const router = useRouter();
  const { user, login, logout } = useAuth();

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };
    
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };

    checkMobile();
    window.addEventListener('scroll', handleScroll);
    window.addEventListener('resize', checkMobile);
    
    return () => {
      window.removeEventListener('scroll', handleScroll);
      window.removeEventListener('resize', checkMobile);
    };
  }, []);

  // Enhanced navigation with fluid design
  const navigation = user ? [
    { name: 'Home', href: '/home', icon: Home, description: 'Platform Overview' },
    { name: 'Dashboard', href: '/dashboard', icon: BarChart3, description: 'Your Portfolio' },
    { name: 'Marketplace', href: '/marketplace', icon: ShoppingCart, description: 'Invest Now' },
    { name: 'Our Journey', href: '/our-journey', icon: Globe, description: 'Protocol Story' },
    { name: 'Treasury', href: '/treasury', icon: Building2, description: 'Platform Funds' },
    { name: 'DAO', href: '/dao', icon: Users, description: 'Governance' },
  ] : [
    { name: 'Home', href: '/home', icon: Home, description: 'Get Started' },
    { name: 'Marketplace', href: '/marketplace', icon: ShoppingCart, description: 'Browse Assets' },
    { name: 'Our Journey', href: '/our-journey', icon: Globe, description: 'Learn Our Story' },
  ];

  const isActive = (href: string) => pathname === href;

  const handleLogin = () => {
    login('/dashboard');
    setIsMobileMenuOpen(false);
  };

  const handleLogout = () => {
    logout();
    setIsUserMenuOpen(false);
    setIsMobileMenuOpen(false);
  };

  return (
    <header className={`fixed top-0 left-0 right-0 z-50 transition-all duration-500 ${
      isScrolled
        ? 'py-2 md:py-3 bg-fluid-charcoal/95 backdrop-blur-xl border-b border-fluid-gold/20 shadow-2xl shadow-fluid-gold/5'
        : 'py-3 md:py-5 bg-transparent'
    }`}>
      <div className="fluid-container">
        <div className="flex items-center justify-between">
          {/* Premium Logo with enhanced branding */}
          <div className="flex items-center space-x-4 md:space-x-8">
            <PremiumLogo size={isMobile ? "sm" : "md"} showText={!isMobile} />

            {/* Desktop Navigation - Enhanced with Fluid Design */}
            <nav className="hidden lg:flex items-center space-x-1">
              {navigation.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className={`relative group px-3 md:px-4 py-2 md:py-2.5 rounded-xl transition-all duration-300 mobile-nav-item ${
                    isActive(item.href)
                      ? 'bg-gradient-to-r from-fluid-gold/20 to-fluid-emerald/20 text-fluid-gold border border-fluid-gold/30'
                      : 'text-fluid-silver hover:text-white hover:bg-white/5'
                  }`}
                >
                  <div className="flex items-center space-x-2 md:space-x-2.5">
                    <item.icon className="w-4 h-4" />
                    <span className="font-semibold text-sm">{item.name}</span>
                  </div>

                  {/* Enhanced active indicator */}
                  {isActive(item.href) && (
                    <motion.div
                      layoutId="premium-nav-indicator"
                      className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-3/4 h-0.5 bg-gradient-to-r from-fluid-gold to-fluid-emerald rounded-full"
                    />
                  )}

                  {/* Enhanced hover tooltip */}
                  <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-1 bg-fluid-charcoal border border-fluid-gold/30 rounded-lg text-xs text-fluid-gold opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap">
                    {item.description}
                    <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-fluid-gold/30"></div>
                  </div>
                </Link>
              ))}
            </nav>
          </div>

          {/* Enhanced Auth Section */}
          <div className="hidden lg:flex items-center space-x-3 md:space-x-4">
            {user ? (
              <div className="flex items-center space-x-3 md:space-x-4">
                {/* Enhanced User Info */}
                <div className="relative">
                  <button
                    onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
                    className="flex items-center space-x-2 md:space-x-3 px-3 md:px-4 py-2 md:py-2.5 bg-gradient-to-r from-fluid-gold/10 to-fluid-emerald/10 rounded-xl border border-fluid-gold/20 hover:border-fluid-gold/40 transition-all group"
                  >
                    <div className="flex items-center space-x-2">
                      <div className="w-7 h-7 md:w-8 md:h-8 bg-gradient-to-r from-fluid-gold to-fluid-emerald rounded-full flex items-center justify-center">
                        <User className="w-3 h-3 md:w-4 md:h-4 text-white" />
                      </div>
                      <div className="text-left">
                        <div className="text-white font-semibold text-sm">{user.name}</div>
                        <div className="text-fluid-gold text-xs">${user.portfolioValue.toLocaleString()}</div>
                      </div>
                    </div>
                    <ChevronDown className={`w-3 h-3 md:w-4 md:h-4 text-fluid-gold transition-transform duration-200 ${
                      isUserMenuOpen ? 'rotate-180' : ''
                    }`} />
                  </button>

                  {/* Enhanced User Dropdown */}
                  <AnimatePresence>
                    {isUserMenuOpen && (
                      <motion.div
                        initial={{ opacity: 0, y: 10, scale: 0.95 }}
                        animate={{ opacity: 1, y: 0, scale: 1 }}
                        exit={{ opacity: 0, y: 10, scale: 0.95 }}
                        className="absolute top-full right-0 mt-2 w-56 md:w-64 bg-fluid-charcoal/95 backdrop-blur-xl border border-fluid-gold/20 rounded-2xl shadow-2xl shadow-fluid-gold/10 overflow-hidden"
                      >
                        <div className="p-3 md:p-4 border-b border-fluid-gold/10">
                          <div className="text-white font-semibold text-sm md:text-base">{user.name}</div>
                          <div className="text-fluid-gold text-xs md:text-sm">Premium Investor</div>
                        </div>

                        <div className="p-2 md:p-3">
                          <div className="grid grid-cols-2 gap-2 mb-3">
                            <div className="text-center p-2 bg-fluid-gold/10 rounded-lg border border-fluid-gold/20">
                              <div className="text-fluid-gold font-bold text-sm">${user.portfolioValue.toLocaleString()}</div>
                              <div className="text-fluid-gold text-xs">Portfolio</div>
                            </div>
                            <div className="text-center p-2 bg-fluid-sapphire/10 rounded-lg border border-fluid-sapphire/20">
                              <div className="text-fluid-sapphire font-bold text-sm">{user.asrdBalance?.toLocaleString() || '5,000'}</div>
                              <div className="text-fluid-sapphire text-xs">ASRD Tokens</div>
                            </div>
                          </div>

                          <button
                            onClick={handleLogout}
                            className="w-full flex items-center justify-center space-x-2 px-3 md:px-4 py-2 md:py-2.5 text-red-300 hover:text-red-100 bg-red-500/10 hover:bg-red-500/20 border border-red-500/30 rounded-xl transition-all text-sm"
                          >
                            <LogOut className="w-4 h-4" />
                            <span className="font-semibold">Logout</span>
                          </button>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
              </div>
            ) : (
              <div className="flex items-center space-x-2 md:space-x-3">
                <button
                  onClick={handleLogin}
                  className="btn-fluid flex items-center space-x-2 text-sm px-4 md:px-6 py-2 md:py-2.5 group"
                >
                  <Zap className="w-4 h-4" />
                  <span>Start Investing</span>
                </button>
              </div>
            )}
          </div>

          {/* Enhanced Mobile Menu Button */}
          <button
            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            className="lg:hidden p-2 text-fluid-silver hover:text-white transition-colors bg-white/5 rounded-xl border border-white/10 hover:border-fluid-gold/30 mobile-nav-item"
            aria-label="Toggle mobile menu"
          >
            {isMobileMenuOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
          </button>
        </div>

        {/* Enhanced Mobile Menu */}
        <AnimatePresence>
          {isMobileMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="lg:hidden mt-3 md:mt-4 bg-fluid-charcoal/95 backdrop-blur-xl rounded-2xl border border-fluid-gold/20 overflow-hidden"
            >
              <div className="p-3 md:p-4 space-y-1 md:space-y-2">
                {navigation.map((item) => (
                  <Link
                    key={item.name}
                    href={item.href}
                    onClick={() => setIsMobileMenuOpen(false)}
                    className={`flex items-center space-x-3 px-3 md:px-4 py-3 rounded-xl text-base font-medium transition-all mobile-nav-item ${
                      isActive(item.href)
                        ? 'bg-gradient-to-r from-fluid-gold/20 to-fluid-emerald/20 text-fluid-gold border border-fluid-gold/30'
                        : 'text-fluid-silver hover:text-white hover:bg-white/5'
                    }`}
                  >
                    <item.icon className="w-5 h-5" />
                    <div className="flex-1">
                      <div className="font-semibold text-sm md:text-base">{item.name}</div>
                      <div className="text-xs text-fluid-gold opacity-80">{item.description}</div>
                    </div>
                  </Link>
                ))}

                {/* Enhanced Mobile Auth */}
                <div className="pt-3 md:pt-4 border-t border-fluid-gold/20">
                  {user ? (
                    <div className="space-y-2 md:space-y-3">
                      <div className="px-3 md:px-4 py-3 bg-gradient-to-r from-fluid-gold/10 to-fluid-emerald/10 rounded-xl border border-fluid-gold/20">
                        <div className="flex items-center space-x-2 mb-2">
                          <User className="w-4 h-4 text-fluid-gold" />
                          <span className="font-semibold text-white text-sm md:text-base">{user.name}</span>
                        </div>
                        <div className="grid grid-cols-2 gap-2 text-xs md:text-sm">
                          <div className="text-fluid-gold">${user.portfolioValue.toLocaleString()}</div>
                          <div className="text-fluid-sapphire">{user.asrdBalance?.toLocaleString() || '5,000'} ASRD</div>
                        </div>
                      </div>
                      <button
                        onClick={handleLogout}
                        className="w-full flex items-center justify-center space-x-2 px-3 md:px-4 py-3 text-red-300 hover:text-red-100 bg-red-500/10 hover:bg-red-500/20 border border-red-500/30 rounded-xl transition-all text-sm md:text-base"
                      >
                        <LogOut className="w-5 h-5" />
                        <span className="font-semibold">Logout</span>
                      </button>
                    </div>
                  ) : (
                    <button
                      onClick={handleLogin}
                      className="w-full btn-fluid flex items-center justify-center space-x-2 py-3 text-sm md:text-base mobile:w-full"
                    >
                      <Zap className="w-5 h-5" />
                      <span>Start Investing Now</span>
                    </button>
                  )}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </header>
  );
}

--- src/components/layout/PremiumPageWrapper.tsx ---
'use client';

import { ReactNode } from 'react';
import PremiumBackground from '@/components/ui/PremiumBackground';

interface PremiumPageWrapperProps {
  children: ReactNode;
  className?: string;
}

export default function PremiumPageWrapper({ children, className = '' }: PremiumPageWrapperProps) {
  return (
    <div className={`min-h-screen bg-transparent relative overflow-x-hidden ${className}`}>
      <PremiumBackground />
      <div className="relative z-20">
        {children}
      </div>
    </div>
  );
}

--- src/components/sections/FeaturedAssetsSection.tsx ---
"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { ArrowRight, Globe, Shield, TrendingUp, Coins, Crown, Zap, Users, Gem } from 'lucide-react';

const FluidHero = () => {
  const scrollToHowItWorks = () => {
    document.getElementById('how-it-works')?.scrollIntoView({ behavior: 'smooth' });
  };

  const exploreAssets = () => {
    document.getElementById('featured-assets')?.scrollIntoView({ behavior: 'smooth' });
  };

  return (
    <section className="relative min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-900 via-slate-800 to-emerald-900 overflow-hidden">
      {/* Enhanced Background Elements */}
      <div className="absolute inset-0 bg-grid-white/[0.02] bg-[size:60px_60px]" />
      
      {/* Animated Gradient Orbs */}
      <div className="absolute top-1/4 -left-10 w-72 h-72 bg-cyan-500/10 rounded-full blur-3xl animate-pulse" />
      <div className="absolute bottom-1/4 -right-10 w-96 h-96 bg-emerald-500/10 rounded-full blur-3xl animate-pulse delay-1000" />
      <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-amber-500/5 rounded-full blur-2xl" />

      {/* Enhanced 3D Globe Effect */}
      <div className="absolute top-1/4 right-10 w-96 h-96 opacity-20">
        <div className="relative w-full h-full">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 20, repeat: Infinity, ease: "linear" }}
            className="absolute inset-0 rounded-full border-2 border-cyan-400/20"
          />
          <motion.div
            animate={{ rotate: -360 }}
            transition={{ duration: 15, repeat: Infinity, ease: "linear" }}
            className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 rounded-full border border-emerald-400/20"
          />
          <Globe className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-20 h-20 text-cyan-400/30" />
        </div>
      </div>

      {/* Enhanced Floating Asset Cards */}
      <motion.div
        initial={{ y: 0, x: -20 }}
        animate={{ y: [0, -40, 0], x: [-20, 0, -20] }}
        transition={{ duration: 6, repeat: Infinity, ease: "easeInOut" }}
        className="absolute top-20 left-20 opacity-60"
      >
        <div className="bg-slate-800/80 backdrop-blur-md p-4 rounded-2xl border border-cyan-400/30 shadow-2xl">
          <div className="flex items-center space-x-2">
            <Shield className="w-4 h-4 text-cyan-400" />
            <span className="text-xs font-semibold text-white">Commercial Real Estate</span>
          </div>
          <div className="mt-2 text-xs text-cyan-300">From $100 • 12.4% ROI</div>
        </div>
      </motion.div>

      <motion.div
        initial={{ y: 0, x: 20 }}
        animate={{ y: [0, 30, 0], x: [20, 0, 20] }}
        transition={{ duration: 7, repeat: Infinity, ease: "easeInOut", delay: 1 }}
        className="absolute bottom-40 right-32 opacity-60"
      >
        <div className="bg-slate-800/80 backdrop-blur-md p-4 rounded-2xl border border-amber-400/30 shadow-2xl">
          <div className="flex items-center space-x-2">
            <TrendingUp className="w-4 h-4 text-amber-400" />
            <span className="text-xs font-semibold text-white">Fine Art Collection</span>
          </div>
          <div className="mt-2 text-xs text-amber-300">From $150 • 18.7% ROI</div>
        </div>
      </motion.div>

      {/* Third Floating Card */}
      <motion.div
        initial={{ y: 0 }}
        animate={{ y: [0, -25, 0] }}
        transition={{ duration: 5, repeat: Infinity, ease: "easeInOut", delay: 2 }}
        className="absolute top-1/3 right-1/4 opacity-50"
      >
        <div className="bg-slate-800/80 backdrop-blur-md p-4 rounded-2xl border border-emerald-400/30 shadow-2xl">
          <div className="flex items-center space-x-2">
            <Coins className="w-4 h-4 text-emerald-400" />
            <span className="text-xs font-semibold text-white">Private Equity</span>
          </div>
          <div className="mt-2 text-xs text-emerald-300">From $200 • 22.3% ROI</div>
        </div>
      </motion.div>

      {/* Main Content */}
      <div className="relative z-10 text-center px-4 sm:px-6 lg:px-8 max-w-7xl mx-auto">
        {/* POWERFUL TAGLINE BADGE */}
        <motion.div
          initial={{ opacity: 0, scale: 0.8 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.6 }}
          className="inline-flex items-center space-x-2 bg-gradient-to-r from-amber-500/20 to-amber-600/20 border border-amber-500/30 rounded-full px-6 py-3 mb-8 backdrop-blur-sm"
        >
          <Gem className="w-5 h-5 text-amber-400" />
          <span className="text-amber-400 font-semibold text-sm">
            We Don't Sell Dreams — We Tokenize Reality.
          </span>
        </motion.div>

        {/* Compelling Headline */}
        <motion.h1
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6 leading-tight"
        >
          Invest in Real-World Assets{" "}
          <span className="bg-gradient-to-r from-amber-400 via-cyan-400 to-emerald-400 bg-clip-text text-transparent">
            Like the 1%
          </span>
          <br />
          <span className="text-2xl md:text-3xl lg:text-4xl text-slate-300 font-light">
            — Without Being One
          </span>
        </motion.h1>

        {/* Powerful Subheading */}
        <motion.p
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
          className="text-xl md:text-2xl text-slate-300 max-w-4xl mx-auto mb-8 leading-relaxed"
        >
          We're redefining access.{" "}
          <span className="text-cyan-400 font-semibold">Fractional ownership starting from $100</span> – 
          powered by blockchain security and institutional-grade asset selection.
        </motion.p>

        {/* Trust Indicators */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.6 }}
          className="flex flex-wrap justify-center gap-6 mb-12"
        >
          {[
            { icon: Shield, text: "Bank-Level Security", color: "emerald" },
            { icon: Zap, text: "Instant Settlements", color: "cyan" },
            { icon: Users, text: "2,500+ Investors", color: "amber" },
            { icon: Coins, text: "$85M+ Assets", color: "emerald" }
          ].map((item, index) => (
            <div key={index} className="flex items-center space-x-2 text-slate-400">
              <item.icon className={`w-5 h-5 text-${item.color}-400`} />
              <span className="text-sm font-medium">{item.text}</span>
            </div>
          ))}
        </motion.div>

        {/* Action Buttons */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.8 }}
          className="flex flex-col sm:flex-row gap-4 justify-center items-center"
        >
          {/* Primary CTA */}
          <motion.button
            whileHover={{ scale: 1.05, boxShadow: "0 20px 40px rgba(6, 182, 212, 0.3)" }}
            whileTap={{ scale: 0.95 }}
            onClick={exploreAssets}
            className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white px-8 py-4 rounded-2xl font-semibold text-lg transition-all duration-300 flex items-center space-x-3 shadow-2xl"
          >
            <Coins className="w-6 h-6" />
            <span>Explore Premium Assets</span>
            <ArrowRight className="w-5 h-5" />
          </motion.button>

          {/* Secondary CTA */}
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={scrollToHowItWorks}
            className="border-2 border-slate-600 text-slate-300 hover:border-cyan-400 hover:text-cyan-400 px-8 py-4 rounded-2xl font-semibold text-lg transition-all duration-300 flex items-center space-x-2 backdrop-blur-sm"
          >
            <span>How It Works</span>
            <ArrowRight className="w-4 h-4" />
          </motion.button>
        </motion.div>

        {/* Social Proof */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.8, delay: 1 }}
          className="mt-12 text-slate-400 text-sm"
        >
          <p>Join 2,500+ investors building wealth through real-world assets</p>
        </motion.div>
      </div>

      {/* Scroll Indicator */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.8, delay: 1.2 }}
        className="absolute bottom-8 left-1/2 transform -translate-x-1/2"
      >
        <motion.div
          animate={{ y: [0, 10, 0] }}
          transition={{ duration: 2, repeat: Infinity }}
          className="w-6 h-10 border-2 border-slate-400 rounded-full flex justify-center"
        >
          <motion.div
            animate={{ y: [0, 12, 0] }}
            transition={{ duration: 2, repeat: Infinity }}
            className="w-1 h-3 bg-slate-400 rounded-full mt-2"
          />
        </motion.div>
      </motion.div>
    </section>
  );
};

export default FluidHero;
--- src/components/sections/FinalCTASection.tsx ---
// FinalCTASection.tsx - "Start Your Journey"
"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { ArrowRight, Shield, Star, Zap, CheckCircle } from 'lucide-react';

const FinalCTASection = () => {
  const benefits = [
    "Start with as little as $100",
    "Diversify across multiple asset classes",
    "Blockchain-secured transactions",
    "24/7 market access",
    "Professional asset management",
    "Regular dividend payments"
  ];

  return (
    <section className="py-20 bg-gradient-to-br from-slate-900 to-sapphire-900 relative overflow-hidden">
      {/* Background Pattern */}
      <div className="absolute inset-0 bg-grid-white/[0.02] bg-[size:60px_60px]" />
      
      {/* Floating Elements */}
      <div className="absolute top-10 left-10 opacity-10">
        <Shield className="w-20 h-20 text-white" />
      </div>
      <div className="absolute bottom-10 right-10 opacity-10">
        <Zap className="w-24 h-24 text-white" />
      </div>
      <div className="absolute top-1/2 left-1/4 opacity-5">
        <Star className="w-16 h-16 text-white" />
      </div>

      <div className="relative z-10 max-w-6xl mx-auto px-8">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-12"
        >
          <h2 className="text-fluid-3xl font-bold text-white mb-6">
            Ready to Start Your <span className="text-emerald-400">Wealth Journey</span>?
          </h2>
          <p className="text-fluid-lg text-slate-300 max-w-3xl mx-auto leading-relaxed">
            Join the revolution in asset ownership. Access elite investments, build your portfolio, 
            and secure your financial future—all starting from just $100.
          </p>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
          {/* Left Side - Benefits */}
          <motion.div
            initial={{ opacity: 0, x: -30 }}
            whileInView={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="space-y-6"
          >
            <h3 className="text-2xl font-semibold text-white mb-6">
              Why Start Today?
            </h3>
            
            {benefits.map((benefit, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, x: -20 }}
                whileInView={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.5, delay: 0.1 * index }}
                className="flex items-center space-x-4"
              >
                <div className="flex-shrink-0 w-8 h-8 bg-emerald-500 rounded-full flex items-center justify-center">
                  <CheckCircle className="w-5 h-5 text-white" />
                </div>
                <span className="text-lg text-slate-200">{benefit}</span>
              </motion.div>
            ))}

            {/* Trust Metrics */}
            <div className="grid grid-cols-3 gap-6 pt-8 border-t border-slate-700">
              <div className="text-center">
                <div className="text-2xl font-bold text-emerald-400">10K+</div>
                <div className="text-sm text-slate-400">Active Investors</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-sapphire-400">$50M+</div>
                <div className="text-sm text-slate-400">Assets Managed</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-amber-400">4.9★</div>
                <div className="text-sm text-slate-400">Rating</div>
              </div>
            </div>
          </motion.div>

          {/* Right Side - CTA Card */}
          <motion.div
            initial={{ opacity: 0, x: 30 }}
            whileInView={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8, delay: 0.4 }}
            className="bg-white rounded-2xl shadow-2xl p-8"
          >
            <div className="text-center mb-6">
              <div className="w-16 h-16 bg-gradient-to-r from-emerald-500 to-sapphire-500 rounded-full flex items-center justify-center mx-auto mb-4">
                <Zap className="w-8 h-8 text-white" />
              </div>
              <h3 className="text-2xl font-bold text-slate-900 mb-2">
                Begin in Minutes
              </h3>
              <p className="text-slate-600">
                Create your account and start investing today
              </p>
            </div>

            {/* CTA Buttons */}
            <div className="space-y-4">
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="w-full bg-gradient-to-r from-emerald-600 to-sapphire-600 text-white py-4 rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center space-x-2"
              >
                <span>Create Free Account</span>
                <ArrowRight className="w-5 h-5" />
              </motion.button>

              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="w-full border-2 border-slate-300 text-slate-700 py-4 rounded-xl font-semibold text-lg hover:border-emerald-400 hover:text-emerald-700 transition-all duration-300"
              >
                Schedule Demo
              </motion.button>
            </div>

            {/* Security Badge */}
            <div className="mt-6 pt-6 border-t border-slate-200 flex items-center justify-center space-x-2">
              <Shield className="w-5 h-5 text-emerald-600" />
              <span className="text-sm text-slate-500">Bank-level security & encryption</span>
            </div>

            {/* Quick Stats */}
            <div className="mt-6 grid grid-cols-2 gap-4 text-center">
              <div className="bg-slate-50 rounded-lg p-3">
                <div className="text-sm font-semibold text-slate-900">$100</div>
                <div className="text-xs text-slate-500">Minimum</div>
              </div>
              <div className="bg-slate-50 rounded-lg p-3">
                <div className="text-sm font-semibold text-slate-900">0%</div>
                <div className="text-xs text-slate-500">Account Fees</div>
              </div>
            </div>
          </motion.div>
        </div>

        {/* Bottom Trust Section */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.6 }}
          className="text-center mt-16 pt-12 border-t border-slate-700"
        >
          <p className="text-slate-400 uppercase tracking-wider text-sm mb-6">
            Trusted By Industry Leaders
          </p>
          <div className="flex flex-wrap justify-center items-center gap-8 opacity-60">
            <div className="text-slate-300 font-semibold">Forbes</div>
            <div className="text-slate-300 font-semibold">TechCrunch</div>
            <div className="text-slate-300 font-semibold">Bloomberg</div>
            <div className="text-slate-300 font-semibold">WSJ</div>
          </div>
        </motion.div>
      </div>
    </section>
  );
};

export default FinalCTASection;
--- src/components/sections/FluidDAO.tsx ---
"use client";

import React, { useState } from 'react';
import { Users, Vote, Clock, CheckCircle, XCircle, TrendingUp, Award, Shield, Crown, Zap, Target, Gem, ArrowRight, BarChart3, Coins, Building, Ship, Plane } from 'lucide-react';
import { motion } from 'framer-motion';

export default function FluidDAO() {
  const [activeTab, setActiveTab] = useState<'proposals' | 'governance' | 'rewards'>('proposals');
  const [votedProposals, setVotedProposals] = useState<number[]>([]);

  const proposals = [
    {
      id: 1,
      title: "Expand Dubai Luxury Real Estate Portfolio",
      description: "Acquire 3 additional waterfront villas in Palm Jumeirah to capitalize on 32% annual tourism growth and premium rental demand. Projected ROI: 28-35%",
      votesFor: 1842,
      votesAgainst: 428,
      status: "active",
      endDate: "2025-02-15",
      type: "Real Estate",
      impact: "High",
      budget: "$8.5M",
      timeline: "6 months",
      icon: Building
    },
    {
      id: 2,
      title: "Launch Elite Thoroughbred Racing Fund",
      description: "Create specialized investment fund for champion racehorses with proven track records. Includes breeding rights and international racing schedule.",
      votesFor: 1567,
      votesAgainst: 289,
      status: "active",
      endDate: "2025-02-20",
      type: "Sports Assets",
      impact: "Medium",
      budget: "$4.2M",
      timeline: "3 months",
      icon: Zap
    },
    {
      id: 3,
      title: "Mediterranean Superyacht Fleet Upgrade",
      description: "Strategic upgrades to luxury yacht amenities including helipad expansion and premium spa facilities to increase charter rates by 25-40%",
      votesFor: 1321,
      votesAgainst: 198,
      status: "active",
      endDate: "2025-02-25",
      type: "Marine Assets",
      impact: "High",
      budget: "$2.8M",
      timeline: "4 months",
      icon: Ship
    },
    {
      id: 4,
      title: "Private Jet Portfolio Expansion",
      description: "Add 2 new business jets to fleet serving corporate clients in Europe and Middle East. Projected 45% utilization rate with premium charter pricing.",
      votesFor: 987,
      votesAgainst: 156,
      status: "upcoming",
      endDate: "2025-03-10",
      type: "Aviation",
      impact: "Medium",
      budget: "$12M",
      timeline: "8 months",
      icon: Plane
    }
  ];

  const governanceStats = [
    { 
      label: "Community Members", 
      value: "3,247", 
      change: "+427", 
      icon: Users, 
      color: "text-amber-400",
      description: "Active governance participants"
    },
    { 
      label: "Active Proposals", 
      value: "8", 
      change: "+3", 
      icon: Vote, 
      color: "text-emerald-400",
      description: "Currently under review"
    },
    { 
      label: "Approval Rate", 
      value: "82%", 
      change: "+4%", 
      icon: CheckCircle, 
      color: "text-cyan-400",
      description: "Successful proposals"
    },
    { 
      label: "Voting Power", 
      value: "64%", 
      change: "+8%", 
      icon: TrendingUp, 
      color: "text-amber-400",
      description: "Average participation"
    }
  ];

  const rewards = [
    { 
      type: "Proposal Creation", 
      amount: "250 ASRD", 
      description: "Reward for submitting successful governance proposals that benefit the platform",
      icon: Target,
      color: "emerald"
    },
    { 
      type: "Active Voting", 
      amount: "75 ASRD", 
      description: "Monthly reward for participating in 80%+ of active proposals",
      icon: Vote,
      color: "cyan"
    },
    { 
      type: "Community Governance", 
      amount: "150 ASRD", 
      description: "Quarterly reward for consistent platform governance participation",
      icon: Shield,
      color: "amber"
    },
    { 
      type: "Platform Growth", 
      amount: "200 ASRD", 
      description: "Bonus for contributions that drive platform expansion and adoption",
      icon: TrendingUp,
      color: "violet"
    }
  ];

  const getProgressPercentage = (forVotes: number, againstVotes: number) => {
    const total = forVotes + againstVotes;
    return total > 0 ? (forVotes / total) * 100 : 0;
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-emerald-500/20 text-emerald-300 border-emerald-500/30';
      case 'upcoming': return 'bg-cyan-500/20 text-cyan-300 border-cyan-500/30';
      case 'closed': return 'bg-slate-500/20 text-slate-300 border-slate-500/30';
      default: return 'bg-slate-500/20 text-slate-300 border-slate-500/30';
    }
  };

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'High': return 'text-rose-400 bg-rose-500/20 border-rose-500/30';
      case 'Medium': return 'text-amber-400 bg-amber-500/20 border-amber-500/30';
      case 'Low': return 'text-emerald-400 bg-emerald-500/20 border-emerald-500/30';
      default: return 'text-slate-400 bg-slate-500/20 border-slate-500/30';
    }
  };

  const handleVote = (proposalId: number, voteType: 'for' | 'against') => {
    if (!votedProposals.includes(proposalId)) {
      setVotedProposals(prev => [...prev, proposalId]);
      // In real implementation, this would call your voting contract
      console.log(`Voted ${voteType} on proposal ${proposalId}`);
    }
  };

  return (
    <div className="fluid-section">
      <div className="fluid-container">
        {/* Enhanced Header Section */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12 md:mb-16"
        >
          {/* Elite Badge */}
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.6 }}
            className="inline-flex items-center space-x-2 bg-gradient-to-r from-amber-500/20 to-amber-600/20 border border-amber-500/30 rounded-full px-6 py-3 mb-6 backdrop-blur-sm"
          >
            <Crown className="w-5 h-5 text-amber-400" />
            <span className="text-amber-400 font-semibold text-sm">Collective Intelligence in Action</span>
          </motion.div>

          <h1 className="text-4xl md:text-6xl font-bold text-white mb-6">
            Shape the Future of <span className="bg-gradient-to-r from-amber-400 to-cyan-400 bg-clip-text text-transparent">Real-World Asset</span> Investment
          </h1>
          <p className="text-xl text-slate-300 max-w-3xl mx-auto leading-relaxed">
            Your voice matters. Join 3,247+ investors driving platform evolution through transparent, 
            decentralized governance and community-powered decisions.
          </p>
        </motion.div>

        {/* Enhanced Governance Stats */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-6 mb-12 md:mb-16">
          {governanceStats.map((stat, index) => (
            <motion.div
              key={stat.label}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6 text-center hover:border-cyan-400/30 transition-all duration-300"
            >
              <div className={`w-12 h-12 ${stat.color.replace('text-', 'bg-')} ${stat.color.replace('text-', 'bg-')}/20 rounded-xl flex items-center justify-center mx-auto mb-3`}>
                <stat.icon className={`w-6 h-6 ${stat.color}`} />
              </div>
              <div className="text-2xl font-bold text-white mb-1">{stat.value}</div>
              <div className="flex items-center justify-center space-x-1 text-emerald-400 text-sm mb-2">
                <TrendingUp className="w-4 h-4" />
                <span>{stat.change}</span>
              </div>
              <div className="text-slate-300 font-medium text-sm mb-1">{stat.label}</div>
              <div className="text-slate-400 text-xs">{stat.description}</div>
            </motion.div>
          ))}
        </div>

        {/* Enhanced Tabs */}
        <div className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6 md:p-8 mb-8">
          {/* Tab Navigation */}
          <div className="flex flex-col md:flex-row md:space-x-2 space-y-2 md:space-y-0 mb-6 md:mb-8">
            {[
              { id: 'proposals', label: 'Active Proposals', icon: Vote, count: proposals.filter(p => p.status === 'active').length },
              { id: 'governance', label: 'Governance Framework', icon: Shield },
              { id: 'rewards', label: 'Community Rewards', icon: Award }
            ].map((tab) => (
              <motion.button
                key={tab.id}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => setActiveTab(tab.id as any)}
                className={`flex items-center space-x-3 px-4 md:px-6 py-3 md:py-4 rounded-xl font-semibold transition-all duration-300 text-sm md:text-base ${
                  activeTab === tab.id
                    ? 'bg-gradient-to-r from-cyan-500 to-blue-600 text-white shadow-lg'
                    : 'bg-slate-700/50 text-slate-300 hover:text-white hover:bg-slate-700'
                }`}
              >
                <tab.icon className="w-5 h-5" />
                <span>{tab.label}</span>
                {tab.count && (
                  <span className="bg-amber-500 text-white px-2 py-1 rounded-full text-xs font-bold">
                    {tab.count}
                  </span>
                )}
              </motion.button>
            ))}
          </div>

          {/* Proposals Tab */}
          {activeTab === 'proposals' && (
            <div className="space-y-6">
              {proposals.map((proposal, index) => {
                const progress = getProgressPercentage(proposal.votesFor, proposal.votesAgainst);
                const hasVoted = votedProposals.includes(proposal.id);
                const ProposalIcon = proposal.icon;

                return (
                  <motion.div
                    key={proposal.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    className="bg-gradient-to-br from-slate-800/60 to-slate-900/60 backdrop-blur-md rounded-2xl border border-slate-700 p-6 hover:border-cyan-400/30 transition-all duration-300"
                  >
                    <div className="flex flex-col lg:flex-row lg:items-start justify-between gap-6 mb-4">
                      <div className="flex-1">
                        {/* Proposal Header */}
                        <div className="flex flex-wrap items-center gap-2 mb-3">
                          <span className={`px-3 py-1 rounded-full text-xs font-semibold border ${getStatusColor(proposal.status)}`}>
                            {proposal.status.toUpperCase()}
                          </span>
                          <span className="px-3 py-1 bg-cyan-500/20 text-cyan-300 rounded-full text-xs font-semibold border border-cyan-500/30">
                            {proposal.type}
                          </span>
                          <span className={`px-3 py-1 rounded-full text-xs font-semibold border ${getImpactColor(proposal.impact)}`}>
                            {proposal.impact} Impact
                          </span>
                        </div>

                        {/* Proposal Content */}
                        <div className="flex items-start space-x-4 mb-4">
                          <div className="w-12 h-12 bg-cyan-500/20 rounded-xl flex items-center justify-center flex-shrink-0">
                            <ProposalIcon className="w-6 h-6 text-cyan-400" />
                          </div>
                          <div className="flex-1">
                            <h3 className="text-xl font-bold text-white mb-2">{proposal.title}</h3>
                            <p className="text-slate-300 leading-relaxed">{proposal.description}</p>
                          </div>
                        </div>

                        {/* Proposal Details */}
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                          <div className="text-center p-3 bg-slate-700/30 rounded-xl border border-slate-600">
                            <div className="text-slate-400 text-sm mb-1">Budget</div>
                            <div className="text-white font-semibold">{proposal.budget}</div>
                          </div>
                          <div className="text-center p-3 bg-slate-700/30 rounded-xl border border-slate-600">
                            <div className="text-slate-400 text-sm mb-1">Timeline</div>
                            <div className="text-white font-semibold">{proposal.timeline}</div>
                          </div>
                          <div className="text-center p-3 bg-slate-700/30 rounded-xl border border-slate-600">
                            <div className="text-slate-400 text-sm mb-1">Votes For</div>
                            <div className="text-emerald-400 font-semibold">{proposal.votesFor.toLocaleString()}</div>
                          </div>
                          <div className="text-center p-3 bg-slate-700/30 rounded-xl border border-slate-600">
                            <div className="text-slate-400 text-sm mb-1">Votes Against</div>
                            <div className="text-rose-400 font-semibold">{proposal.votesAgainst.toLocaleString()}</div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Voting Progress */}
                    <div className="space-y-3 mb-4">
                      <div className="flex justify-between text-sm">
                        <span className="text-emerald-400 font-semibold">{proposal.votesFor.toLocaleString()} For</span>
                        <span className="text-rose-400 font-semibold">{proposal.votesAgainst.toLocaleString()} Against</span>
                      </div>
                      <div className="w-full bg-slate-700 rounded-full h-3">
                        <motion.div
                          initial={{ width: 0 }}
                          animate={{ width: `${progress}%` }}
                          transition={{ duration: 1, delay: 0.5 }}
                          className="bg-gradient-to-r from-emerald-500 to-cyan-500 h-3 rounded-full"
                        />
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <div className="flex items-center space-x-2 text-slate-400">
                          <Clock className="w-4 h-4" />
                          <span>Ends {proposal.endDate}</span>
                        </div>
                        <span className="text-white font-semibold">{progress.toFixed(1)}%</span>
                      </div>
                    </div>

                    {/* Action Buttons */}
                    {!hasVoted && proposal.status === 'active' && (
                      <div className="flex flex-col sm:flex-row gap-3">
                        <motion.button
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                          onClick={() => handleVote(proposal.id, 'for')}
                          className="flex-1 bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white py-3 rounded-xl font-semibold transition-all duration-300 flex items-center justify-center space-x-2"
                        >
                          <CheckCircle className="w-5 h-5" />
                          <span>Vote For</span>
                        </motion.button>
                        <motion.button
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                          onClick={() => handleVote(proposal.id, 'against')}
                          className="flex-1 bg-gradient-to-r from-rose-500 to-rose-600 hover:from-rose-600 hover:to-rose-700 text-white py-3 rounded-xl font-semibold transition-all duration-300 flex items-center justify-center space-x-2"
                        >
                          <XCircle className="w-5 h-5" />
                          <span>Vote Against</span>
                        </motion.button>
                      </div>
                    )}

                    {hasVoted && (
                      <div className="bg-emerald-500/20 border border-emerald-500/30 rounded-xl p-4 text-center">
                        <CheckCircle className="w-6 h-6 text-emerald-400 mx-auto mb-2" />
                        <div className="text-emerald-400 font-semibold">Vote Submitted Successfully!</div>
                        <div className="text-emerald-300 text-sm">Thank you for participating in governance</div>
                      </div>
                    )}
                  </motion.div>
                );
              })}
            </div>
          )}

          {/* Governance Tab */}
          {activeTab === 'governance' && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                className="bg-gradient-to-br from-slate-800/60 to-slate-900/60 backdrop-blur-md rounded-2xl border border-slate-700 p-6"
              >
                <div className="w-12 h-12 bg-cyan-500/20 rounded-xl flex items-center justify-center mb-4">
                  <Shield className="w-6 h-6 text-cyan-400" />
                </div>
                <h3 className="text-xl font-bold text-white mb-3">Transparent Governance Framework</h3>
                <p className="text-slate-300 mb-4 leading-relaxed">
                  Our decentralized governance model ensures every ASRD token holder has equal voting power 
                  in platform evolution. Collective intelligence drives better investment decisions for all.
                </p>
                <div className="space-y-3">
                  {[
                    { label: "1 ASRD = 1 Vote", description: "Equal voting power for all token holders" },
                    { label: "7-Day Voting Periods", description: "Ample time for community deliberation" },
                    { label: "51% Approval Threshold", description: "Clear majority required for execution" },
                    { label: "Real-Time Results", description: "Transparent, on-chain voting process" }
                  ].map((item, index) => (
                    <div key={index} className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-cyan-400 rounded-full mt-2 flex-shrink-0" />
                      <div>
                        <div className="text-white font-semibold text-sm">{item.label}</div>
                        <div className="text-slate-400 text-xs">{item.description}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </motion.div>

              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.2 }}
                className="bg-gradient-to-br from-slate-800/60 to-slate-900/60 backdrop-blur-md rounded-2xl border border-slate-700 p-6"
              >
                <div className="w-12 h-12 bg-amber-500/20 rounded-xl flex items-center justify-center mb-4">
                  <Users className="w-6 h-6 text-amber-400" />
                </div>
                <h3 className="text-xl font-bold text-white mb-3">Community Power in Action</h3>
                <p className="text-slate-300 mb-4 leading-relaxed">
                  Join 3,247+ sophisticated investors collectively managing $154M+ in real-world assets. 
                  Your voice shapes platform strategy and investment direction.
                </p>
                <div className="space-y-4">
                  {[
                    { label: "Active Community Members", value: "3,247", change: "+427" },
                    { label: "Successful Proposals", value: "89", change: "+12" },
                    { label: "Total Votes Cast", value: "24,891", change: "+2,154" },
                    { label: "Platform Value Managed", value: "$154M", change: "+$28M" }
                  ].map((stat, index) => (
                    <div key={index} className="flex justify-between items-center">
                      <span className="text-slate-300 text-sm">{stat.label}</span>
                      <div className="text-right">
                        <div className="text-white font-semibold">{stat.value}</div>
                        <div className="text-emerald-400 text-xs">{stat.change}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </motion.div>
            </div>
          )}

          {/* Rewards Tab */}
          {activeTab === 'rewards' && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {rewards.map((reward, index) => {
                const RewardIcon = reward.icon;
                return (
                  <motion.div
                    key={reward.type}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    className="bg-gradient-to-br from-slate-800/60 to-slate-900/60 backdrop-blur-md rounded-2xl border border-slate-700 p-6 hover:border-cyan-400/30 transition-all duration-300"
                  >
                    <div className="flex items-start justify-between mb-4">
                      <div className="w-12 h-12 bg-cyan-500/20 rounded-xl flex items-center justify-center">
                        <RewardIcon className="w-6 h-6 text-cyan-400" />
                      </div>
                      <div className={`px-3 py-1 bg-${reward.color}-500/20 text-${reward.color}-400 rounded-full text-sm font-semibold border border-${reward.color}-500/30`}>
                        {reward.amount}
                      </div>
                    </div>
                    <h3 className="text-xl font-bold text-white mb-2">{reward.type}</h3>
                    <p className="text-slate-300 leading-relaxed">{reward.description}</p>
                  </motion.div>
                );
              })}
            </div>
          )}
        </div>

        {/* Call to Action */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.6 }}
          className="bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-2xl border border-cyan-500/30 p-8 text-center"
        >
          <h3 className="text-2xl font-bold text-white mb-3">Ready to Shape the Future?</h3>
          <p className="text-slate-300 mb-6 max-w-2xl mx-auto">
            Join thousands of investors driving platform evolution. Your vote matters in building 
            the world's premier real-world asset investment platform.
          </p>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white px-8 py-4 rounded-xl font-semibold transition-all duration-300 flex items-center space-x-3 mx-auto shadow-lg"
          >
            <Coins className="w-6 h-6" />
            <span>Start Participating in Governance</span>
            <ArrowRight className="w-5 h-5" />
          </motion.button>
        </motion.div>
      </div>
    </div>
  );
}
--- src/components/sections/FluidDashboard.tsx ---
"use client";

import React, { useState } from 'react';
import {
  DollarSign, TrendingUp, Building, Zap,
  ArrowUpRight, Download, Eye, Coins, CalendarDays,
  BadgeCheck, Users, Clock, Star, Shield, Target
} from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';
import { ownedAssets, platformStats } from '@/data/mockData';
import RealAssetImage from '@/components/ui/RealAssetImage';
import AssetDetailsModal from '@/components/ui/AssetDetailsModal';
import { useNotification } from '@/contexts/NotificationContext';
import { motion } from 'framer-motion';

export default function FluidDashboard() {
  const { user, claimRental, claimWinnings } = useAuth();
  const { showNotification } = useNotification();
  const [selectedAsset, setSelectedAsset] = useState<any>(null);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [claimedRent, setClaimedRent] = useState(false);
  const [claimedWinnings, setClaimedWinnings] = useState(false);

  const totalMonthlyIncome = ownedAssets.reduce((sum, asset) => sum + asset.payoutAmount, 0);
  const totalPortfolioValue = ownedAssets.reduce((sum, asset) => sum + (asset.value * asset.shares / 100), 0);

  // Claim functionality (unchanged)
  const handleClaimRent = () => {
    claimRental(1);
    setClaimedRent(true);
    showNotification({
      type: 'premium',
      title: 'Rent Income Claimed!',
      message: '$4,250 rent successfully claimed! +132 ASRD tokens added to your balance.',
      duration: 5000
    });
  };

  const handleClaimWinnings = () => {
    claimWinnings(2);
    setClaimedWinnings(true);
    showNotification({
      type: 'premium',
      title: 'Investment Winnings Claimed!',
      message: '$8,500 winnings successfully claimed! +265 ASRD tokens added to your balance.',
      duration: 5000
    });
  };

  const handleViewDetails = (asset: any) => {
    setSelectedAsset(asset);
    setIsDetailsModalOpen(true);
  };

  // Enhanced stats with better data
  const stats = [
    {
      label: "Portfolio Value",
      value: `$${totalPortfolioValue.toLocaleString()}`,
      change: "+12.8%",
      icon: DollarSign,
      color: "text-amber-400",
      bgColor: "bg-amber-500/10",
      description: "Total value of your investments"
    },
    {
      label: "Monthly Income",
      value: `$${totalMonthlyIncome.toLocaleString()}`,
      change: "+15.2%",
      icon: TrendingUp,
      color: "text-emerald-400",
      bgColor: "bg-emerald-500/10",
      description: "Expected monthly returns"
    },
    {
      label: "Active Assets",
      value: ownedAssets.length.toString(),
      change: "+2",
      icon: Building,
      color: "text-blue-400",
      bgColor: "bg-blue-500/10",
      description: "Diversified investments"
    },
    {
      label: "ASRD Tokens",
      value: user?.asrdBalance?.toLocaleString() || "15,642",
      change: "+265",
      icon: Zap,
      color: "text-amber-400",
      bgColor: "bg-amber-500/10",
      description: "Platform rewards balance"
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Enhanced Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-12"
        >
          <div className="inline-flex items-center space-x-2 bg-gradient-to-r from-amber-500/20 to-amber-600/20 border border-amber-500/30 rounded-full px-6 py-3 mb-6 backdrop-blur-sm">
            <BadgeCheck className="w-5 h-5 text-amber-400" />
            <span className="text-amber-400 font-semibold">Premium Portfolio</span>
          </div>
          
          <h1 className="text-4xl md:text-6xl font-bold text-white mb-6">
            Investment <span className="bg-gradient-to-r from-amber-400 to-cyan-400 bg-clip-text text-transparent">Dashboard</span>
          </h1>
          
          <p className="text-xl text-slate-300 max-w-3xl mx-auto leading-relaxed">
            Track your elite real-world asset investments with comprehensive analytics and real-time performance metrics.
          </p>
        </motion.div>

        {/* Enhanced Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
          {stats.map((stat, index) => (
            <motion.div
              key={stat.label}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6 hover:border-amber-400/30 transition-all duration-300 group"
            >
              <div className="flex items-center justify-between mb-4">
                <div className={`p-3 rounded-xl ${stat.bgColor}`}>
                  <stat.icon className={`w-6 h-6 ${stat.color}`} />
                </div>
                <div className="flex items-center space-x-1 text-sm font-semibold text-emerald-400">
                  <ArrowUpRight className="w-4 h-4" />
                  <span>{stat.change}</span>
                </div>
              </div>
              
              <h3 className="text-2xl font-bold text-white mb-2 group-hover:text-amber-400 transition-colors">
                {stat.value}
              </h3>
              
              <p className="text-slate-300 font-medium mb-1">{stat.label}</p>
              <p className="text-slate-400 text-sm">{stat.description}</p>
            </motion.div>
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column - Income & Performance */}
          <div className="lg:col-span-2 space-y-8">
            {/* Claimable Income - Enhanced */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
              className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6"
            >
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-white">Claimable Income</h2>
                <div className="flex items-center space-x-2 text-amber-400">
                  <Coins className="w-5 h-5" />
                  <span className="font-semibold">Ready to Claim</span>
                </div>
              </div>

              {/* Rent Income Card */}
              <div className="bg-gradient-to-r from-amber-500/10 to-amber-600/10 rounded-xl border border-amber-500/20 p-6 mb-4">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h3 className="text-lg font-semibold text-white mb-1">Rental Income</h3>
                    <p className="text-slate-300 text-sm">From premium real estate assets</p>
                  </div>
                  <div className="text-right">
                    <p className="text-2xl font-bold text-amber-400">$4,250</p>
                    <p className="text-amber-300 text-sm">+132 ASRD Tokens</p>
                  </div>
                </div>
                <button
                  onClick={handleClaimRent}
                  disabled={claimedRent}
                  className={`w-full bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 text-white py-4 rounded-xl font-semibold transition-all duration-300 flex items-center justify-center space-x-2 ${
                    claimedRent ? 'opacity-50 cursor-not-allowed' : 'hover:shadow-xl'
                  }`}
                >
                  <Coins className="w-5 h-5" />
                  <span>{claimedRent ? 'Claimed Successfully!' : 'Claim Rent Income'}</span>
                </button>
              </div>

              {/* Winnings Income Card */}
              <div className="bg-gradient-to-r from-emerald-500/10 to-emerald-600/10 rounded-xl border border-emerald-500/20 p-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h3 className="text-lg font-semibold text-white mb-1">Investment Winnings</h3>
                    <p className="text-slate-300 text-sm">From thoroughbred and venture assets</p>
                  </div>
                  <div className="text-right">
                    <p className="text-2xl font-bold text-emerald-400">$8,500</p>
                    <p className="text-emerald-300 text-sm">+265 ASRD Tokens</p>
                  </div>
                </div>
                <button
                  onClick={handleClaimWinnings}
                  disabled={claimedWinnings}
                  className={`w-full bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white py-4 rounded-xl font-semibold transition-all duration-300 flex items-center justify-center space-x-2 ${
                    claimedWinnings ? 'opacity-50 cursor-not-allowed' : 'hover:shadow-xl'
                  }`}
                >
                  <Zap className="w-5 h-5" />
                  <span>{claimedWinnings ? 'Claimed Successfully!' : 'Claim Winnings'}</span>
                </button>
              </div>
            </motion.div>

            {/* Income History - Enhanced */}
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6, delay: 0.3 }}
              className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6"
            >
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-white">Income History</h2>
                <button className="bg-slate-700 hover:bg-slate-600 text-white px-4 py-2 rounded-xl font-semibold transition-all duration-300 flex items-center space-x-2">
                  <Download className="w-4 h-4" />
                  <span>Export</span>
                </button>
              </div>

              <div className="space-y-4">
                {ownedAssets.map((asset, index) => (
                  <motion.div
                    key={asset.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.4, delay: 0.1 * index }}
                    className="flex items-center justify-between p-4 bg-slate-700/30 rounded-xl border border-slate-600 hover:border-slate-500 transition-all duration-300 group cursor-pointer"
                    onClick={() => handleViewDetails(asset)}
                  >
                    <div className="flex items-center space-x-4">
                      <RealAssetImage type={asset.type} title={asset.title} size="sm" />
                      <div>
                        <h3 className="font-semibold text-white group-hover:text-amber-400 transition-colors">
                          {asset.title}
                        </h3>
                        <div className="flex items-center space-x-2 text-slate-400 text-sm mt-1">
                          <CalendarDays className="w-4 h-4" />
                          <span>Next payout: {asset.nextPayout}</span>
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-lg font-bold text-blue-400">${asset.payoutAmount.toLocaleString()}</p>
                      <p className="text-blue-300 text-sm">+{(asset.payoutAmount / 32).toFixed(0)} ASRD</p>
                    </div>
                  </motion.div>
                ))}
              </div>
            </motion.div>
          </div>

          {/* Right Column - Your Assets */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.4 }}
            className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6"
          >
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-white">Your Assets</h2>
              <div className="flex items-center space-x-2 text-emerald-400">
                <Shield className="w-5 h-5" />
                <span className="text-sm font-semibold">Secured</span>
              </div>
            </div>

            <div className="space-y-4">
              {ownedAssets.map((asset, index) => (
                <motion.div
                  key={asset.id}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.4, delay: 0.1 * index }}
                  className="bg-slate-700/30 rounded-xl border border-slate-600 p-4 hover:border-amber-400/30 transition-all duration-300 group cursor-pointer"
                  onClick={() => handleViewDetails(asset)}
                >
                  <div className="flex items-start space-x-4">
                    <RealAssetImage type={asset.type} title={asset.title} size="md" />
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1">
                          <h3 className="font-bold text-white text-lg mb-1 group-hover:text-amber-400 transition-colors line-clamp-1">
                            {asset.title}
                          </h3>
                          <p className="text-slate-300 text-sm mb-2">{asset.location}</p>
                          
                          {/* Enhanced badges */}
                          {asset.badges && asset.badges.length > 0 && (
                            <div className="flex flex-wrap gap-1 mb-2">
                              {asset.badges.slice(0, 2).map((badge, badgeIndex) => (
                                <span
                                  key={badgeIndex}
                                  className={`px-2 py-1 rounded-full text-xs font-medium border ${
                                    badge.color === 'emerald' ? 'bg-emerald-500/20 text-emerald-300 border-emerald-500/30' :
                                    badge.color === 'amber' ? 'bg-amber-500/20 text-amber-300 border-amber-500/30' :
                                    'bg-blue-500/20 text-blue-300 border-blue-500/30'
                                  }`}
                                >
                                  {badge.label}
                                </span>
                              ))}
                            </div>
                          )}
                        </div>
                        <span className="bg-emerald-500/20 text-emerald-300 px-3 py-1 rounded-full text-sm font-semibold border border-emerald-500/30">
                          {asset.roi}
                        </span>
                      </div>

                      {/* Enhanced metrics */}
                      <div className="grid grid-cols-2 gap-4 mb-3">
                        <div>
                          <p className="text-slate-400 text-sm">Investment</p>
                          <p className="text-white font-semibold">${asset.investment.toLocaleString()}</p>
                        </div>
                        <div>
                          <p className="text-slate-400 text-sm">Shares</p>
                          <p className="text-blue-400 font-semibold">{asset.shares}</p>
                        </div>
                      </div>

                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-4 text-slate-400 text-sm">
                          <div className="flex items-center space-x-1">
                            <Users className="w-4 h-4" />
                            <span>{asset.investorCount} investors</span>
                          </div>
                          {asset.performance && (
                            <div className="flex items-center space-x-1 text-emerald-400">
                              <TrendingUp className="w-4 h-4" />
                              <span>{asset.performance}</span>
                            </div>
                          )}
                        </div>
                        <button
                          className="bg-slate-600 hover:bg-slate-500 text-white px-3 py-2 rounded-lg transition-all duration-300 flex items-center space-x-1 text-sm"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleViewDetails(asset);
                          }}
                        >
                          <Eye className="w-4 h-4" />
                          <span>View</span>
                        </button>
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>
        </div>
      </div>

      {/* Modal (unchanged functionality) */}
      <AssetDetailsModal
        isOpen={isDetailsModalOpen}
        onClose={() => setIsDetailsModalOpen(false)}
        asset={selectedAsset}
        onInvest={() => {}}
      />
    </div>
  );
}
--- src/components/sections/FluidHero.tsx ---
// EnhancedHero.tsx - "Instant Connection"
"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { ArrowRight, Globe, Shield, TrendingUp } from 'lucide-react';

const EnhancedHero = () => {
  return (
    <section className="relative min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 to-emerald-50/30 overflow-hidden">
      {/* Background Elements */}
      <div className="absolute inset-0 bg-grid-slate-200 [mask-image:radial-gradient(ellipse_at_center,transparent_20%,black)]" />
      
      {/* Subtle 3D Globe Effect */}
      <div className="absolute top-1/4 right-10 w-96 h-96 opacity-10">
        <div className="relative w-full h-full">
          <div className="absolute inset-0 rounded-full border-2 border-emerald-300/30 animate-pulse" />
          <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 rounded-full border border-sapphire-200/20" />
          <Globe className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-20 h-20 text-emerald-400/20" />
        </div>
      </div>

      {/* Floating Asset Cards */}
      <div className="absolute top-20 left-20 opacity-40">
        <motion.div
          initial={{ y: 0 }}
          animate={{ y: [0, -20, 0] }}
          transition={{ duration: 4, repeat: Infinity, ease: "easeInOut" }}
          className="bg-white p-4 rounded-lg shadow-lg border border-emerald-100"
        >
          <div className="flex items-center space-x-2">
            <Shield className="w-4 h-4 text-emerald-600" />
            <span className="text-xs font-semibold text-slate-700">Commercial Real Estate</span>
          </div>
          <div className="mt-2 text-xs text-slate-500">From $100</div>
        </motion.div>
      </div>

      <div className="absolute bottom-40 right-32 opacity-40">
        <motion.div
          initial={{ y: 0 }}
          animate={{ y: [0, 15, 0] }}
          transition={{ duration: 5, repeat: Infinity, ease: "easeInOut", delay: 1 }}
          className="bg-white p-4 rounded-lg shadow-lg border border-sapphire-100"
        >
          <div className="flex items-center space-x-2">
            <TrendingUp className="w-4 h-4 text-sapphire-600" />
            <span className="text-xs font-semibold text-slate-700">Fine Art</span>
          </div>
          <div className="mt-2 text-xs text-slate-500">From $150</div>
        </motion.div>
      </div>

      <div className="absolute top-1/3 right-1/4 opacity-30">
        <motion.div
          initial={{ y: 0 }}
          animate={{ y: [0, -15, 0] }}
          transition={{ duration: 6, repeat: Infinity, ease: "easeInOut", delay: 2 }}
          className="bg-white p-4 rounded-lg shadow-lg border border-amber-100"
        >
          <div className="text-xs font-semibold text-slate-700">Private Equity</div>
          <div className="mt-2 text-xs text-slate-500">From $200</div>
        </motion.div>
      </div>

      {/* Main Content */}
      <div className="relative z-10 max-w-7xl mx-auto px-8 text-center">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="space-y-8"
        >
          {/* Headline */}
          <h1 className="text-fluid-4xl font-bold text-slate-900 leading-tight">
            Invest in Real-World Assets Like the 1% —{" "}
            <span className="bg-gradient-to-r from-emerald-600 to-sapphire-600 bg-clip-text text-transparent">
              Without Being One
            </span>
          </h1>

          {/* Subheading */}
          <p className="text-fluid-xl text-slate-600 max-w-3xl mx-auto leading-relaxed">
            We&apos;re redefining access. Fractional ownership starting from $100 – powered by blockchain.
          </p>

          {/* CTA Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mt-12">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="bg-gradient-to-r from-emerald-600 to-sapphire-600 text-white px-8 py-4 rounded-full font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-300 flex items-center space-x-2"
            >
              <span>Explore Assets</span>
              <ArrowRight className="w-5 h-5" />
            </motion.button>

            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="border-2 border-slate-300 text-slate-700 px-8 py-4 rounded-full font-semibold text-lg hover:border-emerald-400 hover:text-emerald-700 transition-all duration-300"
              onClick={() => {
                // Scroll to How It Works section
                document.getElementById('how-it-works')?.scrollIntoView({ behavior: 'smooth' });
              }}
            >
              How It Works
            </motion.button>
          </div>

          {/* Trust Indicators */}
          <div className="mt-16 pt-8 border-t border-slate-200">
            <p className="text-sm text-slate-500 uppercase tracking-wider mb-6">
              Trusted by Thousands of Investors
            </p>
            <div className="flex flex-wrap justify-center items-center gap-8 text-slate-400">
              <div className="text-center">
                <div className="text-2xl font-bold text-emerald-600">$50M+</div>
                <div className="text-xs">Assets Under Management</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-sapphire-600">10K+</div>
                <div className="text-xs">Active Investors</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-amber-600">99.9%</div>
                <div className="text-xs">Uptime Reliability</div>
              </div>
            </div>
          </div>
        </motion.div>
      </div>

      {/* Scroll Indicator */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ delay: 1.5 }}
        className="absolute bottom-8 left-1/2 transform -translate-x-1/2"
      >
        <motion.div
          animate={{ y: [0, 10, 0] }}
          transition={{ duration: 2, repeat: Infinity }}
          className="w-6 h-10 border-2 border-slate-300 rounded-full flex justify-center"
        >
          <motion.div
            animate={{ y: [0, 12, 0] }}
            transition={{ duration: 2, repeat: Infinity }}
            className="w-1 h-3 bg-slate-400 rounded-full mt-2"
          />
        </motion.div>
      </motion.div>
    </section>
  );
};

export default EnhancedHero;
--- src/components/sections/FluidMarketplace.tsx ---
"use client";

import React, { useState, useMemo } from 'react';
import { Search, Filter, Grid, List, BadgeCheck, TrendingUp, Zap, Shield, Users, Clock, Star } from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';
import { useNotification } from '@/contexts/NotificationContext';
import EnhancedAssetCard from '@/components/ui/EnhancedAssetCard';
import InvestmentModal from '@/components/ui/InvestmentModal';
import AssetDetailsModal from '@/components/ui/AssetDetailsModal';
import { mockAssets } from '@/data/mockData';
import { motion, AnimatePresence } from 'framer-motion';
import { Asset } from '@/types/asset';

// Enhanced asset data with all new features
const enhancedAssets: Asset[] = mockAssets.map((asset, index) => ({
  ...asset,
  category: asset.type,
  currency: "USD",
  image: "",
  description: asset.description || `Premium ${asset.type.toLowerCase()} investment located in ${asset.location} with ${asset.roi} ROI. Professional management and proven returns.`,
  sharesAvailable: 100,
  sharesSold: (index * 13) % 100,
  // Enhanced features
  badges: [
    { label: "Blockchain Verified", color: "emerald" },
    { label: "High Demand", color: "rose" },
    { label: "Featured", color: "amber" },
    { label: "Exclusive Access", color: "violet" },
    { label: "Limited Time", color: "sapphire" },
    { label: "Top Performer", color: "cyan" }
  ].slice(0, 2 + (index % 3)),
  performance: `+${(10 + (index * 2) % 10).toFixed(1)}%`,
  timeLeft: `${3 + (index % 7)} days`,
  investorCount: 150 + (index * 23) % 200,
  enhanced: true
}))

export default function FluidMarketplace() {
  const { user, login, invest } = useAuth()
  const { showNotification } = useNotification()
  const [searchQuery, setSearchQuery] = useState('')
  const [selectedType, setSelectedType] = useState('all')
  const [sortBy, setSortBy] = useState('roi')
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null)
  const [isInvestmentModalOpen, setIsInvestmentModalOpen] = useState(false)
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false)

  // Filter and sort logic
  const filteredAssets = useMemo(() => {
    return enhancedAssets.filter(asset => {
      const matchesSearch = asset.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          (asset.description || '').toLowerCase().includes(searchQuery.toLowerCase()) ||
                          asset.location.toLowerCase().includes(searchQuery.toLowerCase())

      const matchesType = selectedType === 'all' || asset.type === selectedType

      return matchesSearch && matchesType
    }).sort((a, b) => {
      switch (sortBy) {
        case 'roi':
          return parseFloat(b.roi) - parseFloat(a.roi)
        case 'value':
          return b.value - a.value
        case 'minInvestment':
          return a.minInvestment - b.minInvestment
        case 'performance':
          return parseFloat(b.performance || '0') - parseFloat(a.performance || '0')
        default:
          return 0
      }
    })
  }, [searchQuery, selectedType, sortBy])

  // UPDATED HANDLERS - Accept Asset objects
  const handleInvest = (asset: Asset) => {
    if (!user) {
      login('/marketplace')
      showNotification({
        title: 'Authentication Required',
        message: 'Please sign in to invest in assets',
        type: 'info'
      })
      return
    }
    setSelectedAsset(asset)
    setIsInvestmentModalOpen(true)
  }

  const handleConfirmInvest = async (assetId: number, amount: number) => {
    if (!user || !selectedAsset) return;

    const success = invest(amount, selectedAsset.title);
    if (!success) return;

    await new Promise(resolve => setTimeout(resolve, 2000));

    showNotification({
      type: 'premium',
      title: 'Investment Successful!',
      message: `Successfully invested $${amount.toLocaleString()} in ${selectedAsset?.title}!\n\n• ASRD Tokens Deducted: ${(amount / 32).toFixed(2)}\n• Asset: ${selectedAsset?.title}\n• ROI: ${selectedAsset?.roi}\n\nYour investment has been added to your portfolio.`,
      duration: 6000
    });

    setIsInvestmentModalOpen(false);
    setSelectedAsset(null);
  }

  // UPDATED HANDLER - Accepts Asset object
  const handleViewDetails = (asset: Asset) => {
    setSelectedAsset(asset)
    setIsDetailsModalOpen(true)
  }

  const assetTypes = ['all', ...new Set(enhancedAssets.map(asset => asset.type))]

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Enhanced Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-12"
        >
          <div className="inline-flex items-center space-x-2 bg-gradient-to-r from-amber-500/20 to-amber-600/20 border border-amber-500/30 rounded-full px-6 py-3 mb-6 backdrop-blur-sm">
            <BadgeCheck className="w-5 h-5 text-amber-400" />
            <span className="text-amber-400 font-semibold">Premium Investment Marketplace</span>
          </div>
          
          <h1 className="text-4xl md:text-6xl font-bold text-white mb-6">
            Elite Asset <span className="bg-gradient-to-r from-amber-400 to-cyan-400 bg-clip-text text-transparent">Marketplace</span>
          </h1>
          
          <p className="text-xl text-slate-300 max-w-3xl mx-auto leading-relaxed mb-8">
            Discover institutional-grade real-world assets with fractional ownership. 
            Start investing from $100 with blockchain-secured transactions.
          </p>

          {/* Stats Bar */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-6 max-w-2xl mx-auto">
            {[
              { icon: Users, value: '2.5K+', label: 'Active Investors' },
              { icon: TrendingUp, value: '$85M+', label: 'Assets Managed' },
              { icon: Shield, value: '100%', label: 'Secure' },
              { icon: Star, value: '4.9/5', label: 'Rating' }
            ].map((stat, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                className="text-center p-4 bg-slate-800/50 rounded-2xl border border-slate-700 backdrop-blur-sm"
              >
                <stat.icon className="w-6 h-6 text-amber-400 mx-auto mb-2" />
                <div className="text-2xl font-bold text-white">{stat.value}</div>
                <div className="text-slate-400 text-sm">{stat.label}</div>
              </motion.div>
            ))}
          </div>
        </motion.div>

        {/* Enhanced Search and Filters */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6 mb-8 shadow-2xl"
        >
          <div className="flex flex-col lg:flex-row gap-6 items-center justify-between">
            {/* Search Bar */}
            <div className="flex-1 w-full lg:max-w-md">
              <div className="relative">
                <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5" />
                <input
                  type="text"
                  placeholder="Search assets by name, location, or description..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full pl-12 pr-4 py-4 bg-slate-900/50 border border-slate-600 rounded-xl text-white placeholder-slate-400 focus:border-amber-400 focus:outline-none transition-all duration-300 text-lg backdrop-blur-sm"
                />
              </div>
            </div>

            {/* Filters Group */}
            <div className="flex flex-col sm:flex-row gap-4 items-center w-full lg:w-auto">
              {/* Asset Type Filter */}
              <div className="relative flex-1 sm:flex-none">
                <select
                  value={selectedType}
                  onChange={(e) => setSelectedType(e.target.value)}
                  className="w-full px-4 py-4 bg-slate-900/50 border border-slate-600 rounded-xl text-white focus:border-amber-400 focus:outline-none transition-all duration-300 appearance-none backdrop-blur-sm"
                >
                  {assetTypes.map(type => (
                    <option key={type} value={type} className="capitalize bg-slate-800">
                      {type === 'all' ? 'All Asset Types' : type}
                    </option>
                  ))}
                </select>
                <Filter className="absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4 pointer-events-none" />
              </div>

              {/* Sort Filter */}
              <div className="relative flex-1 sm:flex-none">
                <select
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value)}
                  className="w-full px-4 py-4 bg-slate-900/50 border border-slate-600 rounded-xl text-white focus:border-amber-400 focus:outline-none transition-all duration-300 appearance-none backdrop-blur-sm"
                >
                  <option value="roi">Highest ROI</option>
                  <option value="performance">Best Performance</option>
                  <option value="value">Highest Value</option>
                  <option value="minInvestment">Lowest Minimum</option>
                </select>
                <TrendingUp className="absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4 pointer-events-none" />
              </div>

              {/* View Mode Toggle */}
              <div className="flex items-center gap-2 bg-slate-900/50 rounded-xl p-2 border border-slate-600 backdrop-blur-sm">
                <button
                  onClick={() => setViewMode('grid')}
                  className={`p-3 rounded-lg transition-all duration-300 ${
                    viewMode === 'grid'
                      ? 'bg-amber-500 text-white shadow-lg'
                      : 'text-slate-400 hover:text-white hover:bg-slate-700'
                  }`}
                >
                  <Grid className="w-5 h-5" />
                </button>
                <button
                  onClick={() => setViewMode('list')}
                  className={`p-3 rounded-lg transition-all duration-300 ${
                    viewMode === 'list'
                      ? 'bg-amber-500 text-white shadow-lg'
                      : 'text-slate-400 hover:text-white hover:bg-slate-700'
                  }`}
                >
                  <List className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        </motion.div>

        {/* Results Count */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.6, delay: 0.3 }}
          className="flex items-center justify-between mb-6"
        >
          <div className="text-slate-300">
            Showing <span className="text-white font-semibold">{filteredAssets.length}</span> of{' '}
            <span className="text-white font-semibold">{enhancedAssets.length}</span> assets
          </div>
          <div className="flex items-center space-x-2 text-slate-400">
            <Zap className="w-4 h-4" />
            <span className="text-sm">Live Market Data</span>
          </div>
        </motion.div>

        {/* Asset Grid/List */}
        <AnimatePresence mode="wait">
          {filteredAssets.length > 0 ? (
            <motion.div
              key={viewMode}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              transition={{ duration: 0.4 }}
              className={viewMode === 'grid'
                ? "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6"
                : "space-y-4"
              }
            >
              {filteredAssets.map((asset, index) => (
                <motion.div
                  key={asset.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: index * 0.1 }}
                >
                  {/* UPDATED: Pass asset object instead of spreading */}
                  <EnhancedAssetCard
                    asset={asset}
                    onInvest={handleInvest}
                    onViewDetails={handleViewDetails}
                    enhanced={true}
                  />
                </motion.div>
              ))}
            </motion.div>
          ) : (
            /* Empty State */
            <motion.div
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              className="text-center py-16"
            >
              <div className="max-w-md mx-auto bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-8">
                <div className="w-16 h-16 bg-slate-700 rounded-2xl flex items-center justify-center mx-auto mb-4">
                  <Filter className="w-8 h-8 text-slate-400" />
                </div>
                <h3 className="text-2xl font-bold text-white mb-2">No Assets Found</h3>
                <p className="text-slate-300 mb-6">
                  Try adjusting your search criteria or filters to find more investment opportunities.
                </p>
                <button
                  onClick={() => {
                    setSearchQuery('')
                    setSelectedType('all')
                  }}
                  className="bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 text-white px-8 py-3 rounded-xl font-semibold transition-all duration-300 shadow-lg hover:shadow-xl"
                >
                  Clear All Filters
                </button>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Modals */}
      <InvestmentModal
        isOpen={isInvestmentModalOpen}
        onClose={() => setIsInvestmentModalOpen(false)}
        asset={selectedAsset}
        onInvest={handleConfirmInvest}
      />

      <AssetDetailsModal
        isOpen={isDetailsModalOpen}
        onClose={() => setIsDetailsModalOpen(false)}
        asset={selectedAsset}
        onInvest={() => selectedAsset && handleInvest(selectedAsset)}
      />
    </div>
  )
}
--- src/components/sections/FluidTreasury.tsx ---
"use client";

import React, { useState, useEffect } from 'react';
import { DollarSign, TrendingUp, PieChart, Building, Ship, Plane, Gem, Zap, ArrowUpRight, ArrowDownRight, Users, Calendar } from 'lucide-react';

export default function FluidTreasury() {
  const [treasuryData, setTreasuryData] = useState<any>(null);
  const [timeframe, setTimeframe] = useState<'1m' | '3m' | '1y' | 'all'>('1y');

  useEffect(() => {
    const fetchTreasuryData = async () => {
      await new Promise(resolve => setTimeout(resolve, 1000));
      setTreasuryData({
        totalValue: 15420000,
        totalInvestors: 2470,
        averageRoi: "38.7%",
        activeAssets: 28,
        monthlyReturns: 425000,
        totalReturns: 3850000,
        assetsByType: [
          { type: 'Real Estate', value: 6200000, percentage: 40.2, icon: Building },
          { type: 'Thoroughbred', value: 3800000, percentage: 24.6, icon: Zap },
          { type: 'Marine', value: 2850000, percentage: 18.5, icon: Ship },
          { type: 'Aviation', value: 1570000, percentage: 10.2, icon: Plane },
          { type: 'Luxury Goods', value: 1000000, percentage: 6.5, icon: Gem }
        ],
        performance: [
          { month: 'Jan', returns: 385000, growth: 12.5 },
          { month: 'Feb', returns: 412000, growth: 15.2 },
          { month: 'Mar', returns: 398000, growth: 13.8 },
          { month: 'Apr', returns: 425000, growth: 16.1 },
          { month: 'May', returns: 441000, growth: 18.3 },
          { month: 'Jun', returns: 468000, growth: 21.5 }
        ]
      });
    };

    fetchTreasuryData();
  }, []);

  const stats = [
    {
      label: "Total Platform Value",
      value: `$${(treasuryData?.totalValue / 1000000).toFixed(1)}M`,
      change: "+18.3%",
      icon: DollarSign,
      color: "text-fluid-gold"
    },
    {
      label: "Active Investors",
      value: treasuryData?.totalInvestors.toLocaleString(),
      change: "+247",
      icon: Users,
      color: "text-fluid-emerald"
    },
    {
      label: "Average ROI",
      value: treasuryData?.averageRoi,
      change: "+2.1%",
      icon: TrendingUp,
      color: "text-fluid-sapphire"
    },
    {
      label: "Monthly Returns",
      value: `$${(treasuryData?.monthlyReturns / 1000).toFixed(0)}K`,
      change: "+16.1%",
      icon: PieChart,
      color: "text-fluid-gold"
    }
  ];

  if (!treasuryData) {
    return (
      <div className="fluid-section">
        <div className="fluid-container">
          <div className="text-center">
            <div className="w-12 h-12 md:w-16 md:h-16 border-4 border-fluid-gold border-t-transparent rounded-full animate-spin mx-auto mb-3 md:mb-4"></div>
            <p className="fluid-caption">Loading treasury data...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fluid-section">
      <div className="fluid-container">
        {/* Header Section */}
        <div className="text-center mb-8 md:mb-12 fluid-scroll-item mobile:text-center">
          <h1 className="fluid-hero">
            Platform <span className="text-fluid-gold">Treasury</span>
          </h1>
          <p className="fluid-body max-w-2xl mx-auto mobile:px-4">
            Comprehensive overview of platform assets, performance, and investor returns
          </p>
        </div>

        {/* Stats Grid */}
        <div className="fluid-grid fluid-grid-cols-2 lg:fluid-grid-cols-4 gap-4 md:gap-6 mb-8 md:mb-12">
          {stats.map((stat, index) => (
            <div 
              key={stat.label} 
              className="fluid-card fluid-scroll-item mobile:w-full"
              style={{ transitionDelay: `${index * 100}ms` }}
            >
              <div className="flex items-center justify-between mb-3 md:mb-4">
                <div className={`p-2 md:p-3 rounded-lg md:rounded-xl bg-opacity-10 ${stat.color.replace('text-', 'bg-')}`}>
                  <stat.icon className="w-4 h-4 md:w-6 md:h-6" />
                </div>
                <div className="flex items-center space-x-1 text-xs md:text-sm font-semibold text-fluid-emerald">
                  <ArrowUpRight className="w-3 h-3 md:w-4 md:h-4" />
                  <span>{stat.change}</span>
                </div>
              </div>
              <h3 className="text-lg md:text-2xl font-bold text-white mb-1 md:mb-2">{stat.value}</h3>
              <p className="fluid-caption text-xs md:text-base">{stat.label}</p>
            </div>
          ))}
        </div>

        <div className="fluid-grid lg:fluid-grid-cols-2 gap-6 md:gap-8">
          {/* Asset Allocation */}
          <div className="fluid-card-panel fluid-scroll-item mobile:px-4 mobile:py-4">
            <div className="flex flex-col md:flex-row md:items-center justify-between mb-4 md:mb-6 space-y-2 md:space-y-0">
              <h2 className="fluid-subheading">Asset Allocation</h2>
              <div className="flex items-center space-x-2 text-fluid-silver">
                <Calendar className="w-4 h-4" />
                <span className="text-sm md:text-base">Current</span>
              </div>
            </div>

            <div className="space-y-3 md:space-y-4">
              {treasuryData.assetsByType.map((asset: any, index: number) => (
                <div key={asset.type} className="flex items-center justify-between">
                  <div className="flex items-center space-x-2 md:space-x-3">
                    <div className={`p-1 md:p-2 rounded-lg bg-opacity-10 ${
                      asset.type === 'Real Estate' ? 'bg-fluid-gold' : 
                      asset.type === 'Thoroughbred' ? 'bg-fluid-emerald' : 'bg-fluid-sapphire'
                    }`}>
                      <asset.icon className="w-3 h-3 md:w-4 md:h-4" />
                    </div>
                    <div>
                      <p className="text-white font-semibold text-sm md:text-base">{asset.type}</p>
                      <p className="fluid-caption text-xs md:text-sm">${(asset.value / 1000000).toFixed(1)}M</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-white font-semibold text-sm md:text-base">{asset.percentage}%</p>
                    <div className="w-20 md:w-32 h-2 bg-fluid-slate rounded-full overflow-hidden">
                      <div 
                        className={`h-full rounded-full ${
                          asset.type === 'Real Estate' ? 'bg-fluid-gold' : 
                          asset.type === 'Thoroughbred' ? 'bg-fluid-emerald' : 'bg-fluid-sapphire'
                        }`}
                        style={{ width: `${asset.percentage}%` }}
                      ></div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Performance Chart */}
          <div className="fluid-card-panel fluid-scroll-item mobile:px-4 mobile:py-4" style={{ transitionDelay: '200ms' }}>
            <div className="flex flex-col md:flex-row md:items-center justify-between mb-4 md:mb-6 space-y-2 md:space-y-0">
              <h2 className="fluid-subheading">Performance Trend</h2>
              <select 
                value={timeframe}
                onChange={(e) => setTimeframe(e.target.value as any)}
                className="px-3 py-2 bg-fluid-charcoal border border-fluid-slate rounded-lg text-white text-sm focus:border-fluid-gold focus:outline-none"
              >
                <option value="1m">1 Month</option>
                <option value="3m">3 Months</option>
                <option value="1y">1 Year</option>
                <option value="all">All Time</option>
              </select>
            </div>

            <div className="space-y-3 md:space-y-4">
              {treasuryData.performance.map((month: any, index: number) => (
                <div key={month.month} className="flex items-center justify-between">
                  <div className="flex items-center space-x-2 md:space-x-4">
                    <div className="w-6 h-6 md:w-8 md:h-8 rounded-lg bg-fluid-gold bg-opacity-20 flex items-center justify-center">
                      <span className="text-fluid-gold text-xs md:text-sm font-semibold">{month.month}</span>
                    </div>
                    <div>
                      <p className="text-white font-semibold text-sm md:text-base">${(month.returns / 1000).toFixed(0)}K Returns</p>
                      <p className="fluid-caption text-xs">Monthly Performance</p>
                    </div>
                  </div>
                  <div className={`flex items-center space-x-1 text-xs md:text-sm font-semibold ${
                    month.growth >= 0 ? 'text-fluid-emerald' : 'text-red-400'
                  }`}>
                    {month.growth >= 0 ? <ArrowUpRight className="w-3 h-3 md:w-4 md:h-4" /> : <ArrowDownRight className="w-3 h-3 md:w-4 md:h-4" />}
                    <span>{month.growth >= 0 ? '+' : ''}{month.growth}%</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Total Returns Summary */}
        <div className="fluid-card-panel mt-6 md:mt-8 fluid-scroll-item mobile:px-4 mobile:py-4" style={{ transitionDelay: '400ms' }}>
          <div className="flex flex-col md:flex-row md:items-center justify-between space-y-3 md:space-y-0">
            <div>
              <h3 className="fluid-subheading">Total Platform Returns</h3>
              <p className="fluid-caption">Cumulative returns distributed to investors</p>
            </div>
            <div className="text-right">
              <p className="text-2xl md:text-3xl font-bold text-fluid-gold">${(treasuryData.totalReturns / 1000000).toFixed(1)}M</p>
              <p className="fluid-caption">Since inception</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

--- src/components/sections/HowItWorksSection.tsx ---
// HowItWorksSection.tsx - "Simple Steps to Invest"
"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { Search, Wallet, TrendingUp, RefreshCw } from 'lucide-react';

const HowItWorksSection = () => {
  const steps = [
    {
      icon: Search,
      title: "Explore Assets",
      description: "Browse curated real-world assets from commercial real estate to fine art",
      color: "emerald"
    },
    {
      icon: Wallet,
      title: "Invest Fractionally",
      description: "Start with as little as $100 and own a piece of elite assets",
      color: "sapphire"
    },
    {
      icon: TrendingUp,
      title: "Earn Returns",
      description: "Receive regular dividends and benefit from asset appreciation",
      color: "amber"
    },
    {
      icon: RefreshCw,
      title: "Trade Securely",
      description: "Buy and sell your fractions on our secure blockchain platform",
      color: "violet"
    }
  ];

  return (
    <section id="how-it-works" className="py-20 bg-slate-50">
      <div className="max-w-7xl mx-auto px-8">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <h2 className="text-fluid-3xl font-bold text-slate-900 mb-4">
            Simple Steps to <span className="text-emerald-600">Start Investing</span>
          </h2>
          <p className="text-fluid-lg text-slate-600 max-w-2xl mx-auto">
            From exploration to ownership - our streamlined process makes elite asset investment accessible to everyone.
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {steps.map((step, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              className="text-center"
            >
              {/* Step Number */}
              <div className="flex justify-center mb-4">
                <div className={`w-12 h-12 rounded-full bg-${step.color}-100 flex items-center justify-center`}>
                  <span className={`text-${step.color}-600 font-bold text-lg`}>{index + 1}</span>
                </div>
              </div>

              {/* Icon */}
              <div className={`w-16 h-16 bg-${step.color}-100 rounded-2xl flex items-center justify-center mx-auto mb-4`}>
                <step.icon className={`w-8 h-8 text-${step.color}-600`} />
              </div>

              {/* Content */}
              <h3 className="text-xl font-semibold text-slate-900 mb-2">
                {step.title}
              </h3>
              <p className="text-slate-600 leading-relaxed">
                {step.description}
              </p>
            </motion.div>
          ))}
        </div>

        {/* Progress Bar */}
        <div className="mt-12 max-w-4xl mx-auto">
          <div className="flex items-center justify-between mb-4">
            {steps.map((step, index) => (
              <div key={index} className="text-center flex-1">
                <div className={`text-sm font-medium text-${step.color}-600`}>
                  Step {index + 1}
                </div>
              </div>
            ))}
          </div>
          <div className="h-2 bg-slate-200 rounded-full overflow-hidden">
            <motion.div
              initial={{ width: "0%" }}
              whileInView={{ width: "100%" }}
              transition={{ duration: 2, ease: "easeOut" }}
              className="h-full bg-gradient-to-r from-emerald-500 via-sapphire-500 to-amber-500"
            />
          </div>
        </div>
      </div>
    </section>
  );
};

export default HowItWorksSection;
--- src/components/sections/OurJourneySection.tsx ---
"use client";

import React from 'react';
import { Lock, Target, Zap, Users, Gem, Rocket, Shield, DollarSign } from 'lucide-react';
import { useRouter } from 'next/navigation';

export default function OurJourneySection() {
  const router = useRouter();

  const story = [
    {
      year: "The Barrier",
      title: "The Elite's Playground",
      description: "$50M luxury assets were locked away. Only 0.1% could play in this exclusive playground. The rest could only watch from outside.",
      icon: Lock,
      color: "text-fluid-gold",
      highlight: "0.1% Access"
    },
    {
      year: "The Breakthrough",
      title: "RWA Tokenization Revolution",
      description: "We discovered the key: Real World Asset tokenization. Transform physical assets into digital tokens. Each token = real ownership.",
      icon: Zap,
      color: "text-fluid-emerald",
      highlight: "Blockchain Magic"
    },
    {
      year: "The Solution",
      title: "Fractional Ownership Unleashed",
      description: "Why own 100% when you can own 0.1%? Split $50M assets into 500,000 tokens. Each token backed by real-world value.",
      icon: Gem,
      color: "text-fluid-sapphire",
      highlight: "$100 = Ownership"
    },
    {
      year: "The Impact",
      title: "Democratization in Action",
      description: "2,470+ investors now own pieces of elite assets. From teachers to tech professionals - all building real wealth together.",
      icon: Users,
      color: "text-fluid-gold",
      highlight: "2,470+ Investors"
    }
  ];

  const whyItWorks = [
    {
      icon: Shield,
      title: "Real Asset Backing",
      description: "Every token represents actual ownership in physical assets"
    },
    {
      icon: DollarSign,
      title: "Proven Returns",
      description: "20-45% historical ROI from real income streams"
    },
    {
      icon: Rocket,
      title: "Instant Liquidity",
      description: "Trade your tokens 24/7 on our platform"
    },
    {
      icon: Target,
      title: "Institutional Grade",
      description: "Same assets institutions invest in, now accessible"
    }
  ];

  const handleJoinRevolution = () => {
    router.push('/marketplace');
  };

  return (
    <div className="fluid-section">
      <div className="fluid-container">
        {/* Exciting Header */}
        <div className="text-center mb-8 md:mb-12 fluid-scroll-item mobile:text-center">
          <div className="inline-flex items-center gap-2 px-4 py-2 bg-fluid-gold bg-opacity-10 border border-fluid-gold/30 rounded-full mb-4">
            <Zap className="w-4 h-4 text-fluid-gold" />
            <span className="text-fluid-gold text-sm font-semibold">REAL WORLD ASSET REVOLUTION</span>
          </div>
          <h1 className="fluid-hero mb-4 md:mb-6">
            Breaking Down <span className="text-fluid-gold">$50M Barriers</span>
          </h1>
          <p className="fluid-body max-w-2xl mx-auto mobile:px-4">
            How we turned exclusive luxury assets into accessible investments through the power of RWA tokenization.
            <span className="text-fluid-gold font-semibold"> Starting at just $100.</span>
          </p>
        </div>

        {/* The Story - Building Excitement */}
        <div className="fluid-card-panel mb-8 md:mb-12 fluid-scroll-item mobile:px-4 mobile:py-4">
          <h2 className="fluid-subheading mb-6 md:mb-8 text-center">
            From <span className="text-fluid-gold">Exclusive</span> to <span className="text-fluid-emerald">Accessible</span>
          </h2>

          <div className="fluid-grid fluid-grid-cols-1 md:fluid-grid-cols-2 lg:fluid-grid-cols-4 gap-4 md:gap-6">
            {story.map((chapter, index) => (
              <div
                key={chapter.year}
                className="fluid-card text-center fluid-scroll-item mobile:p-4 group hover:transform hover:scale-105 transition-all duration-300"
                style={{ transitionDelay: `${index * 150}ms` }}
              >
                {/* Year/Phase Badge */}
                <div className="inline-flex items-center justify-center w-12 h-12 md:w-16 md:h-16 rounded-full bg-fluid-gold bg-opacity-10 border border-fluid-gold/30 mb-3 md:mb-4 group-hover:bg-fluid-gold group-hover:bg-opacity-20 transition-colors">
                  <span className="text-fluid-gold font-bold text-xs md:text-sm text-center leading-tight">
                    {chapter.year}
                  </span>
                </div>

                {/* Icon with Glow Effect */}
                <div className={`flex justify-center mb-3 md:mb-4`}>
                  <div className={`p-2 md:p-3 rounded-xl bg-opacity-10 ${chapter.color.replace('text-', 'bg-')} group-hover:bg-opacity-20 transition-all`}>
                    <chapter.icon className={`w-6 h-6 md:w-8 md:h-8 ${chapter.color}`} />
                  </div>
                </div>

                {/* Highlight Badge */}
                <div className="inline-flex items-center px-2 py-1 bg-black bg-opacity-30 rounded-full mb-2 md:mb-3 border border-fluid-gold/20">
                  <span className="text-fluid-gold text-xs font-semibold">{chapter.highlight}</span>
                </div>

                <h3 className="text-lg md:text-xl font-bold text-white mb-2 md:mb-3 group-hover:text-fluid-gold transition-colors">
                  {chapter.title}
                </h3>
                <p className="fluid-caption text-sm leading-relaxed">
                  {chapter.description}
                </p>
              </div>
            ))}
          </div>
        </div>

        {/* Why RWA Tokenization Works */}
        <div className="fluid-card-panel mb-8 md:mb-12 fluid-scroll-item mobile:px-4 mobile:py-4">
          <h2 className="fluid-subheading mb-6 md:mb-8 text-center">
            The <span className="text-fluid-gold">Magic</span> Behind RWA Tokenization
          </h2>

          <div className="fluid-grid fluid-grid-cols-1 md:fluid-grid-cols-2 lg:fluid-grid-cols-4 gap-4 md:gap-6">
            {whyItWorks.map((feature, index) => (
              <div
                key={feature.title}
                className="fluid-card text-center fluid-scroll-item mobile:p-4"
                style={{ transitionDelay: `${index * 100}ms` }}
              >
                <div className="flex justify-center mb-3 md:mb-4">
                  <div className="p-3 md:p-4 rounded-xl bg-fluid-gold bg-opacity-10 border border-fluid-gold/20">
                    <feature.icon className="w-6 h-6 md:w-8 md:h-8 text-fluid-gold" />
                  </div>
                </div>
                <h3 className="text-white font-semibold text-sm md:text-base mb-2">
                  {feature.title}
                </h3>
                <p className="fluid-caption text-xs">
                  {feature.description}
                </p>
              </div>
            ))}
          </div>
        </div>

        {/* The $100 Revolution */}
        <div className="fluid-card-panel text-center fluid-scroll-item mobile:px-4 mobile:py-6 bg-gradient-to-br from-fluid-gold/5 to-fluid-emerald/5 border border-fluid-gold/20">
          <div className="max-w-2xl mx-auto">
            <DollarSign className="w-12 h-12 md:w-16 md:h-16 text-fluid-gold mx-auto mb-4 md:mb-6" />
            <h3 className="fluid-subheading mb-3 md:mb-4">
              The <span className="text-fluid-gold">$100</span> Revolution
            </h3>
            <p className="fluid-body mb-4 md:mb-6">
              What institutions spend millions to access, you can now own for <span className="text-fluid-gold font-semibold">just $100</span>.
              This isn't just investing - it's a movement. A revolution in asset ownership.
            </p>
            <div className="flex flex-col sm:flex-row gap-3 justify-center">
              <button 
                onClick={handleJoinRevolution}
                className="btn-fluid text-sm px-6 py-3 hover:scale-105 transition-transform"
              >
                Join the Revolution
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
--- src/components/sections/PlatformStats.tsx ---
"use client";

import React from 'react';
import { Shield, Users, TrendingUp, DollarSign } from 'lucide-react';

export default function PlatformStats() {
  const stats = [
    {
      icon: DollarSign,
      value: "$15.4M+",
      label: "Assets Under Management",
      description: "Total platform value"
    },
    {
      icon: Users,
      value: "1,247+",
      label: "Active Investors",
      description: "Growing community"
    },
    {
      icon: TrendingUp,
      value: "32.5%",
      label: "Average ROI",
      description: "Historical returns"
    },
    {
      icon: Shield,
      value: "100%",
      label: "Secure & Verified",
      description: "Asset verification"
    }
  ];

  return (
    <section className="fluid-section">
      <div className="fluid-container">
        <div className="text-center mb-8 md:mb-12 fluid-scroll-item mobile:text-center">
          <h2 className="fluid-heading">
            Trusted by <span className="text-fluid-gold">Thousands</span>
          </h2>
          <p className="fluid-body max-w-2xl mx-auto mobile:px-4">
            Real results from real investors. Join the movement democratizing elite asset ownership.
          </p>
        </div>

        <div className="fluid-grid fluid-grid-cols-2 lg:fluid-grid-cols-4 gap-4 md:gap-6">
          {stats.map((stat, index) => (
            <div
              key={stat.label}
              className="fluid-card text-center fluid-scroll-item mobile:p-4"
              style={{ transitionDelay: `${index * 100}ms` }}
            >
              <div className="flex justify-center mb-3 md:mb-4">
                <div className="p-3 md:p-4 rounded-xl bg-fluid-gold bg-opacity-10 border border-fluid-gold/20">
                  <stat.icon className="w-6 h-6 md:w-8 md:h-8 text-fluid-gold" />
                </div>
              </div>
              <div className="text-2xl md:text-3xl font-bold text-white mb-2">
                {stat.value}
              </div>
              <h3 className="text-white font-semibold text-sm md:text-base mb-1">
                {stat.label}
              </h3>
              <p className="fluid-caption text-xs">
                {stat.description}
              </p>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
}

--- src/components/sections/ProblemSection.tsx ---
// ProblemSection.tsx - "Why It Matters"
"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { Lock, X, Check, ArrowRight } from 'lucide-react';

const ProblemSection = () => {
  return (
    <section className="py-20 bg-white">
      <div className="max-w-7xl mx-auto px-8">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <h2 className="text-fluid-3xl font-bold text-slate-900 mb-4">
            For too long, wealth creation was <span className="text-rose-600">locked behind closed doors</span>
          </h2>
          <p className="text-fluid-lg text-slate-600 max-w-3xl mx-auto">
            Traditional investment opportunities have been reserved for the privileged few, leaving everyday investors on the sidelines.
          </p>
        </motion.div>

        {/* Split Screen Concept */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
          {/* Left Side - The Problem */}
          <motion.div
            initial={{ opacity: 0, x: -30 }}
            whileInView={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8 }}
            className="space-y-6"
          >
            <div className="flex items-start space-x-4">
              <div className="flex-shrink-0 w-12 h-12 bg-rose-100 rounded-full flex items-center justify-center">
                <Lock className="w-6 h-6 text-rose-600" />
              </div>
              <div>
                <h3 className="text-xl font-semibold text-slate-900 mb-2">High Barriers to Entry</h3>
                <p className="text-slate-600">
                  Minimum investments of $50,000+ exclude 95% of potential investors from premium asset classes.
                </p>
              </div>
            </div>

            <div className="flex items-start space-x-4">
              <div className="flex-shrink-0 w-12 h-12 bg-rose-100 rounded-full flex items-center justify-center">
                <X className="w-6 h-6 text-rose-600" />
              </div>
              <div>
                <h3 className="text-xl font-semibold text-slate-900 mb-2">Limited Access</h3>
                <p className="text-slate-600">
                  Exclusive networks and private deals keep the best opportunities away from public markets.
                </p>
              </div>
            </div>

            <div className="flex items-start space-x-4">
              <div className="flex-shrink-0 w-12 h-12 bg-rose-100 rounded-full flex items-center justify-center">
                <Lock className="w-6 h-6 text-rose-600" />
              </div>
              <div>
                <h3 className="text-xl font-semibold text-slate-900 mb-2">Complex Processes</h3>
                <p className="text-slate-600">
                  Lengthy paperwork, legal hurdles, and complex due diligence create unnecessary friction.
                </p>
              </div>
            </div>
          </motion.div>

          {/* Right Side - Luxury vs Accessibility Visual */}
          <motion.div
            initial={{ opacity: 0, x: 30 }}
            whileInView={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8 }}
            className="relative"
          >
            <div className="bg-gradient-to-br from-slate-900 to-slate-800 rounded-2xl p-8 text-white">
              <div className="text-center mb-8">
                <div className="w-16 h-16 bg-amber-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl font-bold">1%</span>
                </div>
                <h3 className="text-xl font-semibold mb-2">The Privileged Few</h3>
                <p className="text-slate-300">Access to elite investment opportunities</p>
              </div>

              <div className="space-y-4">
                {['Commercial Real Estate', 'Private Equity', 'Fine Art', 'Venture Capital'].map((asset, index) => (
                  <div key={index} className="flex items-center justify-between py-2 border-b border-slate-700 last:border-b-0">
                    <span className="text-slate-300">{asset}</span>
                    <Check className="w-5 h-5 text-emerald-400" />
                  </div>
                ))}
              </div>
            </div>

            {/* VS Separator */}
            <div className="absolute -left-4 top-1/2 transform -translate-y-1/2">
              <div className="w-8 h-8 bg-rose-500 rounded-full flex items-center justify-center">
                <span className="text-white text-sm font-bold">VS</span>
              </div>
            </div>

            <div className="bg-gradient-to-br from-slate-100 to-white rounded-2xl p-8 border border-slate-200 mt-8">
              <div className="text-center mb-8">
                <div className="w-16 h-16 bg-slate-300 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl font-bold text-slate-700">99%</span>
                </div>
                <h3 className="text-xl font-semibold text-slate-900 mb-2">The Rest of Us</h3>
                <p className="text-slate-600">Limited to traditional public markets</p>
              </div>

              <div className="space-y-4">
                {['Stocks', 'Bonds', 'ETFs', 'Mutual Funds'].map((asset, index) => (
                  <div key={index} className="flex items-center justify-between py-2 border-b border-slate-200 last:border-b-0">
                    <span className="text-slate-600">{asset}</span>
                    <X className="w-5 h-5 text-rose-400" />
                  </div>
                ))}
              </div>
            </div>
          </motion.div>
        </div>

        {/* Call to Action */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
          className="text-center mt-16"
        >
          <p className="text-fluid-lg text-slate-700 mb-6">
            It's time to break down these barriers and democratize wealth creation.
          </p>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="bg-gradient-to-r from-emerald-600 to-sapphire-600 text-white px-8 py-4 rounded-full font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-300 flex items-center space-x-2 mx-auto"
            onClick={() => {
              document.getElementById('solution')?.scrollIntoView({ behavior: 'smooth' });
            }}
          >
            <span>Discover the Solution</span>
            <ArrowRight className="w-5 h-5" />
          </motion.button>
        </motion.div>
      </div>
    </section>
  );
};

export default ProblemSection;
--- src/components/sections/SolutionSection.tsx ---
// SolutionSection.tsx - "Access for All"
"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { Shield, Users, Zap, BarChart3 } from 'lucide-react';

const SolutionSection = () => {
  const valueProps = [
    {
      icon: Shield,
      title: "Institutional-Grade Assets",
      description: "Access carefully vetted commercial real estate, private equity, and fine art investments previously available only to institutions.",
      color: "emerald"
    },
    {
      icon: Users,
      title: "Collective Ownership",
      description: "Pool resources with thousands of investors to acquire assets that would be impossible to own individually.",
      color: "sapphire"
    },
    {
      icon: Zap,
      title: "Blockchain Security",
      description: "Every transaction is recorded on an immutable blockchain, ensuring transparency and security for all investors.",
      color: "amber"
    },
    {
      icon: BarChart3,
      title: "Proven Returns",
      description: "Benefit from historically stable returns of real-world assets while diversifying your investment portfolio.",
      color: "violet"
    }
  ];

  return (
    <section id="solution" className="py-20 bg-gradient-to-br from-slate-50 to-emerald-50/30">
      <div className="max-w-7xl mx-auto px-8">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <h2 className="text-fluid-3xl font-bold text-slate-900 mb-4">
            Real-World Assets. <span className="text-emerald-600">Real Ownership.</span> Real Returns.
          </h2>
          <p className="text-fluid-lg text-slate-600 max-w-3xl mx-auto">
            We're breaking down the barriers to elite asset classes through fractional ownership and blockchain technology.
          </p>
        </motion.div>

        {/* Value Propositions Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16">
          {valueProps.map((prop, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              className="text-center group"
            >
              <div className={`w-20 h-20 bg-${prop.color}-100 rounded-2xl flex items-center justify-center mx-auto mb-6 group-hover:scale-110 transition-transform duration-300`}>
                <prop.icon className={`w-10 h-10 text-${prop.color}-600`} />
              </div>
              
              <h3 className="text-xl font-semibold text-slate-900 mb-4">
                {prop.title}
              </h3>
              
              <p className="text-slate-600 leading-relaxed">
                {prop.description}
              </p>
            </motion.div>
          ))}
        </div>

        {/* Comparison Table */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
          className="bg-white rounded-2xl shadow-lg border border-slate-200 overflow-hidden"
        >
          <div className="grid grid-cols-1 md:grid-cols-3">
            {/* Header */}
            <div className="bg-slate-900 text-white p-8">
              <h3 className="text-xl font-semibold mb-2">Investment Features</h3>
              <p className="text-slate-300">Compare the key differences</p>
            </div>
            
            <div className="bg-emerald-600 text-white p-8">
              <h3 className="text-xl font-semibold mb-2">ASRD Platform</h3>
              <p className="text-emerald-100">Modern Access</p>
            </div>
            
            <div className="bg-slate-700 text-white p-8">
              <h3 className="text-xl font-semibold mb-2">Traditional Way</h3>
              <p className="text-slate-300">Legacy Systems</p>
            </div>

            {/* Rows */}
            {[
              { feature: "Minimum Investment", asrd: "$100", traditional: "$50,000+" },
              { feature: "Asset Access", asrd: "All Investors", traditional: "Accredited Only" },
              { feature: "Ownership Type", asrd: "Fractional Digital", traditional: "Full Physical" },
              { feature: "Liquidity", asrd: "Secondary Market", traditional: "Limited/None" },
              { feature: "Transparency", asrd: "Blockchain Verified", traditional: "Paper Records" }
            ].map((row, index) => (
              <React.Fragment key={index}>
                <div className="p-6 border-b border-slate-200 bg-slate-50">
                  <span className="font-semibold text-slate-900">{row.feature}</span>
                </div>
                <div className="p-6 border-b border-slate-200">
                  <span className="text-emerald-600 font-semibold">{row.asrd}</span>
                </div>
                <div className="p-6 border-b border-slate-200">
                  <span className="text-slate-600">{row.traditional}</span>
                </div>
              </React.Fragment>
            ))}
          </div>
        </motion.div>

        {/* Bottom CTA */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.6 }}
          className="text-center mt-12"
        >
          <p className="text-fluid-lg text-slate-700 mb-6">
            Join thousands of investors who are already building wealth through real-world assets.
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="bg-gradient-to-r from-emerald-600 to-sapphire-600 text-white px-8 py-4 rounded-full font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-300"
            >
              Start Investing Today
            </motion.button>
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="border-2 border-slate-300 text-slate-700 px-8 py-4 rounded-full font-semibold text-lg hover:border-emerald-400 hover:text-emerald-700 transition-all duration-300"
            >
              Learn More
            </motion.button>
          </div>
        </motion.div>
      </div>
    </section>
  );
};

export default SolutionSection;
--- src/components/sections/TestimonialsSection.tsx ---
// Enhanced TestimonialsSection.tsx
"use client";

import React, { useState, useEffect } from 'react';
import { Quote, Star, ChevronLeft, ChevronRight, BadgeCheck, TrendingUp, Shield, Zap } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

export default function TestimonialsSection() {
  const [currentTestimonial, setCurrentTestimonial] = useState(0);

  const testimonials = [
    {
      name: "Sarah Chen",
      role: "Real Estate Investor",
      content: "I never thought I could own a piece of a luxury Dubai property. With just $500, I'm now earning rental income from assets I could only dream of before.",
      investment: "$500",
      returns: "28% ROI",
      avatar: "SC",
      category: "Real Estate",
      verified: true,
      duration: "6 months"
    },
    {
      name: "Marcus Rodriguez",
      role: "Tech Professional",
      content: "The fractional ownership model changed everything for me. I've diversified across thoroughbreds and real estate with minimal capital.",
      investment: "$1,200",
      returns: "35% ROI",
      avatar: "MR",
      category: "Diversified Portfolio",
      verified: true,
      duration: "1 year"
    },
    {
      name: "Jennifer Kim",
      role: "Teacher & Investor",
      content: "As an educator, I never had access to these opportunities. Now I'm building real wealth alongside my teaching career.",
      investment: "$250",
      returns: "22% ROI",
      avatar: "JK",
      category: "Alternative Assets",
      verified: true,
      duration: "4 months"
    },
    {
      name: "David Thompson",
      role: "Retired Engineer",
      content: "The platform's transparency and blockchain security gave me confidence to invest my retirement savings. The returns have exceeded my expectations.",
      investment: "$5,000",
      returns: "31% ROI",
      avatar: "DT",
      category: "Commercial Real Estate",
      verified: true,
      duration: "2 years"
    }
  ];

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTestimonial((prev) => (prev + 1) % testimonials.length);
    }, 6000);
    return () => clearInterval(interval);
  }, [testimonials.length]);

  const nextTestimonial = () => {
    setCurrentTestimonial((prev) => (prev + 1) % testimonials.length);
  };

  const prevTestimonial = () => {
    setCurrentTestimonial((prev) => (prev - 1 + testimonials.length) % testimonials.length);
  };

  return (
    <section className="py-20 bg-gradient-to-br from-slate-900 to-sapphire-900">
      <div className="max-w-7xl mx-auto px-8">
        {/* Enhanced Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <div className="inline-flex items-center space-x-2 bg-amber-500/10 border border-amber-500/20 rounded-full px-4 py-2 mb-6">
            <Star className="w-4 h-4 text-amber-400" />
            <span className="text-amber-400 text-sm font-medium">Rated 4.9/5 by Investors</span>
          </div>
          
          <h2 className="text-fluid-3xl font-bold text-white mb-4">
            Trusted by <span className="text-amber-400">Thousands</span> of Investors
          </h2>
          
          <p className="text-fluid-lg text-slate-300 max-w-3xl mx-auto leading-relaxed">
            Discover why investors worldwide are choosing ASRD to build their wealth through fractional ownership of elite real-world assets.
          </p>
        </motion.div>

        <div className="max-w-6xl mx-auto">
          {/* Main Testimonial Card */}
          <div className="bg-gradient-to-br from-slate-800 to-slate-900 rounded-3xl border border-slate-700 shadow-2xl overflow-hidden">
            <div className="grid grid-cols-1 lg:grid-cols-3">
              {/* Left Side - Testimonial Content */}
              <div className="lg:col-span-2 p-8 lg:p-12">
                <AnimatePresence mode="wait">
                  <motion.div
                    key={currentTestimonial}
                    initial={{ opacity: 0, x: 20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: -20 }}
                    transition={{ duration: 0.5 }}
                    className="h-full flex flex-col"
                  >
                    {/* Quote Icon */}
                    <div className="mb-6">
                      <Quote className="w-12 h-12 text-amber-400 opacity-50" />
                    </div>

                    {/* Content */}
                    <div className="flex-1">
                      <p className="text-xl lg:text-2xl text-white leading-relaxed mb-8 italic">
                        "{testimonials[currentTestimonial].content}"
                      </p>

                      {/* Investor Info */}
                      <div className="flex items-center space-x-4 mb-6">
                        <div className="w-16 h-16 bg-gradient-to-r from-amber-500 to-amber-600 rounded-full flex items-center justify-center text-white font-bold text-lg">
                          {testimonials[currentTestimonial].avatar}
                        </div>
                        <div>
                          <div className="flex items-center space-x-2">
                            <h4 className="text-white font-semibold text-xl">
                              {testimonials[currentTestimonial].name}
                            </h4>
                            {testimonials[currentTestimonial].verified && (
                              <BadgeCheck className="w-5 h-5 text-emerald-400" />
                            )}
                          </div>
                          <p className="text-slate-300">
                            {testimonials[currentTestimonial].role}
                          </p>
                          <div className="flex items-center space-x-2 mt-1">
                            <span className="text-amber-400 text-sm font-medium">
                              {testimonials[currentTestimonial].category}
                            </span>
                            <span className="text-slate-500">•</span>
                            <span className="text-slate-400 text-sm">
                              {testimonials[currentTestimonial].duration}
                            </span>
                          </div>
                        </div>
                      </div>

                      {/* Stats */}
                      <div className="flex items-center space-x-6">
                        <div className="flex items-center space-x-2">
                          <TrendingUp className="w-5 h-5 text-emerald-400" />
                          <div>
                            <div className="text-sm text-slate-400">Investment</div>
                            <div className="text-white font-semibold">{testimonials[currentTestimonial].investment}</div>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Zap className="w-5 h-5 text-amber-400" />
                          <div>
                            <div className="text-sm text-slate-400">Returns</div>
                            <div className="text-white font-semibold">{testimonials[currentTestimonial].returns}</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                </AnimatePresence>

                {/* Navigation */}
                <div className="flex items-center justify-between mt-8 pt-8 border-t border-slate-700">
                  <div className="flex items-center space-x-2">
                    {testimonials.map((_, index) => (
                      <button
                        key={index}
                        onClick={() => setCurrentTestimonial(index)}
                        className={`w-3 h-3 rounded-full transition-all ${
                          index === currentTestimonial 
                            ? 'bg-amber-400' 
                            : 'bg-slate-600 hover:bg-slate-500'
                        }`}
                      />
                    ))}
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    <button
                      onClick={prevTestimonial}
                      className="p-3 rounded-full bg-slate-700 hover:bg-slate-600 transition-colors group"
                    >
                      <ChevronLeft className="w-5 h-5 text-slate-300 group-hover:text-white" />
                    </button>
                    <button
                      onClick={nextTestimonial}
                      className="p-3 rounded-full bg-slate-700 hover:bg-slate-600 transition-colors group"
                    >
                      <ChevronRight className="w-5 h-5 text-slate-300 group-hover:text-white" />
                    </button>
                  </div>
                </div>
              </div>

              {/* Right Side - Trust Indicators */}
              <div className="bg-slate-800/50 p-8 lg:p-12 border-t lg:border-t-0 lg:border-l border-slate-700">
                <h3 className="text-xl font-semibold text-white mb-6">Why Investors Trust Us</h3>
                
                <div className="space-y-6">
                  {[
                    { icon: Shield, title: "Bank-Grade Security", desc: "Military-grade encryption and blockchain verification" },
                    { icon: TrendingUp, title: "Proven Track Record", desc: "Consistent returns across all asset classes" },
                    { icon: BadgeCheck, title: "Fully Verified Assets", desc: "Every asset undergoes rigorous due diligence" },
                    { icon: Zap, title: "Instant Settlements", desc: "Blockchain-powered fast and secure transactions" }
                  ].map((item, index) => (
                    <div key={index} className="flex items-start space-x-3">
                      <div className="flex-shrink-0 w-10 h-10 bg-emerald-500/10 rounded-lg flex items-center justify-center">
                        <item.icon className="w-5 h-5 text-emerald-400" />
                      </div>
                      <div>
                        <h4 className="text-white font-semibold text-sm mb-1">{item.title}</h4>
                        <p className="text-slate-400 text-xs">{item.desc}</p>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Overall Rating */}
                <div className="mt-8 p-4 bg-slate-900/50 rounded-xl">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-white font-semibold">Overall Rating</span>
                    <div className="flex items-center space-x-1">
                      {[...Array(5)].map((_, i) => (
                        <Star key={i} className="w-4 h-4 text-amber-400 fill-current" />
                      ))}
                    </div>
                  </div>
                  <div className="text-slate-400 text-sm">4.9/5 from 2,500+ reviews</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
--- src/components/PerformanceOptimizer.tsx ---
'use client'
import { useEffect, useState } from 'react'

interface PerformanceOptimizerProps {
  children: React.ReactNode
}

export default function PerformanceOptimizer({ children }: PerformanceOptimizerProps) {
  const [isSlowDevice, setIsSlowDevice] = useState(false)
  const [reduceMotion, setReduceMotion] = useState(false)

  useEffect(() => {
    // Check for slow devices
    const isSlow = !window.matchMedia('(min-width: 1024px)').matches && 
                  navigator.hardwareConcurrency <= 4
    
    // Check for reduced motion preference
    const motionQuery = window.matchMedia('(prefers-reduced-motion: reduce)')
    setReduceMotion(motionQuery.matches)

    setIsSlowDevice(isSlow)

    // Listen for changes in motion preference
    const handleMotionChange = (e: MediaQueryListEvent) => {
      setReduceMotion(e.matches)
    }
    
    motionQuery.addEventListener('change', handleMotionChange)
    return () => motionQuery.removeEventListener('change', handleMotionChange)
  }, [])

  return (
    <div className={`performance-optimized ${isSlowDevice ? 'reduced-animations' : ''} ${reduceMotion ? 'no-animations' : ''}`}>
      {children}
    </div>
  )
}

--- src/components/DebugAssets.tsx ---
"use client";

import { useEffect } from 'react';
import { useApp } from '@/contexts/AppContext';

export default function DebugAssets() {
  const { userPortfolio } = useApp();

  useEffect(() => {
    console.log('=== ASSETS DEBUG ===');
    console.log('User Portfolio:', userPortfolio);
    console.log('===================');
  }, [userPortfolio]);

  return null; // This component doesn't render anything
}

--- src/app/home/page.tsx ---
// src/app/home/page.tsx - Updated with new flow
"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import FluidHero from '@/components/sections/FluidHero'; // This is now EnhancedHero content
import ProblemSection from '@/components/sections/ProblemSection';
import SolutionSection from '@/components/sections/SolutionSection';
import HowItWorksSection from '@/components/sections/HowItWorksSection';
import FeaturedAssetsSection from '@/components/sections/FeaturedAssetsSection';
import PlatformStats from '@/components/sections/PlatformStats';
import TestimonialsSection from '@/components/sections/TestimonialsSection';
import FinalCTASection from '@/components/sections/FinalCTASection';

export default function HomePage() {
  return (
    <FluidLayout showHeader={true}>
      {/* 1. Enhanced Hero Section */}
      <FluidHero />

      {/* 2. Problem Section */}
      <section className="fluid-section-sm bg-white">
        <div className="fluid-container">
          <ProblemSection />
        </div>
      </section>

      {/* 3. Solution Section */}
      <section className="fluid-section-sm bg-slate-50">
        <div className="fluid-container">
          <SolutionSection />
        </div>
      </section>

      {/* 4. How It Works Section */}
      <section className="fluid-section-sm bg-white">
        <div className="fluid-container">
          <HowItWorksSection />
        </div>
      </section>

      {/* 5. Featured Assets Section */}
      <section className="fluid-section-sm bg-fluid-charcoal">
        <div className="fluid-container">
          <FeaturedAssetsSection />
        </div>
      </section>

      {/* 6. Platform Statistics */}
      <PlatformStats />

      {/* 7. Testimonials Section */}
      <TestimonialsSection />

      {/* 8. Final CTA Section */}
      <FinalCTASection />
    </FluidLayout>
  );
}
--- src/app/dashboard/page.tsx ---
"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import FluidDashboard from '@/components/sections/FluidDashboard';

export default function DashboardPage() {
  return (
    <FluidLayout>
      <FluidDashboard />
    </FluidLayout>
  );
}

--- src/app/marketplace/page.tsx ---
"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import FluidMarketplace from '@/components/sections/FluidMarketplace';

export default function MarketplacePage() {
  return (
    <FluidLayout>
      <FluidMarketplace />
    </FluidLayout>
  );
}

--- src/app/dao/page.tsx ---
"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import FluidDAO from '@/components/sections/FluidDAO';

export default function DAOPage() {
  return (
    <FluidLayout>
      <FluidDAO />
    </FluidLayout>
  );
}

--- src/app/treasury/page.tsx ---
"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import FluidTreasury from '@/components/sections/FluidTreasury';

export default function TreasuryPage() {
  return (
    <FluidLayout>
      <FluidTreasury />
    </FluidLayout>
  );
}

--- src/app/our-journey/page.tsx ---
"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import OurJourneySection from '@/components/sections/OurJourneySection';

export default function OurJourneyPage() {
  return (
    <FluidLayout>
      <OurJourneySection />
    </FluidLayout>
  );
}

--- src/app/api/assets/route.ts ---
import { NextResponse } from 'next/server'
import { mockAssets, ownedAssets } from '@/data/mockData'

export async function GET() {
  return NextResponse.json({
    assets: mockAssets,
    owned: ownedAssets
  })
}

--- src/app/api/buy/route.ts ---
import { NextResponse } from 'next/server'

export async function POST(request: Request) {
  const { assetId, price } = await request.json()
  
  return NextResponse.json({
    success: true,
    message: 'Asset purchased successfully!',
    data: {
      assetId,
      price,
      transactionHash: '0x' + Math.random().toString(16).slice(2)
    }
  })
}

--- src/app/api/dao/route.ts ---
import { NextResponse } from 'next/server'
import { mockProposals } from '@/data/mockData'

export async function GET() {
  return NextResponse.json({
    proposals: mockProposals,
    totalProposals: mockProposals.length,
    activeProposals: mockProposals.filter(p => p.status === 'active').length
  })
}

export async function POST(request: Request) {
  const body = await request.json()
  
  // Simulate voting
  return NextResponse.json({
    success: true,
    message: 'Vote recorded successfully',
    data: body
  })
}

--- src/app/api/treasury/route.ts ---
import { NextResponse } from 'next/server'

export async function GET() {
  // Mock treasury data
  const treasuryData = {
    totalValue: 15420000,
    availableFunds: 3250000,
    allocatedFunds: 12170000,
    monthlyIncome: 425000,
    monthlyExpenses: 125000,
    netCashFlow: 300000,
    assets: [
      { name: 'Real Estate', value: 8500000, percentage: 55.2 },
      { name: 'Thoroughbred', value: 3200000, percentage: 20.8 },
      { name: 'Marine Assets', value: 2200000, percentage: 14.3 },
      { name: 'Other Investments', value: 1520000, percentage: 9.7 }
    ]
  }

  return NextResponse.json(treasuryData)
}

--- src/data/demoData.ts ---
export const demoInvestorData = {
  platformStats: {
    totalAssets: 47,
    totalValue: 18750000,
    averageROI: 34.2,
    activeInvestors: 1847,
    totalReturns: 6250000,
    platformVolume: 45200000,
    successRate: 100,
    avgInvestment: 12500
  },

  featuredInvestors: [
    { name: "Tech Venture Fund", invested: 2500000, returns: 875000, since: "2023" },
    { name: "Family Office Partners", invested: 1800000, returns: 612000, since: "2023" },
    { name: "Wealth Management Group", invested: 3200000, returns: 1184000, since: "2022" }
  ],

  performanceMetrics: [
    { quarter: "Q1 2023", roi: 28.5, volume: 8500000 },
    { quarter: "Q2 2023", roi: 31.2, volume: 11200000 },
    { quarter: "Q3 2023", roi: 35.8, volume: 14500000 },
    { quarter: "Q4 2023", roi: 41.3, volume: 18200000 }
  ],

  assetPerformance: [
    { type: "Real Estate", avgROI: 32.5, successRate: 100 },
    { type: "Thoroughbred", avgROI: 45.2, successRate: 100 },
    { type: "Marine Assets", avgROI: 41.3, successRate: 100 },
    { type: "Aviation", avgROI: 38.7, successRate: 100 },
    { type: "Venture", avgROI: 67.8, successRate: 85 }
  ]
};

--- src/data/mockData.ts ---
// ULTIMATE ENHANCED MOCK DATA - SATISFIES ALL COMPONENTS
// Mock data for the application

export const mockProposals = [
  {
    id: 1,
    title: "Expand Dubai Real Estate Portfolio",
    description: "Acquire additional luxury properties in Palm Jumeirah to meet growing investor demand",
    votesFor: 1250,
    votesAgainst: 320,
    status: "active",
    endDate: "2025-02-15"
  },
  {
    id: 2,
    title: "Launch New Thoroughbred Fund",
    description: "Create specialized fund for champion racehorses with proven track records",
    votesFor: 890,
    votesAgainst: 210,
    status: "active",
    endDate: "2025-02-20"
  },
  {
    id: 3,
    title: "Upgrade Yacht Fleet Amenities",
    description: "Invest in premium upgrades for Mediterranean superyacht to increase charter rates",
    votesFor: 670,
    votesAgainst: 150,
    status: "active",
    endDate: "2025-02-25"
  }
];

export const mockAssets = [
  {
    id: 1,
    title: "Dubai Luxury Villa",
    type: "Real Estate",
    category: "Luxury Residential",
    location: "Palm Jumeirah, Dubai",
    value: 2500000,
    totalValue: 2500000,
    roi: "32.5%",
    expectedROI: "32.5%",
    timeline: "36 months",
    investmentHorizon: "36 months",
    minInvestment: 100,
    status: "Available",
    description: "Exclusive waterfront villa in the prestigious Palm Jumeirah. Features private beach access, infinity pool, and panoramic views of the Arabian Gulf. Managed by luxury hospitality experts with proven rental income history.",
    
    // Enhanced properties for ALL COMPONENTS
    badges: [
      { label: "Featured", color: "amber" },
      { label: "High Demand", color: "rose" },
      { label: "Verified", color: "emerald" }
    ],
    performance: "+15.2%",
    timeLeft: "45 days",
    investorCount: 234,
    sharesAvailable: 100,
    sharesSold: 78,
    enhanced: true,
    
    // NEW PROPERTIES FOR EnhancedAssetCard COMPATIBILITY
    investment: 50000,           // For EnhancedAssetCard & FluidDashboard
    shares: 2.0,                 // For EnhancedAssetCard & FluidDashboard
    image: "/assets/dubai-villa.jpg",
    progress: 78,
    riskLevel: "Medium",
    liquidity: "High",
    tags: ["Luxury", "High ROI", "Verified", "Rental Income"],
    currency: "USD"
  },
  {
    id: 2,
    title: "Champion Thoroughbred",
    type: "Thoroughbred",
    category: "Sports & Racing",
    location: "Kentucky, USA",
    value: 1800000,
    totalValue: 1800000,
    roi: "45.2%",
    expectedROI: "45.2%",
    timeline: "24 months",
    investmentHorizon: "24 months",
    minInvestment: 100,
    status: "Available",
    description: "Elite racehorse with championship pedigree and multiple stakes wins. Under professional training with top-tier racing schedule. Includes breeding rights and insurance coverage.",
    
    // Enhanced properties
    badges: [
      { label: "Exclusive", color: "violet" },
      { label: "Limited Time", color: "sapphire" }
    ],
    performance: "+8.7%",
    timeLeft: "21 days",
    investorCount: 189,
    sharesAvailable: 100,
    sharesSold: 65,
    enhanced: true,
    
    // NEW PROPERTIES FOR EnhancedAssetCard COMPATIBILITY
    investment: 35000,
    shares: 1.94,
    image: "/assets/thoroughbred.jpg",
    progress: 65,
    riskLevel: "High",
    liquidity: "Medium",
    tags: ["Sports", "Racing", "Exclusive", "Breeding Rights"],
    currency: "USD"
  },
  {
    id: 3,
    title: "Mediterranean Superyacht",
    type: "Marine Asset",
    category: "Luxury Marine",
    location: "French Riviera",
    value: 4200000,
    totalValue: 4200000,
    roi: "41.3%",
    expectedROI: "41.3%",
    timeline: "48 months",
    investmentHorizon: "48 months",
    minInvestment: 100,
    status: "Available",
    description: "Luxury 45-meter superyacht available for charter in the Mediterranean. Features helipad, cinema, spa, and professional crew. High-demand seasonal charter market with premium rates.",
    
    // Enhanced properties
    badges: [
      { label: "Top Performer", color: "cyan" },
      { label: "Verified", color: "emerald" },
      { label: "Featured", color: "amber" }
    ],
    performance: "+12.4%",
    timeLeft: "15 days",
    investorCount: 156,
    sharesAvailable: 100,
    sharesSold: 89,
    enhanced: true,
    
    // NEW PROPERTIES FOR EnhancedAssetCard COMPATIBILITY
    investment: 25000,
    shares: 0.6,
    image: "/assets/superyacht.jpg",
    progress: 89,
    riskLevel: "Medium",
    liquidity: "Low",
    tags: ["Luxury", "Marine", "Charter", "Seasonal"],
    currency: "USD"
  },
  {
    id: 4,
    title: "Private Jet Portfolio",
    type: "Aviation",
    category: "Business Aviation",
    location: "Global Operations",
    value: 3500000,
    totalValue: 3500000,
    roi: "38.7%",
    expectedROI: "38.7%",
    timeline: "60 months",
    investmentHorizon: "60 months",
    minInvestment: 100,
    status: "Available",
    description: "Diverse fleet of business jets available for charter and leaseback. Includes maintenance programs and certified operators. Serving corporate and private clients worldwide.",
    
    // Enhanced properties
    badges: [
      { label: "Blockchain Verified", color: "emerald" },
      { label: "High Demand", color: "rose" }
    ],
    performance: "+9.3%",
    timeLeft: "30 days",
    investorCount: 201,
    sharesAvailable: 100,
    sharesSold: 72,
    enhanced: true,
    
    // NEW PROPERTIES FOR EnhancedAssetCard COMPATIBILITY
    investment: 45000,
    shares: 1.29,
    image: "/assets/private-jet.jpg",
    progress: 72,
    riskLevel: "Medium",
    liquidity: "Medium",
    tags: ["Aviation", "Business", "Global", "Leaseback"],
    currency: "USD"
  },
  {
    id: 5,
    title: "Tech Startup Venture",
    type: "Venture Capital",
    category: "Technology",
    location: "Silicon Valley",
    value: 1200000,
    totalValue: 1200000,
    roi: "52.1%",
    expectedROI: "52.1%",
    timeline: "72 months",
    investmentHorizon: "72 months",
    minInvestment: 100,
    status: "Available",
    description: "Promising AI technology startup with patented algorithms and enterprise clients. Strong growth trajectory with recurring revenue model and expansion plans.",
    
    // Enhanced properties
    badges: [
      { label: "High Growth", color: "rose" },
      { label: "Exclusive Access", color: "violet" },
      { label: "Verified", color: "emerald" }
    ],
    performance: "+18.6%",
    timeLeft: "7 days",
    investorCount: 178,
    sharesAvailable: 100,
    sharesSold: 81,
    enhanced: true,
    
    // NEW PROPERTIES FOR EnhancedAssetCard COMPATIBILITY
    investment: 20000,
    shares: 1.67,
    image: "/assets/tech-startup.jpg",
    progress: 81,
    riskLevel: "High",
    liquidity: "Low",
    tags: ["Technology", "AI", "Startup", "High Growth"],
    currency: "USD"
  },
  {
    id: 6,
    title: "Luxury Watch Collection",
    type: "Luxury Goods",
    category: "Collectibles",
    location: "Geneva, Switzerland",
    value: 950000,
    totalValue: 950000,
    roi: "28.9%",
    expectedROI: "28.9%",
    timeline: "24 months",
    investmentHorizon: "24 months",
    minInvestment: 100,
    status: "Available",
    description: "Curated collection of rare and vintage luxury timepieces from top Swiss manufacturers. Includes limited editions and historically significant pieces with appreciation potential.",
    
    // Enhanced properties
    badges: [
      { label: "Limited Edition", color: "sapphire" },
      { label: "Verified", color: "emerald" }
    ],
    performance: "+6.8%",
    timeLeft: "14 days",
    investorCount: 145,
    sharesAvailable: 100,
    sharesSold: 67,
    enhanced: true,
    
    // NEW PROPERTIES FOR EnhancedAssetCard COMPATIBILITY
    investment: 15000,
    shares: 1.58,
    image: "/assets/luxury-watches.jpg",
    progress: 67,
    riskLevel: "Low",
    liquidity: "Medium",
    tags: ["Luxury", "Collectibles", "Watches", "Limited"],
    currency: "USD"
  },
  {
    id: 7,
    title: "Commercial Office Tower",
    type: "Real Estate",
    category: "Commercial",
    location: "Manhattan, NYC",
    value: 8500000,
    totalValue: 8500000,
    roi: "22.4%",
    expectedROI: "22.4%",
    timeline: "120 months",
    investmentHorizon: "120 months",
    minInvestment: 100,
    status: "Available",
    description: "Prime commercial real estate in Manhattan with AAA-rated tenants and long-term leases. Stable income generation with annual appreciation.",
    
    // Enhanced properties
    badges: [
      { label: "Stable Income", color: "emerald" },
      { label: "Prime Location", color: "amber" }
    ],
    performance: "+4.2%",
    timeLeft: "60 days",
    investorCount: 312,
    sharesAvailable: 100,
    sharesSold: 92,
    enhanced: true,
    
    // NEW PROPERTIES FOR EnhancedAssetCard COMPATIBILITY
    investment: 75000,
    shares: 0.88,
    image: "/assets/office-tower.jpg",
    progress: 92,
    riskLevel: "Low",
    liquidity: "High",
    tags: ["Commercial", "Real Estate", "Stable", "Prime"],
    currency: "USD"
  },
  {
    id: 8,
    title: "Fine Art Collection",
    type: "Fine Art",
    category: "Art & Collectibles",
    location: "London, UK",
    value: 2800000,
    totalValue: 2800000,
    roi: "35.8%",
    expectedROI: "35.8%",
    timeline: "48 months",
    investmentHorizon: "48 months",
    minInvestment: 100,
    status: "Available",
    description: "Curated collection of contemporary art from emerging and established artists. Includes pieces with proven auction history and museum exhibitions.",
    
    // Enhanced properties
    badges: [
      { label: "Cultural Asset", color: "violet" },
      { label: "Appreciating", color: "rose" },
      { label: "Verified", color: "emerald" }
    ],
    performance: "+11.7%",
    timeLeft: "25 days",
    investorCount: 167,
    sharesAvailable: 100,
    sharesSold: 58,
    enhanced: true,
    
    // NEW PROPERTIES FOR EnhancedAssetCard COMPATIBILITY
    investment: 30000,
    shares: 1.07,
    image: "/assets/fine-art.jpg",
    progress: 58,
    riskLevel: "Medium",
    liquidity: "Low",
    tags: ["Art", "Collectibles", "Cultural", "Appreciating"],
    currency: "USD"
  }
];

export const ownedAssets = [
  {
    id: 1,
    title: "Dubai Luxury Villa",
    type: "Real Estate",
    category: "Luxury Residential",
    location: "Palm Jumeirah, Dubai",
    value: 2500000,
    totalValue: 2500000,
    roi: "32.5%",
    expectedROI: "32.5%",
    timeline: "36 months",
    investmentHorizon: "36 months",
    investment: 50000,
    shares: 2,
    status: "Active",
    nextPayout: "2025-03-15",
    payoutAmount: 4250,
    description: "Your investment in this premium Dubai property generates consistent rental income from luxury tourism and corporate rentals.",
    
    // Enhanced properties
    badges: [
      { label: "Performing", color: "emerald" },
      { label: "Monthly Payout", color: "cyan" }
    ],
    performance: "+15.2%",
    investorCount: 234,
    enhanced: true,
    
    // Additional properties for consistency
    minInvestment: 100,
    sharesAvailable: 100,
    sharesSold: 78,
    timeLeft: "45 days",
    image: "/assets/dubai-villa.jpg",
    progress: 78,
    riskLevel: "Medium",
    liquidity: "High",
    tags: ["Luxury", "High ROI", "Verified", "Rental Income"],
    currency: "USD"
  },
  {
    id: 2,
    title: "Champion Thoroughbred",
    type: "Thoroughbred",
    category: "Sports & Racing",
    location: "Kentucky, USA",
    value: 1800000,
    totalValue: 1800000,
    roi: "45.2%",
    expectedROI: "45.2%",
    timeline: "24 months",
    investmentHorizon: "24 months",
    investment: 35000,
    shares: 1.94,
    status: "Active",
    nextPayout: "2025-04-20",
    payoutAmount: 8500,
    description: "Ownership share in champion racehorse with upcoming major racing events and breeding opportunities.",
    
    // Enhanced properties
    badges: [
      { label: "High Performer", color: "amber" },
      { label: "Seasonal", color: "sapphire" }
    ],
    performance: "+28.7%",
    investorCount: 189,
    enhanced: true,
    
    // Additional properties for consistency
    minInvestment: 100,
    sharesAvailable: 100,
    sharesSold: 65,
    timeLeft: "21 days",
    image: "/assets/thoroughbred.jpg",
    progress: 65,
    riskLevel: "High",
    liquidity: "Medium",
    tags: ["Sports", "Racing", "Exclusive", "Breeding Rights"],
    currency: "USD"
  },
  {
    id: 3,
    title: "Mediterranean Superyacht",
    type: "Marine Asset",
    category: "Luxury Marine",
    location: "French Riviera",
    value: 4200000,
    totalValue: 4200000,
    roi: "41.3%",
    expectedROI: "41.3%",
    timeline: "48 months",
    investmentHorizon: "48 months",
    investment: 25000,
    shares: 0.6,
    status: "Active",
    nextPayout: "2025-02-25",
    payoutAmount: 3200,
    description: "Partial ownership in luxury superyacht generating revenue from high-end charter services in premium Mediterranean locations.",
    
    // Enhanced properties
    badges: [
      { label: "Seasonal", color: "sapphire" },
      { label: "Performing", color: "emerald" }
    ],
    performance: "+12.4%",
    investorCount: 156,
    enhanced: true,
    
    // Additional properties for consistency
    minInvestment: 100,
    sharesAvailable: 100,
    sharesSold: 89,
    timeLeft: "15 days",
    image: "/assets/superyacht.jpg",
    progress: 89,
    riskLevel: "Medium",
    liquidity: "Low",
    tags: ["Luxury", "Marine", "Charter", "Seasonal"],
    currency: "USD"
  }
];

export const platformStats = {
  totalValue: 25420000,
  totalInvestors: 3470,
  averageRoi: "38.7%",
  activeAssets: 36,
  monthlyReturns: 625000,
  totalReturns: 4850000,
  totalAssets: 52
};

// Additional enhanced data for new sections
export const testimonialData = [
  {
    id: 1,
    name: "Sarah Chen",
    role: "Real Estate Investor",
    content: "I never thought I could own a piece of a luxury Dubai property. With just $500, I'm now earning rental income from assets I could only dream of before.",
    investment: "$500",
    returns: "28% ROI",
    avatar: "SC",
    category: "Real Estate",
    verified: true,
    duration: "6 months"
  },
  {
    id: 2,
    name: "Marcus Rodriguez",
    role: "Tech Professional",
    content: "The fractional ownership model changed everything for me. I've diversified across thoroughbreds and real estate with minimal capital.",
    investment: "$1,200",
    returns: "35% ROI",
    avatar: "MR",
    category: "Diversified Portfolio",
    verified: true,
    duration: "1 year"
  },
  {
    id: 3,
    name: "Jennifer Kim",
    role: "Teacher & Investor",
    content: "As an educator, I never had access to these opportunities. Now I'm building real wealth alongside my teaching career.",
    investment: "$250",
    returns: "22% ROI",
    avatar: "JK",
    category: "Alternative Assets",
    verified: true,
    duration: "4 months"
  }
];

export const howItWorksData = [
  {
    step: 1,
    title: "Explore Assets",
    description: "Browse curated real-world assets from commercial real estate to fine art",
    icon: "Search"
  },
  {
    step: 2,
    title: "Invest Fractionally",
    description: "Start with as little as $100 and own a piece of elite assets",
    icon: "Wallet"
  },
  {
    step: 3,
    title: "Earn Returns",
    description: "Receive regular dividends and benefit from asset appreciation",
    icon: "TrendingUp"
  },
  {
    step: 4,
    title: "Trade Securely",
    description: "Buy and sell your fractions on our secure blockchain platform",
    icon: "RefreshCw"
  }
];
--- src/styles/clean-design.css ---
/* 🎨 CLEAN DESIGN SYSTEM - OPTIMIZED SPACING & ANIMATIONS */

:root {
  /* Enhanced Spacing Scale */
  --space-xs: 0.5rem;
  --space-sm: 1rem;
  --space-md: 1.5rem;
  --space-lg: 2rem;
  --space-xl: 3rem;
  --space-2xl: 4rem;
  --space-3xl: 6rem;
  
  /* Enhanced Animation Durations */
  --duration-fast: 0.2s;
  --duration-normal: 0.3s;
  --duration-slow: 0.5s;
  --duration-slower: 0.8s;
}

/* 🌟 CLEAN LAYOUT SYSTEM */
.clean-section {
  padding: var(--space-3xl) 0;
}

.clean-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 var(--space-md);
}

.clean-grid {
  display: grid;
  gap: var(--space-lg);
}

.clean-grid-2 {
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}

.clean-grid-3 {
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
}

.clean-grid-4 {
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
}

/* ✨ ENHANCED CARD DESIGN */
.clean-card {
  background: rgba(255, 255, 255, 0.08);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.12);
  border-radius: 20px;
  padding: var(--space-lg);
  transition: all var(--duration-normal) ease;
}

.clean-card:hover {
  background: rgba(255, 255, 255, 0.12);
  border-color: rgba(255, 255, 255, 0.2);
  transform: translateY(-4px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

.clean-card-large {
  padding: var(--space-xl);
}

/* 🎯 CLEAN TYPOGRAPHY SYSTEM */
.clean-heading-1 {
  font-size: 3.5rem;
  font-weight: 800;
  line-height: 1.1;
  margin-bottom: var(--space-md);
  background: linear-gradient(135deg, #00F5FF 0%, #4361EE 50%, #7209B7 100%);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.clean-heading-2 {
  font-size: 2.5rem;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: var(--space-md);
  color: white;
}

.clean-heading-3 {
  font-size: 1.5rem;
  font-weight: 600;
  line-height: 1.3;
  margin-bottom: var(--space-sm);
  color: white;
}

.clean-text {
  font-size: 1.125rem;
  line-height: 1.6;
  color: rgba(255, 255, 255, 0.8);
  margin-bottom: var(--space-md);
}

.clean-text-sm {
  font-size: 1rem;
  line-height: 1.5;
  color: rgba(255, 255, 255, 0.7);
}

/* 🔥 ENHANCED BUTTONS */
.btn-clean-primary {
  background: linear-gradient(135deg, #00F5FF 0%, #4361EE 100%);
  color: white;
  padding: var(--space-sm) var(--space-lg);
  border-radius: 12px;
  border: none;
  font-weight: 600;
  font-size: 1rem;
  transition: all var(--duration-normal) ease;
  box-shadow: 0 8px 24px rgba(0, 245, 255, 0.3);
}

.btn-clean-primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 32px rgba(0, 245, 255, 0.4);
}

.btn-clean-secondary {
  background: rgba(255, 255, 255, 0.1);
  color: white;
  padding: var(--space-sm) var(--space-lg);
  border-radius: 12px;
  border: 1px solid rgba(255, 255, 255, 0.2);
  font-weight: 500;
  font-size: 1rem;
  transition: all var(--duration-normal) ease;
}

.btn-clean-secondary:hover {
  background: rgba(255, 255, 255, 0.15);
  border-color: rgba(255, 255, 255, 0.3);
  transform: translateY(-1px);
}

/* 🎭 ENHANCED ANIMATIONS */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInScale {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

.animate-fade-in-up {
  animation: fadeInUp var(--duration-slower) ease-out;
}

.animate-fade-in-scale {
  animation: fadeInScale var(--duration-slow) ease-out;
}

.animate-slide-in-left {
  animation: slideInLeft var(--duration-slow) ease-out;
}

.animate-slide-in-right {
  animation: slideInRight var(--duration-slow) ease-out;
}

/* 📱 RESPONSIVE ENHANCEMENTS */
@media (max-width: 768px) {
  .clean-section {
    padding: var(--space-2xl) 0;
  }
  
  .clean-heading-1 {
    font-size: 2.5rem;
  }
  
  .clean-heading-2 {
    font-size: 2rem;
  }
  
  .clean-heading-3 {
    font-size: 1.25rem;
  }
  
  .clean-text {
    font-size: 1rem;
  }
  
  .clean-container {
    padding: 0 var(--space-sm);
  }
}

/* ✨ GLOW EFFECTS */
.glow-cyan {
  box-shadow: 0 0 40px rgba(0, 245, 255, 0.3);
}

.glow-blue {
  box-shadow: 0 0 40px rgba(67, 97, 238, 0.3);
}

.glow-purple {
  box-shadow: 0 0 40px rgba(114, 9, 183, 0.3);
}

--- src/styles/clean-professional.css ---
/* ===== CLEAN PROFESSIONAL DESIGN SYSTEM ===== */
:root {
  /* Professional Color Palette */
  --premium-black: #0A0A0A;
  --deep-charcoal: #1A1A1A;
  --rich-navy: #0F1A2C;
  --dark-slate: #2D3748;
  
  /* Professional Accent Colors */
  --gold-accent: #D4AF37;
  --emerald-accent: #10B981;
  --sapphire-accent: #3B82F6;
  --platinum-accent: #E5E7EB;
  --silver-accent: #94A3B8;
}

/* Clean Background System */
.clean-bg {
  background: var(--premium-black);
}

.clean-bg-panel {
  background: var(--deep-charcoal);
}

.clean-bg-card {
  background: var(--rich-navy);
}

/* Clean Typography - Professional & Readable */
.clean-hero {
  font-size: clamp(2.5rem, 5vw, 4rem);
  font-weight: 700;
  line-height: 1.1;
  color: var(--platinum-accent);
  margin-bottom: 1.5rem;
}

.clean-heading {
  font-size: clamp(2rem, 4vw, 3rem);
  font-weight: 600;
  line-height: 1.2;
  color: var(--platinum-accent);
  margin-bottom: 1rem;
}

.clean-subheading {
  font-size: 1.5rem;
  font-weight: 500;
  line-height: 1.3;
  color: var(--platinum-accent);
  margin-bottom: 0.75rem;
}

.clean-body {
  font-size: 1.125rem;
  line-height: 1.7;
  color: var(--silver-accent);
}

.clean-caption {
  font-size: 1rem;
  line-height: 1.5;
  color: var(--silver-accent);
  opacity: 0.8;
}

/* Clean Card System */
.clean-card {
  background: var(--deep-charcoal);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  padding: 1.5rem;
  transition: all 0.2s ease;
}

.clean-card:hover {
  border-color: var(--gold-accent);
  transform: translateY(-1px);
}

.clean-card-panel {
  background: var(--rich-navy);
  border: 1px solid rgba(255, 255, 255, 0.05);
  border-radius: 16px;
  padding: 2rem;
}

/* Clean Button System */
.btn-clean {
  background: linear-gradient(135deg, var(--gold-accent) 0%, #FBBF24 100%);
  color: var(--premium-black);
  border: none;
  border-radius: 8px;
  padding: 0.75rem 1.5rem;
  font-weight: 600;
  transition: all 0.2s ease;
}

.btn-clean:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(212, 175, 55, 0.3);
}

.btn-clean-secondary {
  background: transparent;
  color: var(--platinum-accent);
  border: 1px solid var(--silver-accent);
  border-radius: 8px;
  padding: 0.75rem 1.5rem;
  font-weight: 500;
  transition: all 0.2s ease;
}

.btn-clean-secondary:hover {
  border-color: var(--gold-accent);
  color: var(--gold-accent);
}

/* Clean Layout System */
.clean-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

.clean-section {
  padding: 4rem 0;
}

.clean-section-sm {
  padding: 2rem 0;
}

.clean-section-lg {
  padding: 6rem 0;
}

/* Clean Grid System */
.clean-grid {
  display: grid;
  gap: 1.5rem;
}

.clean-grid-cols-1 { grid-template-columns: 1fr; }
.clean-grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
.clean-grid-cols-3 { grid-template-columns: repeat(3, 1fr); }
.clean-grid-cols-4 { grid-template-columns: repeat(4, 1fr); }

/* Clean Utility Classes */
.text-gold { color: var(--gold-accent); }
.text-emerald { color: var(--emerald-accent); }
.text-sapphire { color: var(--sapphire-accent); }

.bg-gold { background: var(--gold-accent); }
.bg-emerald { background: var(--emerald-accent); }
.bg-sapphire { background: var(--sapphire-accent); }

.border-gold { border-color: var(--gold-accent); }
.border-emerald { border-color: var(--emerald-accent); }
.border-sapphire { border-color: var(--sapphire-accent); }

/* Clean Responsive Design */
@media (max-width: 768px) {
  .clean-container {
    padding: 0 1rem;
  }
  
  .clean-section {
    padding: 3rem 0;
  }
  
  .clean-grid-cols-2,
  .clean-grid-cols-3,
  .clean-grid-cols-4 {
    grid-template-columns: 1fr;
  }
}

--- src/styles/enhanced-design.css ---
/* 🎨 ENHANCED WORLD-CLASS DESIGN SYSTEM - OPTIMIZED CONTRAST & SPACING */

:root {
  /* Enhanced Contrast Color Palette */
  --text-primary-enhanced: #FFFFFF;
  --text-secondary-enhanced: #F1F5F9;
  --text-tertiary-enhanced: #E2E8F0;
  --text-accent-enhanced: #00F5FF;
  --text-warning-enhanced: #FFD166;
  --text-success-enhanced: #06D6A0;
  
  /* Enhanced Background with Better Contrast */
  --bg-ultra-dark: #05060A;
  --bg-deep-space: #0A0B0F;
  --bg-stellar: #111827;
  
  /* Premium Glass Morphism with Better Readability */
  --glass-ultra-enhanced: rgba(255, 255, 255, 0.15);
  --glass-premium-enhanced: rgba(255, 255, 255, 0.20);
  --glass-elite-enhanced: rgba(255, 255, 255, 0.25);
  
  /* Enhanced Border Colors */
  --border-ultra: rgba(255, 255, 255, 0.25);
  --border-premium: rgba(255, 255, 255, 0.35);
}

/* 🌟 ENHANCED TEXT SYSTEM - OPTIMIZED CONTRAST */
.text-enhanced-primary {
  color: var(--text-primary-enhanced);
  font-weight: 600;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
}

.text-enhanced-secondary {
  color: var(--text-secondary-enhanced);
  font-weight: 500;
  opacity: 0.95;
}

.text-enhanced-accent {
  color: var(--text-accent-enhanced);
  font-weight: 700;
  text-shadow: 0 0 20px rgba(0, 245, 255, 0.6);
}

/* ✨ ENHANCED GLASS MORPHISM - BETTER READABILITY */
.glass-enhanced-ultra {
  background: linear-gradient(135deg,
    var(--glass-ultra-enhanced) 0%,
    var(--glass-premium-enhanced) 50%,
    var(--glass-elite-enhanced) 100%);
  backdrop-filter: blur(40px) saturate(180%);
  border: 1.5px solid var(--border-ultra);
  border-radius: 24px;
  box-shadow:
    0 25px 50px -12px rgba(0, 0, 0, 0.6),
    0 0 60px rgba(0, 245, 255, 0.3),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

.glass-enhanced-premium {
  background: linear-gradient(135deg,
    rgba(255, 255, 255, 0.18) 0%,
    rgba(255, 255, 255, 0.22) 100%);
  backdrop-filter: blur(50px) saturate(200%);
  border: 2px solid var(--border-premium);
  border-radius: 32px;
  box-shadow:
    0 35px 60px -12px rgba(0, 0, 0, 0.7),
    0 0 80px rgba(67, 97, 238, 0.4),
    inset 0 2px 0 rgba(255, 255, 255, 0.3);
}

/* 🎯 ENHANCED SPACING & LAYOUT SYSTEM */
.section-enhanced {
  padding: 6rem 2rem;
  margin: 0 auto;
  max-width: 1400px;
}

.container-enhanced {
  padding: 0 1.5rem;
  margin: 0 auto;
  max-width: 1200px;
}

.grid-enhanced {
  display: grid;
  gap: 2rem;
  align-items: start;
}

/* 🔥 ENHANCED BUTTONS - BETTER CONTRAST */
.btn-enhanced-primary {
  background: linear-gradient(135deg, 
    var(--quantum-cyan) 0%, 
    var(--plasma-blue) 100%);
  color: var(--bg-ultra-dark);
  font-weight: 700;
  padding: 1rem 2rem;
  border-radius: 16px;
  border: none;
  box-shadow: 
    0 8px 32px rgba(0, 245, 255, 0.4),
    0 0 30px rgba(0, 245, 255, 0.3);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.btn-enhanced-primary:hover {
  transform: translateY(-2px);
  box-shadow: 
    0 12px 40px rgba(0, 245, 255, 0.6),
    0 0 40px rgba(0, 245, 255, 0.4);
}

/* 📱 ENHANCED RESPONSIVE DESIGN */
@media (max-width: 768px) {
  .section-enhanced {
    padding: 4rem 1rem;
  }
  
  .container-enhanced {
    padding: 0 1rem;
  }
  
  .grid-enhanced {
    gap: 1.5rem;
  }
}

/* 🎨 ENHANCED CARD DESIGN */
.card-enhanced {
  background: var(--glass-premium-enhanced);
  backdrop-filter: blur(30px);
  border: 1px solid var(--border-ultra);
  border-radius: 20px;
  padding: 2rem;
  box-shadow: 
    0 20px 40px rgba(0, 0, 0, 0.4),
    0 0 40px rgba(0, 245, 255, 0.2);
}

/* ✨ ENHANCED TYPOGRAPHY SCALE */
.text-display-enhanced {
  font-size: 3.5rem;
  font-weight: 800;
  line-height: 1.1;
  color: var(--text-primary-enhanced);
}

.text-title-enhanced {
  font-size: 2.25rem;
  font-weight: 700;
  line-height: 1.2;
  color: var(--text-primary-enhanced);
}

.text-subtitle-enhanced {
  font-size: 1.5rem;
  font-weight: 600;
  line-height: 1.3;
  color: var(--text-secondary-enhanced);
}

.text-body-enhanced {
  font-size: 1.125rem;
  font-weight: 500;
  line-height: 1.6;
  color: var(--text-secondary-enhanced);
}

--- src/styles/financial-design.css ---
/* Professional Financial Color Palette */
:root {
  /* Primary Colors - Deep Financial Blue */
  --financial-deep: #0A1429;
  --financial-dark: #1A243F;
  --financial-mid: #2D3B5C;
  --financial-light: #3E5075;
  
  /* Accent Colors - Professional Green & Blue */
  --accent-success: #00D4AA;
  --accent-success-light: #33FFD6;
  --accent-primary: #2563EB;
  --accent-primary-light: #3B82F6;
  --accent-secondary: #8B5CF6;
  --accent-secondary-light: #A78BFA;
  
  /* Data Visualization Colors */
  --chart-1: #00D4AA;
  --chart-2: #2563EB;
  --chart-3: #8B5CF6;
  --chart-4: #F59E0B;
  --chart-5: #EF4444;
  
  /* Neutral Colors - Professional Finance */
  --neutral-white: #FFFFFF;
  --neutral-offwhite: #F8FAFC;
  --neutral-light: #E2E8F0;
  --neutral-mid: #94A3B8;
  --neutral-dark: #475569;
  --neutral-black: #1E293B;
  
  /* Status Colors */
  --success: #00D4AA;
  --warning: #F59E0B;
  --error: #EF4444;
  --info: #2563EB;
  
  /* Gradients */
  --gradient-financial: linear-gradient(135deg, var(--financial-deep) 0%, var(--financial-dark) 100%);
  --gradient-success: linear-gradient(135deg, var(--accent-success) 0%, var(--accent-primary) 100%);
  --gradient-card: linear-gradient(135deg, rgba(0, 212, 170, 0.05) 0%, rgba(37, 99, 235, 0.05) 100%);
  --gradient-glass: linear-gradient(135deg, rgba(255, 255, 255, 0.08) 0%, rgba(255, 255, 255, 0.02) 100%);
}

/* Professional Financial Glassmorphism */
.glass-financial {
  background: var(--gradient-glass);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.08);
}

.glass-card {
  background: var(--gradient-glass);
  backdrop-filter: blur(16px);
  border: 1px solid rgba(255, 255, 255, 0.06);
  box-shadow: 
    0 4px 24px rgba(0, 0, 0, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.04);
}

.glass-nav {
  background: rgba(10, 20, 41, 0.98);
  backdrop-filter: blur(20px);
  border-bottom: 1px solid rgba(0, 212, 170, 0.1);
}

/* Professional Glow Effects */
.glow-success {
  box-shadow: 
    0 0 20px rgba(0, 212, 170, 0.3),
    0 0 40px rgba(0, 212, 170, 0.15);
}

.glow-primary {
  box-shadow: 
    0 0 20px rgba(37, 99, 235, 0.3),
    0 0 40px rgba(37, 99, 235, 0.15);
}

/* Professional Button Styles */
.btn-financial {
  background: var(--gradient-success);
  border: 1px solid rgba(0, 212, 170, 0.3);
  color: var(--financial-deep);
  font-weight: 600;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.btn-financial::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.6s ease;
}

.btn-financial:hover::before {
  left: 100%;
}

.btn-financial:hover {
  transform: translateY(-2px);
  box-shadow: 
    0 8px 25px rgba(0, 212, 170, 0.3),
    0 0 30px rgba(37, 99, 235, 0.2);
}

.btn-outline {
  background: transparent;
  border: 2px solid var(--accent-success);
  color: var(--accent-success);
  font-weight: 600;
  transition: all 0.3s ease;
}

.btn-outline:hover {
  background: var(--accent-success);
  color: var(--financial-deep);
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 212, 170, 0.25);
}

/* Professional Card Hover Effects */
.card-hover {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  cursor: pointer;
}

.card-hover:hover {
  transform: translateY(-4px);
  box-shadow: 
    0 12px 32px rgba(0, 0, 0, 0.2),
    0 0 20px rgba(0, 212, 170, 0.1);
  border-color: rgba(0, 212, 170, 0.2);
}

/* Chart Container Styles */
.chart-container {
  background: var(--gradient-card);
  border: 1px solid rgba(255, 255, 255, 0.08);
  border-radius: 12px;
  padding: 1.5rem;
}

/* Professional Data Grid */
.data-grid {
  display: grid;
  gap: 1rem;
}

.data-card {
  background: var(--gradient-glass);
  border: 1px solid rgba(255, 255, 255, 0.06);
  border-radius: 8px;
  padding: 1.25rem;
}

/* Auction Timer */
.auction-timer {
  background: linear-gradient(135deg, rgba(239, 68, 68, 0.1) 0%, rgba(245, 158, 11, 0.1) 100%);
  border: 1px solid rgba(245, 158, 11, 0.3);
  border-radius: 8px;
  padding: 0.75rem;
  font-family: 'Courier New', monospace;
}

/* Filter System */
.filter-pill {
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  padding: 0.5rem 1rem;
  cursor: pointer;
  transition: all 0.2s ease;
}

.filter-pill.active {
  background: var(--accent-success);
  color: var(--financial-deep);
  border-color: var(--accent-success);
}

.filter-pill:hover {
  background: rgba(255, 255, 255, 0.1);
  border-color: rgba(255, 255, 255, 0.2);
}

--- src/styles/global-ux.css ---
/* Global UX Improvements */
:root {
  /* Spacing Scale */
  --space-xs: 0.5rem;
  --space-sm: 1rem;
  --space-md: 1.5rem;
  --space-lg: 2rem;
  --space-xl: 3rem;
  --space-2xl: 4rem;
  
  /* Colors */
  --primary-blue: #2563eb;
  --primary-blue-dark: #1d4ed8;
  --success-green: #10b981;
  --warning-orange: #f59e0b;
  --error-red: #ef4444;
}

/* Smooth Scrolling */
html {
  scroll-behavior: smooth;
}

/* Consistent Container */
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 var(--space-md);
}

/* Header Spacing Compensation */
body {
  padding-top: 4rem; /* Compensate for fixed header */
}

/* Improved Typography Scale */
h1 {
  font-size: 3rem;
  font-weight: 800;
  line-height: 1.1;
  margin-bottom: var(--space-lg);
}

h2 {
  font-size: 2.25rem;
  font-weight: 700;
  line-height: 1.2;
  margin-bottom: var(--space-md);
}

h3 {
  font-size: 1.5rem;
  font-weight: 600;
  line-height: 1.3;
  margin-bottom: var(--space-sm);
}

/* Consistent Card Design */
.ux-card {
  background: white;
  border-radius: 12px;
  padding: var(--space-lg);
  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  border: 1px solid #e5e7eb;
  transition: all 0.3s ease;
}

.ux-card:hover {
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  transform: translateY(-2px);
}

/* Consistent Button Styles */
.ux-btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--space-sm) var(--space-lg);
  border-radius: 8px;
  font-weight: 600;
  font-size: 0.875rem;
  transition: all 0.2s ease;
  border: none;
  cursor: pointer;
  gap: var(--space-xs);
}

.ux-btn-primary {
  background: var(--primary-blue);
  color: white;
}

.ux-btn-primary:hover {
  background: var(--primary-blue-dark);
  transform: translateY(-1px);
}

.ux-btn-secondary {
  background: #f8fafc;
  color: #374151;
  border: 1px solid #e5e7eb;
}

.ux-btn-secondary:hover {
  background: #f1f5f9;
  border-color: #d1d5db;
}

/* Grid Systems */
.ux-grid {
  display: grid;
  gap: var(--space-lg);
}

.ux-grid-cols-1 { grid-template-columns: 1fr; }
.ux-grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
.ux-grid-cols-3 { grid-template-columns: repeat(3, 1fr); }
.ux-grid-cols-4 { grid-template-columns: repeat(4, 1fr); }

/* Section Spacing */
.ux-section {
  padding: var(--space-2xl) 0;
}

.ux-section-sm {
  padding: var(--space-xl) 0;
}

.ux-section-lg {
  padding: calc(var(--space-2xl) * 1.5) 0;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .ux-grid-cols-4 { grid-template-columns: repeat(3, 1fr); }
  h1 { font-size: 2.5rem; }
  h2 { font-size: 2rem; }
}

@media (max-width: 768px) {
  .ux-grid-cols-3, 
  .ux-grid-cols-4 { grid-template-columns: repeat(2, 1fr); }
  
  .ux-section { padding: var(--space-xl) 0; }
  h1 { font-size: 2rem; }
  h2 { font-size: 1.75rem; }
}

@media (max-width: 640px) {
  .ux-grid-cols-2,
  .ux-grid-cols-3,
  .ux-grid-cols-4 { grid-template-columns: 1fr; }
  
  .container { padding: 0 var(--space-sm); }
}

/* Loading States */
.ux-loading {
  opacity: 0.7;
  pointer-events: none;
}

.ux-skeleton {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
}

@keyframes loading {
  0% { background-position: 200% 0; }
  100% { background-position: -200% 0; }
}

/* Focus States for Accessibility */
.ux-btn:focus,
.ux-card:focus {
  outline: 2px solid var(--primary-blue);
  outline-offset: 2px;
}

--- src/styles/immersive-3d.css ---
/* Immersive 3D Design System - ENHANCED COLOR SCHEME */
:root {
  /* Enhanced Luxury Color Palette - Rich & Vibrant */
  --luxury-deep: #0A0B1A;
  --luxury-dark: #1A1B2F;
  --luxury-mid: #2A2B45;
  --luxury-light: #3A3B5A;
  
  /* Premium Accent Colors - Rich & Vibrant */
  --emerald-glow: #00FFAA;
  --sapphire-glow: #0095FF;
  --amethyst-glow: #8A2BE2;
  --gold-glow: #FFD700;
  --ruby-glow: #FF3366;
  
  /* Gradient Combinations */
  --gradient-emerald: linear-gradient(135deg, var(--emerald-glow) 0%, #00CC88 100%);
  --gradient-sapphire: linear-gradient(135deg, var(--sapphire-glow) 0%, #0066CC 100%);
  --gradient-amethyst: linear-gradient(135deg, var(--amethyst-glow) 0%, #6A0DAD 100%);
  --gradient-gold: linear-gradient(135deg, var(--gold-glow) 0%, #FFAA00 100%);
  --gradient-ruby: linear-gradient(135deg, var(--ruby-glow) 0%, #CC0066 100%);
  
  /* Glass Morphism V3 */
  --glass-ultra: linear-gradient(135deg, 
    rgba(255, 255, 255, 0.15) 0%,
    rgba(255, 255, 255, 0.05) 50%,
    rgba(255, 255, 255, 0.10) 100%);
  
  --glass-card-3d: linear-gradient(135deg,
    rgba(0, 255, 170, 0.10) 0%,
    rgba(0, 149, 255, 0.05) 50%,
    rgba(138, 43, 226, 0.08) 100%);
}

/* Ultra Immersive Background */
.immersive-bg {
  background: 
    radial-gradient(ellipse 80% 50% at 50% -20%, rgba(0, 255, 170, 0.20) 0%, transparent 60%),
    radial-gradient(ellipse 80% 50% at 100% 50%, rgba(0, 149, 255, 0.15) 0%, transparent 60%),
    radial-gradient(ellipse 80% 50% at 0% 50%, rgba(138, 43, 226, 0.15) 0%, transparent 60%),
    radial-gradient(ellipse 60% 80% at 80% 20%, rgba(255, 51, 102, 0.10) 0%, transparent 60%),
    linear-gradient(180deg, var(--luxury-deep) 0%, var(--luxury-dark) 100%);
  position: relative;
  overflow: hidden;
}

.immersive-bg::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: 
    url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%2300ffaa' fill-opacity='0.04' fill-rule='evenodd'/%3E%3C/svg%3E");
  animation: float 20s linear infinite;
  pointer-events: none;
}

@keyframes float {
  0% { transform: translateY(0px) translateX(0px); }
  50% { transform: translateY(-20px) translateX(10px); }
  100% { transform: translateY(0px) translateX(0px); }
}

/* 3D Glass Cards - Enhanced */
.glass-3d {
  background: var(--glass-ultra);
  backdrop-filter: blur(40px);
  border: 1px solid rgba(0, 255, 170, 0.20);
  border-radius: 24px;
  box-shadow: 
    0 25px 50px -12px rgba(0, 0, 0, 0.6),
    0 0 0 1px rgba(255, 255, 255, 0.08),
    inset 0 1px 0 rgba(255, 255, 255, 0.12),
    0 0 40px rgba(0, 255, 170, 0.15);
  transform-style: preserve-3d;
  transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
}

.glass-3d:hover {
  transform: translateY(-12px) rotateX(5deg) rotateY(5deg);
  box-shadow: 
    0 40px 80px -20px rgba(0, 0, 0, 0.7),
    0 0 0 1px rgba(255, 255, 255, 0.12),
    inset 0 1px 0 rgba(255, 255, 255, 0.18),
    0 0 80px rgba(0, 255, 170, 0.25),
    0 0 120px rgba(0, 149, 255, 0.15);
}

/* Neon Glow Effects - Enhanced */
.neon-glow {
  position: relative;
}

.neon-glow::before {
  content: '';
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: var(--gradient-emerald);
  border-radius: inherit;
  z-index: -1;
  filter: blur(25px);
  opacity: 0.7;
  animation: neon-pulse 3s ease-in-out infinite;
}

@keyframes neon-pulse {
  0%, 100% { opacity: 0.5; }
  50% { opacity: 0.9; }
}

/* 3D Text Effects */
.text-3d {
  background: var(--gradient-emerald);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-shadow: 
    0 0 40px rgba(0, 255, 170, 0.6),
    0 0 80px rgba(0, 149, 255, 0.4),
    0 0 120px rgba(138, 43, 226, 0.3);
}

.text-glow {
  text-shadow: 
    0 0 25px currentColor,
    0 0 50px currentColor,
    0 0 80px currentColor;
}

/* Enhanced 3D Button */
.btn-3d {
  background: var(--gradient-emerald);
  border: none;
  border-radius: 16px;
  color: var(--luxury-deep);
  font-weight: 800;
  padding: 1.25rem 2.5rem;
  font-size: 1.125rem;
  position: relative;
  overflow: hidden;
  transform-style: preserve-3d;
  transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
  box-shadow: 
    0 12px 35px rgba(0, 255, 170, 0.4),
    0 0 0 1px rgba(255, 255, 255, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.25);
}

.btn-3d::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.5), transparent);
  transition: left 0.8s ease;
}

.btn-3d:hover::before {
  left: 100%;
}

.btn-3d:hover {
  transform: translateY(-10px) scale(1.05);
  box-shadow: 
    0 25px 50px rgba(0, 255, 170, 0.5),
    0 0 0 1px rgba(255, 255, 255, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.35),
    0 0 70px rgba(0, 255, 170, 0.6);
}

.btn-3d-outline {
  background: transparent;
  border: 2px solid var(--emerald-glow);
  color: var(--emerald-glow);
  border-radius: 16px;
  font-weight: 800;
  padding: 1.25rem 2.5rem;
  font-size: 1.125rem;
  position: relative;
  overflow: hidden;
  transition: all 0.6s cubic-bezier(0.23, 1, 0.32, 1);
}

.btn-3d-outline::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(0, 255, 170, 0.3), transparent);
  transition: left 0.8s ease;
}

.btn-3d-outline:hover::before {
  left: 100%;
}

.btn-3d-outline:hover {
  background: var(--emerald-glow);
  color: var(--luxury-deep);
  transform: translateY(-10px);
  box-shadow: 
    0 20px 40px rgba(0, 255, 170, 0.4),
    0 0 40px rgba(0, 255, 170, 0.3);
}

/* Asset Type Colors */
.asset-horse {
  background: var(--gradient-emerald);
  color: var(--luxury-deep);
}

.asset-real-estate {
  background: var(--gradient-sapphire);
  color: var(--luxury-deep);
}

/* Floating Animation */
.float-slow {
  animation: float-slow 6s ease-in-out infinite;
}

.float-medium {
  animation: float-medium 4s ease-in-out infinite;
}

.float-fast {
  animation: float-fast 2s ease-in-out infinite;
}

@keyframes float-slow {
  0%, 100% { transform: translateY(0px) rotate(0deg); }
  50% { transform: translateY(-20px) rotate(5deg); }
}

@keyframes float-medium {
  0%, 100% { transform: translateY(0px) scale(1); }
  50% { transform: translateY(-15px) scale(1.05); }
}

@keyframes float-fast {
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
}

/* Particle System */
.particles {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.particle {
  position: absolute;
  border-radius: 50%;
  animation: particle-float 8s linear infinite;
}

@keyframes particle-float {
  0% {
    transform: translateY(100vh) rotate(0deg);
    opacity: 0;
  }
  10% {
    opacity: 1;
  }
  90% {
    opacity: 1;
  }
  100% {
    transform: translateY(-100px) rotate(360deg);
    opacity: 0;
  }
}

/* Scroll-triggered animations */
.scroll-reveal {
  opacity: 0;
  transform: translateY(60px);
  transition: all 1s cubic-bezier(0.23, 1, 0.32, 1);
}

.scroll-reveal.revealed {
  opacity: 1;
  transform: translateY(0);
}

/* Grid Background */
.grid-bg {
  background-image: 
    linear-gradient(rgba(0, 255, 170, 0.15) 1px, transparent 1px),
    linear-gradient(90deg, rgba(0, 255, 170, 0.15) 1px, transparent 1px);
  background-size: 50px 50px;
}

/* Advanced Filter Slider Styles */
.slider-3d {
  background: linear-gradient(90deg, var(--luxury-dark) 0%, var(--emerald-glow) 100%);
  border-radius: 10px;
  outline: none;
}

.slider-3d::-webkit-slider-thumb {
  appearance: none;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: var(--emerald-glow);
  cursor: pointer;
  border: 2px solid var(--luxury-deep);
  box-shadow: 0 0 20px var(--emerald-glow);
  transition: all 0.3s ease;
}

.slider-3d::-webkit-slider-thumb:hover {
  transform: scale(1.2);
  box-shadow: 0 0 30px var(--emerald-glow);
}

.slider-3d::-moz-range-thumb {
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: var(--emerald-glow);
  cursor: pointer;
  border: 2px solid var(--luxury-deep);
  box-shadow: 0 0 20px var(--emerald-glow);
  transition: all 0.3s ease;
}

.slider-3d::-moz-range-thumb:hover {
  transform: scale(1.2);
  box-shadow: 0 0 30px var(--emerald-glow);
}

/* Cyberpunk Background Classes */
.cyberpunk-bg {
  background: var(--luxury-deep);
  background-image: 
    radial-gradient(circle at 15% 50%, rgba(0, 255, 170, 0.05) 0%, transparent 50%),
    radial-gradient(circle at 85% 30%, rgba(0, 149, 255, 0.05) 0%, transparent 50%),
    radial-gradient(circle at 50% 80%, rgba(138, 43, 226, 0.05) 0%, transparent 50%);
  background-attachment: fixed;
}

.bg-luxury-deep {
  background-color: var(--luxury-deep);
}

.bg-luxury-dark {
  background-color: var(--luxury-dark);
}

.bg-luxury-mid {
  background-color: var(--luxury-mid);
}

.bg-luxury-light {
  background-color: var(--luxury-light);
}

--- src/styles/premium-design.css ---
/* Premium Design System for AssetRide */

/* Premium Card Styles */
.premium-card {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 16px;
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
  transition: all 0.3s ease;
}

.premium-card:hover {
  border-color: rgba(34, 211, 238, 0.3);
  box-shadow: 
    0 12px 40px rgba(34, 211, 238, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
  transform: translateY(-2px);
}

/* Premium Button Styles */
.btn-premium {
  background: linear-gradient(135deg, #06b6d4 0%, #3b82f6 100%);
  color: white;
  border: none;
  border-radius: 12px;
  padding: 12px 24px;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(6, 182, 212, 0.3);
}

.btn-premium:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(6, 182, 212, 0.4);
  background: linear-gradient(135deg, #0891b2 0%, #2563eb 100%);
}

.btn-premium-secondary {
  background: rgba(255, 255, 255, 0.1);
  color: white;
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 12px;
  padding: 12px 24px;
  font-weight: 600;
  transition: all 0.3s ease;
}

.btn-premium-secondary:hover {
  background: rgba(255, 255, 255, 0.15);
  border-color: rgba(34, 211, 238, 0.4);
  transform: translateY(-1px);
}

/* Premium Typography */
.premium-heading-1 {
  font-size: clamp(2.5rem, 5vw, 4.5rem);
  font-weight: 800;
  line-height: 1.1;
  background: linear-gradient(135deg, #ffffff 0%, #cbd5e1 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.premium-heading-2 {
  font-size: clamp(1.8rem, 4vw, 2.5rem);
  font-weight: 700;
  line-height: 1.2;
  color: white;
}

.premium-heading-3 {
  font-size: clamp(1.3rem, 3vw, 1.8rem);
  font-weight: 600;
  line-height: 1.3;
  color: white;
}

.premium-text {
  font-size: 1.125rem;
  line-height: 1.7;
  color: #cbd5e1;
}

/* Premium Container */
.premium-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

@media (min-width: 768px) {
  .premium-container {
    padding: 0 2rem;
  }
}

/* Enhanced container for better spacing */
.container-enhanced {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1rem;
}

@media (min-width: 768px) {
  .container-enhanced {
    padding: 0 2rem;
  }
}

/* Cosmic background effect */
.cosmic-bg {
  background: 
    radial-gradient(circle at 20% 80%, rgba(120, 119, 198, 0.1) 0%, transparent 50%),
    radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.1) 0%, transparent 50%),
    radial-gradient(circle at 40% 40%, rgba(120, 219, 255, 0.15) 0%, transparent 50%);
  background-color: #0f172a;
}

/* Text utilities */
.text-premium-light {
  color: #cbd5e1;
}

.text-holographic {
  background: linear-gradient(135deg, #06b6d4, #3b82f6, #8b5cf6);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

/* Glass morphism effects */
.glass-cosmic {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 16px;
  box-shadow: 
    0 8px 32px rgba(0, 0, 0, 0.2),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

.glass-ultimate {
  background: rgba(255, 255, 255, 0.03);
  backdrop-filter: blur(40px);
  border: 1px solid rgba(255, 255, 255, 0.08);
  border-radius: 24px;
  box-shadow: 
    0 25px 50px -12px rgba(0, 0, 0, 0.25),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

/* Button variants */
.btn-quantum {
  background: linear-gradient(135deg, #06b6d4 0%, #3b82f6 50%, #8b5cf6 100%);
  color: white;
  border: none;
  border-radius: 12px;
  padding: 12px 24px;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(6, 182, 212, 0.3);
  position: relative;
  overflow: hidden;
}

.btn-quantum::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.btn-quantum:hover::before {
  left: 100%;
}

.btn-quantum:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(6, 182, 212, 0.4);
}

.btn-premium-outline {
  background: transparent;
  color: #06b6d4;
  border: 2px solid #06b6d4;
  border-radius: 12px;
  padding: 10px 20px;
  font-weight: 600;
  transition: all 0.3s ease;
}

.btn-premium-outline:hover {
  background: rgba(6, 182, 212, 0.1);
  transform: translateY(-1px);
}

/* Line clamp utilities */
.line-clamp-1 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 1;
}

.line-clamp-2 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 2;
}

.line-clamp-3 {
  overflow: hidden;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 3;
}

--- src/styles/professional-theme.css ---
/* ===== PROFESSIONAL FINANCIAL THEME ===== */
:root {
  /* Professional Color Palette */
  --premium-black: #0A0A0A;
  --deep-charcoal: #1A1A1A;
  --rich-navy: #0F1A2C;
  --dark-slate: #2D3748;
  
  /* Professional Accent Colors */
  --gold-accent: #D4AF37;
  --emerald-accent: #10B981;
  --sapphire-accent: #3B82F6;
  --platinum-accent: #E5E7EB;
  
  /* Professional Gradients */
  --gradient-gold: linear-gradient(135deg, #D4AF37 0%, #FBBF24 100%);
  --gradient-emerald: linear-gradient(135deg, #10B981 0%, #34D399 100%);
  --gradient-sapphire: linear-gradient(135deg, #3B82F6 0%, #60A5FA 100%);
  --gradient-charcoal: linear-gradient(135deg, #1A1A1A 0%, #2D3748 100%);
}

/* Professional Backgrounds */
.bg-professional {
  background: var(--premium-black);
}

.bg-professional-deep {
  background: var(--deep-charcoal);
}

.bg-professional-navy {
  background: var(--rich-navy);
}

/* Professional Cards */
.card-professional {
  background: var(--deep-charcoal);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  transition: all 0.3s ease;
}

.card-professional:hover {
  border-color: var(--gold-accent);
  box-shadow: 0 8px 30px rgba(212, 175, 55, 0.2);
  transform: translateY(-2px);
}

/* Professional Buttons */
.btn-professional {
  background: var(--gradient-gold);
  color: var(--premium-black);
  border: none;
  border-radius: 8px;
  padding: 12px 24px;
  font-weight: 600;
  transition: all 0.3s ease;
}

.btn-professional:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 15px rgba(212, 175, 55, 0.4);
}

.btn-professional-secondary {
  background: transparent;
  color: var(--platinum-accent);
  border: 1px solid var(--platinum-accent);
  border-radius: 8px;
  padding: 12px 24px;
  font-weight: 600;
  transition: all 0.3s ease;
}

.btn-professional-secondary:hover {
  background: rgba(255, 255, 255, 0.1);
  border-color: var(--gold-accent);
}

--- src/styles/typography-fixes.css ---
/* Typography & Contrast Fixes */
:root {
  /* Improved color palette for better contrast */
  --text-primary: #1f2937;
  --text-secondary: #4b5563;
  --text-tertiary: #6b7280;
  --text-white: #ffffff;
  --bg-white: #ffffff;
  --bg-gray-50: #f9fafb;
  --bg-gray-100: #f3f4f6;
  --bg-blue-50: #eff6ff;
  --bg-blue-500: #3b82f6;
  --bg-blue-600: #2563eb;
  --bg-blue-700: #1d4ed8;
  --bg-blue-800: #1e40af;
  --bg-blue-900: #1e3a8a;
}

/* Base typography improvements */
body {
  font-family: 'Inter', system-ui, -apple-system, sans-serif;
  color: var(--text-primary);
  line-height: 1.6;
  background-color: var(--bg-white);
}

/* Headings with proper contrast */
h1, h2, h3, h4, h5, h6 {
  font-weight: 700;
  line-height: 1.2;
  color: var(--text-primary);
  margin-bottom: 0.5em;
}

h1 {
  font-size: 3rem;
  font-weight: 800;
  letter-spacing: -0.025em;
}

h2 {
  font-size: 2.25rem;
  font-weight: 700;
  letter-spacing: -0.025em;
}

h3 {
  font-size: 1.5rem;
  font-weight: 600;
}

h4 {
  font-size: 1.25rem;
  font-weight: 600;
}

/* Paragraph improvements */
p {
  color: var(--text-secondary);
  margin-bottom: 1rem;
  line-height: 1.7;
}

/* Text color utilities for better contrast */
.text-high-contrast {
  color: var(--text-primary) !important;
}

.text-medium-contrast {
  color: var(--text-secondary) !important;
}

.text-low-contrast {
  color: var(--text-tertiary) !important;
}

.text-white-contrast {
  color: var(--text-white) !important;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

/* Background fixes for text readability */
.bg-text-readable {
  background-color: var(--bg-white);
}

.bg-text-readable-light {
  background-color: var(--bg-gray-50);
}

/* Hero section text fixes */
.hero-text-fix h1,
.hero-text-fix h2,
.hero-text-fix h3 {
  color: var(--text-white) !important;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.hero-text-fix p {
  color: rgba(255, 255, 255, 0.9) !important;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
}

/* Card text improvements */
.card-text-fix {
  background: var(--bg-white) !important;
  border: 1px solid #e5e7eb !important;
}

.card-text-fix h3,
.card-text-fix h4 {
  color: var(--text-primary) !important;
}

.card-text-fix p {
  color: var(--text-secondary) !important;
}

/* Button text contrast */
.btn-high-contrast {
  color: var(--text-white) !important;
  font-weight: 600 !important;
}

/* Navigation text fixes */
.nav-text-fix {
  font-weight: 500 !important;
}

.nav-text-fix:hover {
  color: var(--bg-blue-600) !important;
}

/* Specific component fixes */
.asset-card h3 {
  color: var(--text-primary) !important;
  font-weight: 700 !important;
}

.asset-card p {
  color: var(--text-secondary) !important;
}

.ux-card h3,
.ux-card h4 {
  color: var(--text-primary) !important;
}

.ux-card p {
  color: var(--text-secondary) !important;
}

/* Gradient backgrounds with readable text */
.gradient-bg-readable {
  position: relative;
}

.gradient-bg-readable::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(135deg, var(--bg-blue-800) 0%, var(--bg-blue-900) 100%);
  z-index: -1;
}

.gradient-bg-readable h1,
.gradient-bg-readable h2,
.gradient-bg-readable h3 {
  color: var(--text-white) !important;
}

.gradient-bg-readable p {
  color: rgba(255, 255, 255, 0.9) !important;
}

/* Dark mode support preparation */
@media (prefers-color-scheme: dark) {
  :root {
    --text-primary: #f9fafb;
    --text-secondary: #e5e7eb;
    --text-tertiary: #d1d5db;
    --bg-white: #111827;
    --bg-gray-50: #1f2937;
    --bg-gray-100: #374151;
  }
}

/* Font weight improvements */
.font-semibold {
  font-weight: 600 !important;
}

.font-bold {
  font-weight: 700 !important;
}

.font-extrabold {
  font-weight: 800 !important;
}

/* Text size improvements */
.text-sm {
  font-size: 0.875rem !important;
  line-height: 1.25rem !important;
}

.text-base {
  font-size: 1rem !important;
  line-height: 1.5rem !important;
}

.text-lg {
  font-size: 1.125rem !important;
  line-height: 1.75rem !important;
}

.text-xl {
  font-size: 1.25rem !important;
  line-height: 1.75rem !important;
}

.text-2xl {
  font-size: 1.5rem !important;
  line-height: 2rem !important;
}

.text-3xl {
  font-size: 1.875rem !important;
  line-height: 2.25rem !important;
}

.text-4xl {
  font-size: 2.25rem !important;
  line-height: 2.5rem !important;
}

--- src/styles/ultimate-premium.css ---
/* ULTIMATE PREMIUM THEME - ASSET RIDE */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Premium Dark Theme Colors */
    --premium-black: 8 8 12;
    --premium-navy: 15 23 42;
    --premium-slate: 30 41 59;
    --premium-cyan: 34 211 238;
    --premium-blue: 59 130 246;
    --premium-purple: 139 92 246;
    --premium-emerald: 16 185 129;
    --premium-amber: 245 158 11;

    /* Glass Morphism Colors */
    --glass-light: 255 255 255;
    --glass-dark: 0 0 0;
  }

  /* Global Typography & Layout Fixes */
  * {
    box-sizing: border-box;
  }

  html {
    scroll-behavior: smooth;
  }

  body {
    font-family: system-ui, -apple-system, 'Segoe UI', Roboto, sans-serif;
    line-height: 1.6;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    background: linear-gradient(135deg, rgb(var(--premium-black)) 0%, rgb(var(--premium-navy)) 100%);
    background-attachment: fixed;
  }

  h1, h2, h3, h4, h5, h6 {
    line-height: 1.2;
    font-weight: 700;
    margin-bottom: 0.5em;
  }

  p {
    line-height: 1.6;
    margin-bottom: 1rem;
  }

  /* Ensure all text is properly visible */
  .text-premium-white {
    color: rgba(255, 255, 255, 0.95) !important;
  }

  .text-premium-light {
    color: rgba(255, 255, 255, 0.85) !important;
  }

  .text-premium-muted {
    color: rgba(255, 255, 255, 0.7) !important;
  }
}

@layer components {
  /* === ULTIMATE GLASS MORPHISM === */
  .glass-ultimate {
    background: linear-gradient(135deg,
      rgba(255, 255, 255, 0.12) 0%,
      rgba(255, 255, 255, 0.04) 50%,
      rgba(255, 255, 255, 0.08) 100%);
    backdrop-filter: blur(24px) saturate(180%);
    border: 1px solid rgba(255, 255, 255, 0.15);
    border-radius: 24px;
    box-shadow:
      0 25px 50px -12px rgba(0, 0, 0, 0.5),
      inset 0 1px 0 0 rgba(255, 255, 255, 0.1),
      0 0 0 1px rgba(255, 255, 255, 0.05);
    transform-style: preserve-3d;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
    position: relative;
  }

  .glass-ultimate:hover {
    border-color: rgba(255, 255, 255, 0.25);
    box-shadow:
      0 35px 60px -12px rgba(0, 0, 0, 0.6),
      inset 0 1px 0 0 rgba(255, 255, 255, 0.15),
      0 0 0 1px rgba(255, 255, 255, 0.1),
      0 0 30px 0 rgba(34, 211, 238, 0.2);
    transform: translateY(-8px) scale(1.02);
  }

  /* === PREMIUM BACKGROUNDS === */
  .bg-premium-dark {
    background: linear-gradient(135deg,
      rgb(var(--premium-black)) 0%,
      rgb(var(--premium-navy)) 25%,
      rgb(var(--premium-slate)) 50%,
      rgb(var(--premium-navy)) 75%,
      rgb(var(--premium-black)) 100%);
    background-attachment: fixed;
  }

  .bg-premium-gradient {
    background: linear-gradient(135deg,
      rgb(var(--premium-cyan)) 0%,
      rgb(var(--premium-blue)) 25%,
      rgb(var(--premium-purple)) 50%,
      rgb(var(--premium-emerald)) 75%,
      rgb(var(--premium-cyan)) 100%);
    background-size: 200% 200%;
    animation: gradient-shift 4s ease infinite;
  }

  /* === PREMIUM TEXT GRADIENTS === */
  .text-gradient-premium {
    background: linear-gradient(135deg,
      rgb(var(--premium-cyan)) 0%,
      rgb(var(--premium-blue)) 25%,
      rgb(var(--premium-purple)) 50%,
      rgb(var(--premium-emerald)) 75%,
      rgb(var(--premium-cyan)) 100%);
    background-size: 200% 200%;
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: gradient-shift 4s ease infinite;
    display: inline-block;
  }

  /* === PREMIUM BUTTONS === */
  .btn-premium {
    background: linear-gradient(135deg,
      rgb(var(--premium-cyan)) 0%,
      rgb(var(--premium-blue)) 50%,
      rgb(var(--premium-purple)) 100%);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: white;
    font-weight: 700;
    padding: 1rem 2rem;
    border-radius: 16px;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    min-height: 3.5rem;
    font-size: 1.125rem;
  }

  .btn-premium::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.6s ease;
  }

  .btn-premium:hover::before {
    left: 100%;
  }

  .btn-premium:hover {
    transform: translateY(-4px) scale(1.05);
    box-shadow:
      0 20px 40px rgba(34, 211, 238, 0.4),
      0 0 60px rgba(59, 130, 246, 0.3),
      0 0 80px rgba(139, 92, 246, 0.2);
  }

  .btn-premium-outline {
    background: transparent;
    border: 2px solid rgb(var(--premium-cyan));
    color: rgb(var(--premium-cyan));
    backdrop-filter: blur(10px);
  }

  .btn-premium-outline:hover {
    background: rgb(var(--premium-cyan));
    color: white;
    transform: translateY(-4px);
  }

  /* === PREMIUM CARDS === */
  .card-premium {
    @apply glass-ultimate p-8;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    flex-direction: column;
    height: fit-content;
    min-height: 300px;
  }

  .card-premium-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    gap: 1.5rem;
  }

  .card-premium:hover {
    transform: translateY(-12px) rotateX(5deg);
  }

  /* === PREMIUM STATS === */
  .stat-premium {
    @apply glass-ultimate p-6 text-center;
    transition: all 0.4s ease;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 180px;
  }

  .stat-premium:hover {
    transform: translateY(-8px) scale(1.05);
    border-color: rgba(34, 211, 238, 0.4);
  }

  /* === PREMIUM NAVIGATION === */
  .nav-premium {
    background: rgba(8, 8, 12, 0.95);
    backdrop-filter: blur(20px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    position: sticky;
    top: 0;
    z-index: 1000;
  }

  .nav-link-premium {
    color: rgba(255, 255, 255, 0.8);
    transition: all 0.3s ease;
    position: relative;
    padding: 0.5rem 1rem;
    border-radius: 12px;
  }

  .nav-link-premium:hover {
    color: rgb(var(--premium-cyan));
    background: rgba(34, 211, 238, 0.1);
  }

  .nav-link-premium.active {
    color: rgb(var(--premium-cyan));
    background: rgba(34, 211, 238, 0.15);
  }

  /* === PREMIUM GRID LAYOUT === */
  .grid-premium {
    display: grid;
    gap: 2rem;
    align-items: start;
  }

  /* === PREMIUM TEXT CONTAINERS === */
  .text-container-premium {
    max-width: 100%;
    word-wrap: break-word;
    overflow-wrap: break-word;
    hyphens: auto;
  }

  /* === PREMIUM SECTIONS === */
  .section-premium {
    padding: 5rem 0;
    position: relative;
    overflow: hidden;
  }

  .section-premium::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, rgba(34, 211, 238, 0.5), transparent);
  }

  /* === PREMIUM CONTAINER === */
  .container-premium {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1.5rem;
    position: relative;
  }

  /* === PREMIUM ANIMATIONS === */
  @keyframes gradient-shift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  @keyframes float-premium {
    0%, 100% { 
      transform: translateY(0px) rotate(0deg); 
    }
    33% { 
      transform: translateY(-20px) rotate(120deg); 
    }
    66% { 
      transform: translateY(-10px) rotate(240deg); 
    }
  }

  @keyframes glow-premium {
    0%, 100% {
      box-shadow: 0 0 20px rgba(34, 211, 238, 0.4);
    }
    50% {
      box-shadow:
        0 0 40px rgba(34, 211, 238, 0.6),
        0 0 60px rgba(59, 130, 246, 0.4),
        0 0 80px rgba(139, 92, 246, 0.2);
    }
  }

  @keyframes slide-in-up {
    0% {
      opacity: 0;
      transform: translateY(30px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-float-premium {
    animation: float-premium 6s ease-in-out infinite;
  }

  .animate-glow-premium {
    animation: glow-premium 3s ease-in-out infinite;
  }

  .animate-slide-in-up {
    animation: slide-in-up 0.6s ease-out;
  }

  /* === PREMIUM SCROLLBAR === */
  .premium-scrollbar::-webkit-scrollbar {
    width: 8px;
  }

  .premium-scrollbar::-webkit-scrollbar-track {
    background: rgba(15, 23, 42, 0.8);
    border-radius: 4px;
  }

  .premium-scrollbar::-webkit-scrollbar-thumb {
    background: linear-gradient(180deg,
      rgb(var(--premium-cyan)) 0%,
      rgb(var(--premium-blue)) 50%,
      rgb(var(--premium-purple)) 100%);
    border-radius: 4px;
  }

  .premium-scrollbar::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(180deg,
      rgb(var(--premium-blue)) 0%,
      rgb(var(--premium-purple)) 50%,
      rgb(var(--premium-emerald)) 100%);
  }

  /* === SPACING UTILITIES === */
  .space-premium > * + * {
    margin-top: 1.5rem;
  }

  /* === RESPONSIVE TEXT SIZING === */
  .text-responsive {
    font-size: clamp(1rem, 2vw, 1.25rem);
  }

  .heading-responsive {
    font-size: clamp(2rem, 4vw, 3.5rem);
  }

  .subheading-responsive {
    font-size: clamp(1.25rem, 3vw, 2rem);
  }

  /* === LOADING STATES === */
  .loading-premium {
    position: relative;
    overflow: hidden;
  }

  .loading-premium::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    animation: loading-shine 1.5s infinite;
  }

  @keyframes loading-shine {
    0% { left: -100%; }
    100% { left: 100%; }
  }

  /* === FORM ELEMENTS === */
  .input-premium {
    background: rgba(255, 255, 255, 0.08);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 12px;
    padding: 0.75rem 1rem;
    color: white;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
  }

  .input-premium:focus {
    outline: none;
    border-color: rgb(var(--premium-cyan));
    box-shadow: 0 0 0 3px rgba(34, 211, 238, 0.1);
    background: rgba(255, 255, 255, 0.12);
  }

  .select-premium {
    background: rgba(255, 255, 255, 0.08);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 12px;
    padding: 0.75rem 1rem;
    color: white;
    backdrop-filter: blur(10px);
  }

  /* === BADGES & TAGS === */
  .badge-premium {
    background: linear-gradient(135deg, rgb(var(--premium-cyan)), rgb(var(--premium-blue)));
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
  }

  .badge-outline-premium {
    background: transparent;
    border: 1px solid rgb(var(--premium-cyan));
    color: rgb(var(--premium-cyan));
  }
}

/* === MOBILE RESPONSIVENESS === */
@layer utilities {
  @media (max-width: 768px) {
    .card-premium {
      padding: 1.5rem;
      min-height: 250px;
    }
    
    .stat-premium {
      padding: 1.5rem;
      min-height: 150px;
    }
    
    .btn-premium {
      padding: 0.875rem 1.5rem;
      min-height: 3rem;
      font-size: 1rem;
    }
    
    .section-premium {
      padding: 3rem 0;
    }
    
    .container-premium {
      padding: 0 1rem;
    }

    .nav-premium {
      padding: 1rem;
    }

    .glass-ultimate {
      border-radius: 16px;
    }
  }
}

/* === PRINT STYLES === */
@media print {
  .glass-ultimate {
    background: white !important;
    box-shadow: none !important;
    border: 1px solid #ccc !important;
  }
  
  .text-gradient-premium {
    background: black !important;
    -webkit-text-fill-color: black !important;
  }
}

/* === ACCESSIBILITY === */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}

/* === DARK MODE ENHANCEMENTS === */
@media (prefers-color-scheme: dark) {
  .glass-ultimate {
    background: linear-gradient(135deg,
      rgba(255, 255, 255, 0.08) 0%,
      rgba(255, 255, 255, 0.02) 50%,
      rgba(255, 255, 255, 0.06) 100%);
  }
}

--- src/styles/ux-enhancements.css ---
/* Enhanced UX Styles */
:root {
  --ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
  --ease-in-out-quad: cubic-bezier(0.455, 0.03, 0.515, 0.955);
}

/* Smooth scrolling for the whole site */
html {
  scroll-behavior: smooth;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: #f1f5f9;
}

::-webkit-scrollbar-thumb {
  background: #cbd5e1;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #94a3b8;
}

/* Enhanced focus states for accessibility */
.ux-focus:focus {
  outline: 2px solid #3b82f6;
  outline-offset: 2px;
}

/* Loading animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in-up {
  animation: fadeInUp 0.6s var(--ease-out-quad) forwards;
}

/* Stagger animations for lists */
.stagger-animate > * {
  opacity: 0;
  animation: fadeInUp 0.6s var(--ease-out-quad) forwards;
}

.stagger-animate > *:nth-child(1) { animation-delay: 0.1s; }
.stagger-animate > *:nth-child(2) { animation-delay: 0.2s; }
.stagger-animate > *:nth-child(3) { animation-delay: 0.3s; }
.stagger-animate > *:nth-child(4) { animation-delay: 0.4s; }
.stagger-animate > *:nth-child(5) { animation-delay: 0.5s; }

/* Enhanced button interactions */
.ux-btn-interactive {
  position: relative;
  overflow: hidden;
  transition: all 0.3s var(--ease-out-quad);
}

.ux-btn-interactive::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.5s;
}

.ux-btn-interactive:hover::before {
  left: 100%;
}

/* Card hover effects */
.ux-card-hover {
  transition: all 0.3s var(--ease-out-quad);
  transform-origin: center;
}

.ux-card-hover:hover {
  transform: translateY(-4px) scale(1.02);
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

/* Gradient text animations */
.ux-gradient-text {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  background-size: 200% 200%;
  animation: gradientShift 3s ease infinite;
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

@keyframes gradientShift {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

/* Loading skeleton animation */
.ux-skeleton {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: loading 1.5s infinite;
}

@keyframes loading {
  0% { background-position: 200% 0; }
  100% { background-position: -200% 0; }
}

/* Page transition animations */
.page-enter {
  opacity: 0;
  transform: translateY(20px);
}

.page-enter-active {
  opacity: 1;
  transform: translateY(0);
  transition: opacity 0.4s, transform 0.4s;
}

/* Enhanced form elements */
.ux-input-enhanced {
  transition: all 0.3s var(--ease-out-quad);
  border: 2px solid #e2e8f0;
}

.ux-input-enhanced:focus {
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  transform: translateY(-1px);
}

/* Notification/toast animations */
@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes slideOutRight {
  from {
    transform: translateX(0);
    opacity: 1;
  }
  to {
    transform: translateX(100%);
    opacity: 0;
  }
}

/* Floating animation for particles */
@keyframes float {
  0%, 100% {
    transform: translateY(0) translateX(0);
  }
  25% {
    transform: translateY(-20px) translateX(10px);
  }
  50% {
    transform: translateY(-10px) translateX(-10px);
  }
  75% {
    transform: translateY(-15px) translateX(5px);
  }
}

.animate-float {
  animation: float 6s ease-in-out infinite;
}

/* Smooth color transitions */
* {
  transition: background-color 0.5s ease, border-color 0.5s ease, color 0.5s ease;
}

/* Backdrop blur support */
@supports (backdrop-filter: blur(10px)) {
  .backdrop-blur-sm {
    backdrop-filter: blur(4px);
  }
  .backdrop-blur-lg {
    backdrop-filter: blur(16px);
  }
  .backdrop-blur-xl {
    backdrop-filter: blur(24px);
  }
}

/* Premium Animations */
@keyframes float-premium {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
  }
  33% {
    transform: translateY(-20px) rotate(120deg);
  }
  66% {
    transform: translateY(-10px) rotate(240deg);
  }
}

@keyframes pulse-slow {
  0%, 100% {
    opacity: 0.5;
    transform: scale(1);
  }
  50% {
    opacity: 0.8;
    transform: scale(1.1);
  }
}

@keyframes glow {
  0%, 100% {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
  }
  50% {
    box-shadow: 0 0 40px rgba(59, 130, 246, 0.8), 0 0 60px rgba(139, 92, 246, 0.6);
  }
}

.animate-float-premium {
  animation: float-premium 6s ease-in-out infinite;
}

.animate-pulse-slow {
  animation: pulse-slow 4s ease-in-out infinite;
}

.animate-glow {
  animation: glow 3s ease-in-out infinite;
}

/* Smooth scrolling for premium experience */
html {
  scroll-behavior: smooth;
}

/* Premium scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: rgba(15, 23, 42, 0.8);
}

::-webkit-scrollbar-thumb {
  background: linear-gradient(180deg, #06b6d4 0%, #3b82f6 100%);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(180deg, #0891b2 0%, #1d4ed8 100%);
}

/* Premium selection */
::selection {
  background: rgba(6, 182, 212, 0.3);
  color: white;
}

/* Premium focus states */
.premium-focus:focus {
  outline: 2px solid #06b6d4;
  outline-offset: 4px;
  border-radius: 8px;
}

/* Glass morphism effects */
.glass-effect {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(20px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.glass-effect-premium {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(40px);
  border: 1px solid rgba(255, 255, 255, 0.1);
}

--- src/styles/ux-improvements.css ---
/* Improved Spacing System */
:root {
  --space-xs: 0.5rem;
  --space-sm: 1rem;
  --space-md: 1.5rem;
  --space-lg: 2rem;
  --space-xl: 3rem;
  --space-2xl: 4rem;
}

/* Header Navigation Fix */
.header-nav {
  display: flex;
  gap: var(--space-md);
  align-items: center;
}

.nav-item {
  padding: var(--space-xs) var(--space-sm);
  margin: 0;
}

/* Service Cards Grid Fix */
.services-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: var(--space-lg);
  padding: var(--space-lg) 0;
}

.service-card {
  padding: var(--space-md);
  margin: 0;
  height: 100%;
  display: flex;
  flex-direction: column;
}

/* Feature Blocks Alignment */
.features-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: var(--space-lg);
  align-items: start;
}

.feature-block {
  text-align: center;
  padding: var(--space-md);
}

.feature-icon {
  margin: 0 auto var(--space-sm);
}

/* Responsive Improvements */
@media (max-width: 768px) {
  .services-grid {
    grid-template-columns: 1fr;
    gap: var(--space-md);
  }
  
  .features-grid {
    grid-template-columns: 1fr;
    gap: var(--space-md);
  }
  
  .header-nav {
    gap: var(--space-sm);
  }
}

/* Button Consistency */
.btn-primary {
  padding: var(--space-sm) var(--space-md);
  border-radius: 8px;
  font-weight: 600;
  transition: all 0.3s ease;
}

.btn-secondary {
  padding: var(--space-sm) var(--space-md);
  border-radius: 8px;
  font-weight: 600;
  transition: all 0.3s ease;
}

--- src/styles/world-class.css ---
/* 🌟 WORLD-CLASS DESIGN SYSTEM - ASSET RIDE PREMIUM */

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');

:root {
  /* Premium Color Palette */
  --cosmic-black: #0A0B0F;
  --deep-space: #0F1117;
  --stellar-blue: #1A1D29;
  --nebula-purple: #2A1E5C;
  --quantum-cyan: #00F5FF;
  --plasma-blue: #4361EE;
  --hologram-purple: #7209B7;
  --neon-pink: #F72585;
  --star-gold: #FFD166;
  --quantum-emerald: #06D6A0;
  
  /* Glass Morphism Levels */
  --glass-ultra: rgba(255, 255, 255, 0.08);
  --glass-premium: rgba(255, 255, 255, 0.12);
  --glass-elite: rgba(255, 255, 255, 0.16);
  
  /* Glow Effects */
  --glow-cyan: 0 0 40px rgba(0, 245, 255, 0.4);
  --glow-blue: 0 0 40px rgba(67, 97, 238, 0.3);
  --glow-purple: 0 0 40px rgba(114, 9, 183, 0.3);
  --glow-gold: 0 0 40px rgba(255, 209, 102, 0.3);
}

/* 🌌 Cosmic Background System */
.cosmic-bg {
  background: 
    radial-gradient(ellipse at 20% 20%, var(--nebula-purple) 0%, transparent 50%),
    radial-gradient(ellipse at 80% 80%, var(--plasma-blue) 0%, transparent 50%),
    radial-gradient(ellipse at 40% 80%, var(--hologram-purple) 0%, transparent 50%),
    linear-gradient(135deg, var(--cosmic-black) 0%, var(--deep-space) 100%);
  background-attachment: fixed;
}

/* ✨ Ultra Premium Glass Morphism */
.glass-cosmic {
  background: linear-gradient(135deg,
    var(--glass-ultra) 0%,
    var(--glass-premium) 50%,
    var(--glass-elite) 100%);
  backdrop-filter: blur(40px) saturate(200%);
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: 32px;
  box-shadow: 
    0 25px 50px -12px rgba(0, 0, 0, 0.5),
    inset 0 1px 0 rgba(255, 255, 255, 0.2),
    0 0 0 1px rgba(255, 255, 255, 0.08),
    var(--glow-cyan);
  transform-style: preserve-3d;
  transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.glass-cosmic::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
  transition: left 0.8s ease;
}

.glass-cosmic:hover::before {
  left: 100%;
}

.glass-cosmic:hover {
  border-color: rgba(255, 255, 255, 0.25);
  box-shadow: 
    0 35px 60px -12px rgba(0, 0, 0, 0.6),
    inset 0 1px 0 rgba(255, 255, 255, 0.25),
    0 0 0 1px rgba(255, 255, 255, 0.12),
    var(--glow-cyan),
    0 0 60px rgba(0, 245, 255, 0.2);
  transform: translateY(-12px) scale(1.02) rotateX(5deg);
}

/* 🚀 Quantum Buttons */
.btn-quantum {
  background: linear-gradient(135deg,
    var(--quantum-cyan) 0%,
    var(--plasma-blue) 50%,
    var(--hologram-purple) 100%);
  border: none;
  color: white;
  font-weight: 700;
  padding: 1.25rem 2.5rem;
  border-radius: 20px;
  font-size: 1.125rem;
  position: relative;
  overflow: hidden;
  transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 
    0 10px 30px rgba(0, 245, 255, 0.3),
    0 0 0 1px rgba(255, 255, 255, 0.1);
}

.btn-quantum::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
  transition: left 0.6s ease;
}

.btn-quantum:hover::before {
  left: 100%;
}

.btn-quantum:hover {
  transform: translateY(-6px) scale(1.05);
  box-shadow: 
    0 20px 40px rgba(0, 245, 255, 0.5),
    0 0 60px rgba(67, 97, 238, 0.4),
    0 0 80px rgba(114, 9, 183, 0.3);
}

/* 🌟 Holographic Text Effects */
.text-holographic {
  background: linear-gradient(135deg,
    var(--quantum-cyan) 0%,
    var(--plasma-blue) 25%,
    var(--hologram-purple) 50%,
    var(--neon-pink) 75%,
    var(--quantum-cyan) 100%);
  background-size: 300% 300%;
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
  animation: holographic-shift 4s ease infinite;
  text-shadow: 0 0 30px rgba(0, 245, 255, 0.5);
}

.text-neon {
  color: var(--quantum-cyan);
  text-shadow: 
    0 0 10px currentColor,
    0 0 20px currentColor,
    0 0 40px currentColor;
  animation: neon-pulse 2s ease-in-out infinite alternate;
}

/* 🎮 Advanced Animations */
@keyframes holographic-shift {
  0%, 100% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
}

@keyframes neon-pulse {
  from { opacity: 0.8; }
  to { opacity: 1; }
}

@keyframes float-cosmic {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg) scale(1);
    filter: hue-rotate(0deg);
  }
  33% { 
    transform: translateY(-30px) rotate(120deg) scale(1.1);
    filter: hue-rotate(120deg);
  }
  66% { 
    transform: translateY(-15px) rotate(240deg) scale(1.05);
    filter: hue-rotate(240deg);
  }
}

@keyframes particle-flow {
  0% { transform: translateX(-100%) translateY(-100%); }
  100% { transform: translateX(100vw) translateY(100vh); }
}

@keyframes orbit {
  0% { transform: rotate(0deg) translateX(100px) rotate(0deg); }
  100% { transform: rotate(360deg) translateX(100px) rotate(-360deg); }
}

/* 🌌 Particle System */
.particle {
  position: absolute;
  background: var(--quantum-cyan);
  border-radius: 50%;
  animation: particle-flow 20s linear infinite;
  opacity: 0.6;
}

.particle:nth-child(2n) {
  background: var(--plasma-blue);
  animation-duration: 25s;
  animation-delay: -5s;
}

.particle:nth-child(3n) {
  background: var(--hologram-purple);
  animation-duration: 30s;
  animation-delay: -10s;
}

/* 🛸 3D Card Transformations */
.card-3d {
  transform-style: preserve-3d;
  perspective: 1000px;
  transition: transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
}

.card-3d:hover {
  transform: rotateY(10deg) rotateX(5deg) translateZ(20px);
}

/* 🌠 Cosmic Grid */
.cosmic-grid {
  background-image: 
    linear-gradient(rgba(0, 245, 255, 0.1) 1px, transparent 1px),
    linear-gradient(90deg, rgba(0, 245, 255, 0.1) 1px, transparent 1px);
  background-size: 50px 50px;
  mask-image: radial-gradient(ellipse 80% 80% at 50% 50%, black, transparent);
}

/* 💫 Loading Animations */
.loading-quantum {
  position: relative;
  overflow: hidden;
}

.loading-quantum::after {
  content: '';
  position: absolute;
  top: -50%;
  left: -50%;
  width: 200%;
  height: 200%;
  background: conic-gradient(
    transparent,
    var(--quantum-cyan),
    transparent 30%
  );
  animation: rotate 2s linear infinite;
}

@keyframes rotate {
  100% { transform: rotate(360deg); }
}

/* 📱 Responsive Design */
@media (max-width: 768px) {
  .glass-cosmic {
    border-radius: 24px;
    backdrop-filter: blur(20px);
  }
  
  .btn-quantum {
    padding: 1rem 2rem;
    font-size: 1rem;
  }
}

/* 🎯 Utility Classes */
.animate-float-cosmic {
  animation: float-cosmic 6s ease-in-out infinite;
}

.animate-orbit {
  animation: orbit 20s linear infinite;
}

.glow-cyan { box-shadow: var(--glow-cyan); }
.glow-blue { box-shadow: var(--glow-blue); }
.glow-purple { box-shadow: var(--glow-purple); }
.glow-gold { box-shadow: var(--glow-gold); }

.bg-cosmic { background-color: var(--cosmic-black); }
.bg-deep-space { background-color: var(--deep-space); }
.bg-stellar { background-color: var(--stellar-blue); }

.text-quantum { color: var(--quantum-cyan); }
.text-plasma { color: var(--plasma-blue); }
.text-hologram { color: var(--hologram-purple); }
.text-neon-pink { color: var(--neon-pink); }
.text-star-gold { color: var(--star-gold); }
.text-quantum-emerald { color: var(--quantum-emerald); }

--- test_asrd_investment.js ---
// Test the ASRD investment logic
function testInvestFunction() {
  const user = {
    name: "Test User",
    asrdBalance: 5000,
    portfolioValue: 100000
  };

  const investmentAmount = 32000; // $32,000 investment
  const asrdTokensCost = investmentAmount / 32; // 1000 ASRD tokens

  console.log("=== ASRD Investment Test ===");
  console.log("Initial ASRD Balance:", user.asrdBalance);
  console.log("Investment Amount: $", investmentAmount);
  console.log("ASRD Tokens Required:", asrdTokensCost);
  
  if (user.asrdBalance >= asrdTokensCost) {
    user.asrdBalance -= asrdTokensCost;
    user.portfolioValue += investmentAmount;
    console.log("✅ Investment Successful!");
    console.log("New ASRD Balance:", user.asrdBalance);
    console.log("New Portfolio Value: $", user.portfolioValue);
  } else {
    console.log("❌ Insufficient ASRD Balance!");
  }
}

testInvestFunction();
