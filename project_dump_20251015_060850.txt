=== ASRD RWA PLATFORM - COMPLETE PROJECT DUMP ===
Dump created: Wed Oct 15 06:08:52 IST 2025
==================================================

=== PROJECT CONFIGURATION ===
=== FILE: package.json ===

{
  "name": "asset-ride-pro",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@react-aria/interactions": "^3.25.6",
    "@react-spring/three": "^10.0.3",
    "@react-three/drei": "^9.85.0",
    "@react-three/fiber": "^8.15.0",
    "@sentry/nextjs": "^10.19.0",
    "@types/three": "^0.161.2",
    "@use-gesture/react": "^10.3.1",
    "@vercel/analytics": "^1.5.0",
    "@vercel/speed-insights": "^1.2.0",
    "canvas-confetti": "1.6.0",
    "curl": "^0.1.4",
    "focus-trap-react": "^11.0.4",
    "framer-motion": "^10.16.4",
    "lqip-modern": "^2.2.1",
    "lucide-react": "^0.292.0",
    "next": "^14.2.33",
    "react": "18.2.0",
    "react-aria": "^3.44.0",
    "react-device-detect": "^2.2.3",
    "react-dom": "18.2.0",
    "react-hook-form": "^7.65.0",
    "react-hot-toast": "^2.6.0",
    "react-lazy-load-image-component": "^1.6.3",
    "react-responsive": "^10.0.1",
    "react-spring": "^10.0.3",
    "react-use-gesture": "^9.1.3",
    "recharts": "^3.2.1",
    "sharp": "^0.34.4",
    "three": "^0.161.0",
    "use-sound": "4.0.1",
    "web-vitals": "^5.1.0",
    "zod": "^4.1.12"
  },
  "devDependencies": {
    "@types/canvas-confetti": "1.6.0",
    "@types/node": "20.8.6",
    "@types/react": "18.2.25",
    "@types/react-dom": "18.2.11",
    "autoprefixer": "10.4.16",
    "eslint": "8.51.0",
    "eslint-config-next": "14.0.3",
    "postcss": "8.4.31",
    "tailwindcss": "3.3.5",
    "typescript": "5.2.2"
  }
}

--- END: package.json ---

=== FILE: next.config.js ===

/** @type {import('next').NextConfig} */
const nextConfig = {
  typescript: {
    ignoreBuildErrors: false,
  },
  eslint: {
    ignoreDuringBuilds: false,
  },
  images: {
    // FIXED: Updated from domains to remotePatterns (no more deprecation warning)
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'images.unsplash.com',
      }
    ],
    formats: ['image/avif', 'image/webp'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
    imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
    minimumCacheTTL: 60,
  },
  compiler: {
    removeConsole: process.env.NODE_ENV === 'production',
  },
}

module.exports = nextConfig

--- END: next.config.js ---

=== FILE: tailwind.config.js ===

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.6s ease-out',
        'float': 'float 6s ease-in-out infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { transform: 'translateY(20px)', opacity: '0' },
          '100%': { transform: 'translateY(0)', opacity: '1' },
        },
        float: {
          '0%, 100%': { transform: 'translateY(0px)' },
          '50%': { transform: 'translateY(-20px)' },
        },
      },
    },
  },
  plugins: [],
}

--- END: tailwind.config.js ---

=== FILE: postcss.config.js ===

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

--- END: postcss.config.js ---

=== FILE: tsconfig.json ===

{
  "compilerOptions": {
    "target": "es2022",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [{"name": "next"}],
    "baseUrl": ".",
    "paths": {"@/*": ["./src/*"]}
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

--- END: tsconfig.json ---

=== SRC/APP STRUCTURE ===
=== FILE: src/app/dao/page.tsx ===

"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import FluidDAO from '@/components/sections/FluidDAO';

export default function DAOPage() {
  return (
    <FluidLayout>
      <FluidDAO />
    </FluidLayout>
  );
}

--- END: src/app/dao/page.tsx ---

=== FILE: src/app/dashboard/page.tsx ===

"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import FluidDashboard from '@/components/sections/FluidDashboard';

export default function DashboardPage() {
  return (
    <FluidLayout>
      <FluidDashboard />
    </FluidLayout>
  );
}

--- END: src/app/dashboard/page.tsx ---

=== FILE: src/app/globals.css ===

/* ===== ASRD ULTIMATE 3D UNIVERSAL DESIGN SYSTEM ===== */
/* COMPREHENSIVE CSS FOR WORLD-CLASS PLATFORM EXPERIENCE */

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

/* ===== ASRD ULTIMATE COLOR THEME ===== */
:root {
  /* Primary Theme Colors - Deep & Sophisticated */
  --asrd-deep: #0A0A0F;
  --asrd-navy: #0F172A;
  --asrd-slate: #1E293B;
  --asrd-charcoal: #334155;
  --asrd-dark: #020617;
  
  /* Accent Colors - Premium Investment Theme */
  --asrd-cyan: #06B6D4;
  --asrd-cyan-light: #22D3EE;
  --asrd-cyan-dark: #0891B2;
  --asrd-blue: #3B82F6;
  --asrd-blue-light: #60A5FA;
  --asrd-emerald: #10B981;
  --asrd-emerald-light: #34D399;
  --asrd-amber: #F59E0B;
  --asrd-amber-light: #FBBF24;
  --asrd-purple: #8B5CF6;
  --asrd-purple-light: #A78BFA;
  --asrd-rose: #F43F5E;
  --asrd-rose-light: #FB7185;
  
  /* Glow Effects */
  --asrd-cyan-glow: rgba(6, 182, 212, 0.4);
  --asrd-blue-glow: rgba(59, 130, 246, 0.4);
  --asrd-emerald-glow: rgba(16, 185, 129, 0.4);
  --asrd-amber-glow: rgba(245, 158, 11, 0.4);
  --asrd-purple-glow: rgba(139, 92, 246, 0.4);
  
  /* Text Colors - Optimized for Readability */
  --text-primary: #FFFFFF;
  --text-secondary: #E2E8F0;
  --text-tertiary: #94A3B8;
  --text-muted: #64748B;
  --text-accent: #06B6D4;
  
  /* Glass Morphism System */
  --glass-light: rgba(255, 255, 255, 0.08);
  --glass-medium: rgba(255, 255, 255, 0.12);
  --glass-dark: rgba(255, 255, 255, 0.05);
  --glass-ultra: rgba(255, 255, 255, 0.15);
  
  /* 3D Depth System */
  --depth-3d-surface: 0 2px 8px rgba(0,0,0,0.1);
  --depth-3d-mid: 0 8px 32px rgba(0,0,0,0.15);
  --depth-3d-deep: 0 16px 48px rgba(0,0,0,0.2);
  --depth-3d-floating: 0 24px 64px rgba(0,0,0,0.3);
  --depth-3d-super: 0 32px 80px rgba(0,0,0,0.4);
  --depth-3d-ultra: 0 40px 100px rgba(0,0,0,0.5);
}

/* ===== BASE RESET & THEME SETUP ===== */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html {
  scroll-behavior: smooth;
  scroll-padding-top: 5rem;
  font-size: 16px;
}

body {
  font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: linear-gradient(135deg, var(--asrd-deep) 0%, var(--asrd-navy) 50%, var(--asrd-dark) 100%);
  background-attachment: fixed;
  color: var(--text-primary);
  line-height: 1.6;
  overflow-x: hidden;
  min-height: 100vh;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* ===== ASRD ULTIMATE TYPOGRAPHY SYSTEM ===== */
.asrd-hero {
  font-size: clamp(2.5rem, 5vw, 4.5rem);
  font-weight: 900;
  line-height: 1.1;
  letter-spacing: -0.02em;
  background: linear-gradient(135deg, var(--text-primary) 0%, var(--asrd-cyan) 30%, var(--asrd-blue) 70%, var(--asrd-purple) 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  margin-bottom: 1.5rem;
  position: relative;
}

.asrd-hero::after {
  content: '';
  position: absolute;
  bottom: -10px;
  left: 0;
  width: 100px;
  height: 4px;
  background: linear-gradient(90deg, var(--asrd-cyan), var(--asrd-blue));
  border-radius: 2px;
}

.asrd-heading {
  font-size: clamp(2rem, 4vw, 3.5rem);
  font-weight: 800;
  line-height: 1.2;
  letter-spacing: -0.01em;
  color: var(--text-primary);
  margin-bottom: 1rem;
}

.asrd-subheading {
  font-size: clamp(1.5rem, 3vw, 2.5rem);
  font-weight: 700;
  line-height: 1.3;
  color: var(--text-primary);
  margin-bottom: 0.75rem;
}

.asrd-title {
  font-size: clamp(1.25rem, 2.5vw, 2rem);
  font-weight: 700;
  line-height: 1.4;
  color: var(--text-primary);
}

.asrd-body {
  font-size: 1.125rem;
  line-height: 1.7;
  color: var(--text-secondary);
  font-weight: 400;
}

.asrd-caption {
  font-size: 1rem;
  line-height: 1.5;
  color: var(--text-tertiary);
  font-weight: 400;
}

.asrd-metric {
  font-size: 2.5rem;
  font-weight: 800;
  background: linear-gradient(135deg, var(--asrd-cyan), var(--asrd-emerald));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  line-height: 1;
}

/* ===== ASRD ULTIMATE GLASS MORPHISM SYSTEM ===== */
.asrd-glass {
  background: linear-gradient(135deg, var(--glass-light) 0%, var(--glass-dark) 100%);
  backdrop-filter: blur(20px) saturate(180%);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 20px;
  box-shadow: 
    var(--depth-3d-mid),
    inset 0 1px 0 rgba(255, 255, 255, 0.1),
    inset 0 -1px 0 rgba(0, 0, 0, 0.2);
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.asrd-glass::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.05), transparent);
  transition: left 0.6s ease;
}

.asrd-glass:hover {
  background: linear-gradient(135deg, var(--glass-medium) 0%, var(--glass-light) 100%);
  border-color: var(--asrd-cyan);
  transform: translateY(-8px) scale(1.02);
  box-shadow: 
    var(--depth-3d-floating),
    0 0 40px var(--asrd-cyan-glow),
    inset 0 1px 0 rgba(255, 255, 255, 0.15);
}

.asrd-glass:hover::before {
  left: 100%;
}

.asrd-glass-premium {
  background: linear-gradient(135deg, var(--glass-ultra) 0%, var(--glass-light) 50%, var(--glass-dark) 100%);
  backdrop-filter: blur(30px) saturate(200%);
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: 24px;
  box-shadow: 
    var(--depth-3d-deep),
    0 0 60px rgba(6, 182, 212, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

.asrd-glass-ultra {
  background: linear-gradient(135deg, 
    rgba(255, 255, 255, 0.1) 0%, 
    rgba(255, 255, 255, 0.05) 50%, 
    rgba(255, 255, 255, 0.02) 100%);
  backdrop-filter: blur(40px) saturate(220%);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 28px;
  box-shadow: 
    var(--depth-3d-super),
    0 0 80px rgba(6, 182, 212, 0.15),
    inset 0 1px 0 rgba(255, 255, 255, 0.25);
}

/* ===== ASRD ULTIMATE BUTTON SYSTEM ===== */
.asrd-btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 1.125rem 2.5rem;
  border-radius: 16px;
  font-weight: 600;
  font-size: 1.125rem;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  border: none;
  cursor: pointer;
  gap: 0.75rem;
  position: relative;
  overflow: hidden;
  text-decoration: none;
  min-width: 140px;
  font-family: inherit;
}

.asrd-btn-primary {
  background: linear-gradient(135deg, var(--asrd-cyan) 0%, var(--asrd-blue) 50%, var(--asrd-purple) 100%);
  color: white;
  box-shadow: 
    0 4px 20px var(--asrd-cyan-glow),
    0 2px 8px rgba(0, 0, 0, 0.2);
  position: relative;
}

.asrd-btn-primary::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
  transition: left 0.6s ease;
}

.asrd-btn-primary:hover {
  transform: translateY(-3px) scale(1.05);
  box-shadow: 
    0 8px 30px var(--asrd-cyan-glow),
    0 4px 15px rgba(0, 0, 0, 0.3);
}

.asrd-btn-primary:hover::before {
  left: 100%;
}

.asrd-btn-primary:active {
  transform: translateY(-1px) scale(1.02);
}

.asrd-btn-secondary {
  background: transparent;
  color: var(--text-secondary);
  border: 2px solid var(--text-tertiary);
  backdrop-filter: blur(10px);
}

.asrd-btn-secondary:hover {
  border-color: var(--asrd-cyan);
  color: var(--asrd-cyan);
  transform: translateY(-2px);
  box-shadow: 0 4px 20px var(--asrd-cyan-glow);
}

.asrd-btn-ghost {
  background: transparent;
  color: var(--text-secondary);
  border: 2px solid transparent;
}

.asrd-btn-ghost:hover {
  background: var(--glass-light);
  color: var(--text-primary);
  border-color: var(--asrd-cyan);
}

.asrd-btn-lg {
  padding: 1.5rem 3rem;
  font-size: 1.25rem;
  border-radius: 20px;
}

.asrd-btn-sm {
  padding: 0.875rem 1.5rem;
  font-size: 1rem;
  border-radius: 12px;
}

/* ===== ASRD ULTIMATE LAYOUT SYSTEM ===== */
.asrd-container {
  max-width: 1280px;
  margin: 0 auto;
  padding: 0 2rem;
}

.asrd-container-wide {
  max-width: 1440px;
  margin: 0 auto;
  padding: 0 2rem;
}

.asrd-container-narrow {
  max-width: 1024px;
  margin: 0 auto;
  padding: 0 2rem;
}

.asrd-section {
  padding: 6rem 0;
  position: relative;
}

.asrd-section-sm {
  padding: 4rem 0;
}

.asrd-section-lg {
  padding: 8rem 0;
}

.asrd-section-xl {
  padding: 10rem 0;
}

/* ===== ASRD ULTIMATE GRID SYSTEM ===== */
.asrd-grid {
  display: grid;
  gap: 2.5rem;
}

.asrd-grid-cols-1 { grid-template-columns: 1fr; }
.asrd-grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
.asrd-grid-cols-3 { grid-template-columns: repeat(3, 1fr); }
.asrd-grid-cols-4 { grid-template-columns: repeat(4, 1fr); }
.asrd-grid-cols-5 { grid-template-columns: repeat(5, 1fr); }

.asrd-grid-auto-fit {
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}

.asrd-grid-auto-fill {
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
}

/* ===== ASRD ULTIMATE ANIMATION SYSTEM ===== */
@keyframes asrd-float {
  0%, 100% { 
    transform: translateY(0px) rotate(0deg); 
  }
  50% { 
    transform: translateY(-15px) rotate(3deg); 
  }
}

@keyframes asrd-glow {
  0%, 100% { 
    opacity: 0.6;
    box-shadow: 0 0 25px var(--asrd-cyan-glow);
  }
  50% { 
    opacity: 1;
    box-shadow: 0 0 50px var(--asrd-cyan-glow), 0 0 70px var(--asrd-blue-glow);
  }
}

@keyframes asrd-fade-in-up {
  from {
    opacity: 0;
    transform: translateY(40px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

@keyframes asrd-fade-in-down {
  from {
    opacity: 0;
    transform: translateY(-40px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

@keyframes asrd-fade-in-left {
  from {
    opacity: 0;
    transform: translateX(-40px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateX(0) scale(1);
  }
}

@keyframes asrd-fade-in-right {
  from {
    opacity: 0;
    transform: translateX(40px) scale(0.95);
  }
  to {
    opacity: 1;
    transform: translateX(0) scale(1);
  }
}

@keyframes asrd-pulse-glow {
  0%, 100% {
    box-shadow: 0 0 20px var(--asrd-cyan-glow);
  }
  50% {
    box-shadow: 0 0 40px var(--asrd-cyan-glow), 0 0 60px var(--asrd-blue-glow);
  }
}

@keyframes asrd-shimmer {
  0% {
    background-position: -1000px 0;
  }
  100% {
    background-position: 1000px 0;
  }
}

.asrd-float {
  animation: asrd-float 8s ease-in-out infinite;
}

.asrd-glow {
  animation: asrd-glow 4s ease-in-out infinite;
}

.asrd-pulse-glow {
  animation: asrd-pulse-glow 3s ease-in-out infinite;
}

.asrd-fade-in-up {
  animation: asrd-fade-in-up 1s cubic-bezier(0.4, 0, 0.2, 1) forwards;
}

.asrd-fade-in-down {
  animation: asrd-fade-in-down 1s cubic-bezier(0.4, 0, 0.2, 1) forwards;
}

.asrd-fade-in-left {
  animation: asrd-fade-in-left 1s cubic-bezier(0.4, 0, 0.2, 1) forwards;
}

.asrd-fade-in-right {
  animation: asrd-fade-in-right 1s cubic-bezier(0.4, 0, 0.2, 1) forwards;
}

.asrd-shimmer {
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
  background-size: 1000px 100%;
  animation: asrd-shimmer 3s infinite linear;
}

/* ===== ASRD ULTIMATE CARD SYSTEM ===== */
.asrd-card {
  @apply asrd-glass p-8;
  transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

.asrd-card:hover {
  transform: translateY(-12px) scale(1.03);
  box-shadow: 
    var(--depth-3d-super),
    0 0 60px var(--asrd-cyan-glow),
    inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

.asrd-card-premium {
  @apply asrd-glass-premium p-8;
  position: relative;
  overflow: hidden;
}

.asrd-card-premium::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, var(--asrd-cyan), var(--asrd-blue), var(--asrd-purple));
}

.asrd-card-ultra {
  @apply asrd-glass-ultra p-8;
  position: relative;
}

.asrd-card-ultra::after {
  content: '';
  position: absolute;
  top: -2px;
  left: -2px;
  right: -2px;
  bottom: -2px;
  background: linear-gradient(45deg, var(--asrd-cyan), var(--asrd-blue), var(--asrd-purple), var(--asrd-cyan));
  border-radius: 30px;
  z-index: -1;
  opacity: 0.3;
  filter: blur(10px);
}

/* ===== ASRD ULTIMATE FINANCIAL COMPONENTS ===== */
.asrd-stat-card {
  @apply asrd-glass p-8 text-center;
  transition: all 0.4s ease;
  position: relative;
}

.asrd-stat-card:hover {
  transform: translateY(-8px) scale(1.04);
}

.asrd-metric-large {
  font-size: 3.5rem;
  font-weight: 900;
  background: linear-gradient(135deg, var(--asrd-cyan), var(--asrd-emerald), var(--asrd-amber));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  line-height: 1;
  margin-bottom: 0.5rem;
}

.asrd-badge {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  border-radius: 50px;
  font-size: 0.875rem;
  font-weight: 600;
  backdrop-filter: blur(10px);
  border: 1px solid;
}

.asrd-badge-premium {
  background: linear-gradient(135deg, var(--asrd-cyan-glow), var(--asrd-blue-glow));
  border-color: var(--asrd-cyan);
  color: var(--asrd-cyan-light);
}

.asrd-badge-success {
  background: linear-gradient(135deg, var(--asrd-emerald-glow), rgba(16, 185, 129, 0.2));
  border-color: var(--asrd-emerald);
  color: var(--asrd-emerald-light);
}

.asrd-badge-warning {
  background: linear-gradient(135deg, var(--asrd-amber-glow), rgba(245, 158, 11, 0.2));
  border-color: var(--asrd-amber);
  color: var(--asrd-amber-light);
}

/* ===== ASRD ULTIMATE MODAL SYSTEM ===== */
.asrd-modal-overlay {
  position: fixed;
  inset: 0;
  background: rgba(2, 6, 23, 0.8);
  backdrop-filter: blur(20px);
  z-index: 1000;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 2rem;
}

.asrd-modal-content {
  @apply asrd-glass-ultra;
  max-width: 90vw;
  max-height: 90vh;
  overflow: auto;
  position: relative;
  animation: asrd-fade-in-up 0.5s cubic-bezier(0.4, 0, 0.2, 1);
}

.asrd-modal-close {
  position: absolute;
  top: 1.5rem;
  right: 1.5rem;
  width: 3rem;
  height: 3rem;
  border-radius: 50%;
  background: var(--glass-dark);
  border: 1px solid rgba(255, 255, 255, 0.1);
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  z-index: 10;
}

.asrd-modal-close:hover {
  background: var(--asrd-rose);
  transform: rotate(90deg);
}

/* ===== ASRD ULTIMATE RESPONSIVE DESIGN ===== */
@media (max-width: 768px) {
  .asrd-container {
    padding: 0 1.5rem;
  }
  
  .asrd-section {
    padding: 4rem 0;
  }
  
  .asrd-section-lg {
    padding: 6rem 0;
  }
  
  .asrd-grid-cols-2,
  .asrd-grid-cols-3,
  .asrd-grid-cols-4,
  .asrd-grid-cols-5 {
    grid-template-columns: 1fr;
  }
  
  .asrd-glass {
    border-radius: 16px;
    backdrop-filter: blur(15px);
  }
  
  .asrd-btn {
    padding: 1rem 2rem;
    width: 100%;
    justify-content: center;
  }
  
  .asrd-modal-overlay {
    padding: 1rem;
  }
  
  .asrd-modal-content {
    max-width: 95vw;
    max-height: 95vh;
  }
}

@media (max-width: 480px) {
  .asrd-container {
    padding: 0 1rem;
  }
  
  .asrd-section {
    padding: 3rem 0;
  }
  
  .asrd-card,
  .asrd-card-premium,
  .asrd-card-ultra {
    padding: 1.5rem;
  }
  
  .asrd-metric-large {
    font-size: 2.5rem;
  }
}

/* ===== ASRD ULTIMATE ACCESSIBILITY ===== */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

.asrd-focus:focus {
  outline: 3px solid var(--asrd-cyan);
  outline-offset: 2px;
  border-radius: 4px;
}

.asrd-sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* ===== ASRD ULTIMATE SCROLLBAR STYLING ===== */
::-webkit-scrollbar {
  width: 12px;
}

::-webkit-scrollbar-track {
  background: linear-gradient(180deg, var(--asrd-deep), var(--asrd-navy));
  border-radius: 6px;
}

::-webkit-scrollbar-thumb {
  background: linear-gradient(180deg, var(--asrd-cyan), var(--asrd-blue), var(--asrd-purple));
  border-radius: 6px;
  border: 2px solid var(--asrd-navy);
}

::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(180deg, var(--asrd-blue), var(--asrd-purple), var(--asrd-rose));
}

::-webkit-scrollbar-corner {
  background: var(--asrd-deep);
}

/* ===== ASRD ULTIMATE SELECTION STYLING ===== */
::selection {
  background: var(--asrd-cyan);
  color: white;
  text-shadow: none;
}

::-moz-selection {
  background: var(--asrd-cyan);
  color: white;
  text-shadow: none;
}

/* ===== ASRD ULTIMATE LOADING STATES ===== */
.asrd-loading {
  position: relative;
  overflow: hidden;
}

.asrd-loading::after {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
  animation: asrd-shimmer 2s infinite;
}

/* ===== ASRD ULTIMATE UTILITY CLASSES ===== */
.asrd-text-gradient {
  background: linear-gradient(135deg, var(--asrd-cyan), var(--asrd-blue), var(--asrd-purple));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.asrd-border-gradient {
  border: 2px solid transparent;
  background: linear-gradient(var(--asrd-navy), var(--asrd-navy)) padding-box,
              linear-gradient(135deg, var(--asrd-cyan), var(--asrd-blue), var(--asrd-purple)) border-box;
}

.asrd-bg-gradient {
  background: linear-gradient(135deg, var(--asrd-cyan) 0%, var(--asrd-blue) 50%, var(--asrd-purple) 100%);
}

.asrd-shadow-glow {
  box-shadow: 0 0 30px var(--asrd-cyan-glow);
}

.asrd-shadow-glow-lg {
  box-shadow: 0 0 60px var(--asrd-cyan-glow);
}

/* ===== ASRD ULTIMATE PRINT STYLES ===== */
@media print {
  .asrd-glass,
  .asrd-glass-premium,
  .asrd-glass-ultra {
    background: white;
    backdrop-filter: none;
    border: 1px solid #ddd;
    box-shadow: none;
  }
  
  .asrd-btn {
    background: #333;
    color: white;
    border: 1px solid #333;
  }
  
  .asrd-text-gradient {
    background: none;
    -webkit-text-fill-color: #333;
    color: #333;
  }
}
--- END: src/app/globals.css ---

=== FILE: src/app/home/page.tsx ===

// src/app/home/page.tsx - CONSISTENT DARK THEME
"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import FluidHero from '@/components/sections/FluidHero';
import ProblemSection from '@/components/sections/ProblemSection';
import SolutionSection from '@/components/sections/SolutionSection';
import HowItWorksSection from '@/components/sections/HowItWorksSection';
import FeaturedAssetsSection from '@/components/sections/FeaturedAssetsSection';
import PlatformStats from '@/components/sections/PlatformStats';
import TestimonialsSection from '@/components/sections/TestimonialsSection';
import FinalCTASection from '@/components/sections/FinalCTASection';

export default function HomePage() {
  return (
    <FluidLayout showHeader={true}>
      {/* 1. Enhanced Hero Section */}
      <FluidHero />

      {/* 2. Problem Section - Updated to dark theme */}
      <section id="problem" className="fluid-section-sm bg-slate-900">
        <div className="fluid-container">
          <ProblemSection />
        </div>
      </section>

      {/* 3. Solution Section - Updated to dark theme */}
      <section id="solution" className="fluid-section-sm bg-slate-800">
        <div className="fluid-container">
          <SolutionSection />
        </div>
      </section>

      {/* 4. How It Works Section - Updated to dark theme */}
      <section id="how-it-works" className="fluid-section-sm bg-slate-900">
        <div className="fluid-container">
          <HowItWorksSection />
        </div>
      </section>

      {/* 5. Featured Assets Section */}
      <section id="featured-assets" className="fluid-section-sm bg-slate-800">
        <div className="fluid-container">
          <FeaturedAssetsSection />
        </div>
      </section>

      {/* 6. Platform Statistics */}
      <PlatformStats />

      {/* 7. Testimonials Section - Updated to dark theme */}
      <TestimonialsSection />

      {/* 8. Final CTA Section */}
      <FinalCTASection />
    </FluidLayout>
  );
}
--- END: src/app/home/page.tsx ---

=== FILE: src/app/how-it-works/page.tsx ===

"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import HowItWorksSection from '@/components/sections/HowItWorksSection';

export default function HowItWorksPage() {
  return (
    <FluidLayout>
      <HowItWorksSection />
    </FluidLayout>
  );
}

--- END: src/app/how-it-works/page.tsx ---

=== FILE: src/app/layout.tsx ===

import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'  // Only this - it has everything
import { AuthProvider } from '@/contexts/AuthContext'
import { NotificationProvider } from '@/contexts/NotificationContext'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'AssetRide - Premium Real World Asset Investment',
  description: 'Democratizing access to premium real world assets with world-class returns',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <AuthProvider>
          <NotificationProvider>
            {children}
          </NotificationProvider>
        </AuthProvider>
      </body>
    </html>
  )
}
--- END: src/app/layout.tsx ---

=== FILE: src/app/marketplace/page.tsx ===

"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import FluidMarketplace from '@/components/sections/FluidMarketplace';

export default function MarketplacePage() {
  return (
    <FluidLayout>
      <FluidMarketplace />
    </FluidLayout>
  );
}

--- END: src/app/marketplace/page.tsx ---

=== FILE: src/app/our-journey/page.tsx ===

"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import OurJourneySection from '@/components/sections/OurJourneySection';

export default function OurJourneyPage() {
  return (
    <FluidLayout>
      <OurJourneySection />
    </FluidLayout>
  );
}

--- END: src/app/our-journey/page.tsx ---

=== FILE: src/app/page.tsx ===

// src/app/home/page.tsx - CONSISTENT DARK THEME
"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import FluidHero from '@/components/sections/FluidHero';
import ProblemSection from '@/components/sections/ProblemSection';
import SolutionSection from '@/components/sections/SolutionSection';
import HowItWorksSection from '@/components/sections/HowItWorksSection';
import FeaturedAssetsSection from '@/components/sections/FeaturedAssetsSection';
import PlatformStats from '@/components/sections/PlatformStats';
import TestimonialsSection from '@/components/sections/TestimonialsSection';
import FinalCTASection from '@/components/sections/FinalCTASection';

export default function HomePage() {
  return (
    <FluidLayout showHeader={true}>
      {/* 1. Enhanced Hero Section */}
      <FluidHero />

      {/* 2. Problem Section - Updated to dark theme */}
      <section id="problem" className="fluid-section-sm bg-slate-900">
        <div className="fluid-container">
          <ProblemSection />
        </div>
      </section>

      {/* 3. Solution Section - Updated to dark theme */}
      <section id="solution" className="fluid-section-sm bg-slate-800">
        <div className="fluid-container">
          <SolutionSection />
        </div>
      </section>

      {/* 4. How It Works Section - Updated to dark theme */}
      <section id="how-it-works" className="fluid-section-sm bg-slate-900">
        <div className="fluid-container">
          <HowItWorksSection />
        </div>
      </section>

      {/* 5. Featured Assets Section */}
      <section id="featured-assets" className="fluid-section-sm bg-slate-800">
        <div className="fluid-container">
          <FeaturedAssetsSection />
        </div>
      </section>

      {/* 6. Platform Statistics */}
      <PlatformStats />

      {/* 7. Testimonials Section - Updated to dark theme */}
      <TestimonialsSection />

      {/* 8. Final CTA Section */}
      <FinalCTASection />
    </FluidLayout>
  );
}

--- END: src/app/page.tsx ---

=== FILE: src/app/treasury/page.tsx ===

"use client";

import React from 'react';
import FluidLayout from '@/components/layout/FluidLayout';
import FluidTreasury from '@/components/sections/FluidTreasury';

export default function TreasuryPage() {
  return (
    <FluidLayout>
      <FluidTreasury />
    </FluidLayout>
  );
}

--- END: src/app/treasury/page.tsx ---

=== COMPONENTS STRUCTURE ===
=== FILE: src/components/layout/FluidLayout.tsx ===

'use client';

import React, { useEffect, useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useUniversal } from '@/lib/universal';
import PremiumHeader from './PremiumHeader';

interface FluidLayoutProps {
  children: React.ReactNode;
  showHeader?: boolean;
}

// Throttle helper
function throttle(func: Function, limit: number) {
  let inThrottle: boolean;
  return function(this: any, ...args: any[]) {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() => (inThrottle = false), limit);
    }
  };
}

export default function FluidLayout({ children, showHeader = true }: FluidLayoutProps) {
  const { user } = useAuth();
  const { deviceInfo, universalAttributes } = useUniversal();
  const [isMobile, setIsMobile] = useState(deviceInfo.type === 'mobile');

  useEffect(() => {
    const handleResize = throttle(() => {
      setIsMobile(deviceInfo.type === 'mobile');
    }, 100);

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, [deviceInfo.type]);

  return (
    <div
      className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50/30"
      {...universalAttributes}
    >
      {showHeader && <PremiumHeader />}
      <main className="flex-1">{children}</main>
    </div>
  );
}

--- END: src/components/layout/FluidLayout.tsx ---

=== FILE: src/components/layout/PremiumHeader.tsx ===

// src/components/layout/PremiumHeader.tsx - DARK THEME FIXED
"use client";

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { usePathname, useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Home, BarChart3, ShoppingCart, Users, Building2,
  Menu, X, LogOut, User, Zap, ChevronDown, Globe,
  Shield, TrendingUp
} from 'lucide-react';

export default function PremiumHeader() {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const pathname = usePathname();
  const router = useRouter();
  const { user, login, logout } = useAuth();

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 20);
    };

    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };

    checkMobile();
    window.addEventListener('scroll', handleScroll);
    window.addEventListener('resize', checkMobile);

    return () => {
      window.removeEventListener('scroll', handleScroll);
      window.removeEventListener('resize', checkMobile);
    };
  }, []);

  // FIXED: Professional financial navigation - Our Journey always shows
  const navigation = user ? [
    { name: 'Home', href: '/home', icon: Home, description: 'Platform Overview' },
    { name: 'Portfolio', href: '/dashboard', icon: BarChart3, description: 'Your Investments' },
    { name: 'Marketplace', href: '/marketplace', icon: ShoppingCart, description: 'Browse Assets' },
    { name: 'Our Journey', href: '/our-journey', icon: Globe, description: 'Learn About Us' },
    { name: 'Treasury', href: '/treasury', icon: Building2, description: 'Platform Funds' },
    { name: 'DAO', href: '/dao', icon: Users, description: 'Governance' },
  ] : [
    { name: 'Home', href: '/home', icon: Home, description: 'Get Started' },
    { name: 'Marketplace', href: '/marketplace', icon: ShoppingCart, description: 'Browse Assets' },
    { name: 'Our Journey', href: '/our-journey', icon: Globe, description: 'Learn About Us' },
  ];

  const isActive = (href: string) => pathname === href;

  const handleLogin = () => {
    login('/dashboard');
    setIsMobileMenuOpen(false);
  };

  const handleLogout = () => {
    logout();
    setIsUserMenuOpen(false);
    setIsMobileMenuOpen(false);
  };

  return (
    <header className={`fixed top-0 left-0 right-0 z-50 transition-all duration-500 ${
      isScrolled
        ? 'py-3 bg-slate-900/95 backdrop-blur-xl border-b border-slate-700 shadow-2xl'
        : 'py-4 bg-slate-900/80 backdrop-blur-md'
    }`}>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between">
          {/* Logo & Brand */}
          <div className="flex items-center space-x-8">
            <Link href="/home" className="flex items-center space-x-3">
              <div className="w-10 h-10 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-xl flex items-center justify-center">
                <Shield className="w-6 h-6 text-white" />
              </div>
              <div className="flex flex-col">
                <span className="text-xl font-bold text-white">ASRD</span>
                <span className="text-xs text-cyan-400 -mt-1">Real World Assets</span>
              </div>
            </Link>

            {/* Desktop Navigation */}
            <nav className="hidden lg:flex items-center space-x-1">
              {navigation.map((item) => (
                <Link
                  key={item.name}
                  href={item.href}
                  className={`relative group px-4 py-2 rounded-lg transition-all duration-300 ${
                    isActive(item.href)
                      ? 'bg-cyan-500/20 text-cyan-400 border border-cyan-500/30'
                      : 'text-slate-300 hover:text-cyan-400 hover:bg-slate-800/50'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    <item.icon className="w-4 h-4" />
                    <span className="font-medium text-sm">{item.name}</span>
                  </div>
                </Link>
              ))}
            </nav>
          </div>

          {/* Auth Section */}
          <div className="hidden lg:flex items-center space-x-4">
            {user ? (
              <div className="flex items-center space-x-4">
                {/* User Menu */}
                <div className="relative">
                  <button
                    onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
                    className="flex items-center space-x-3 px-4 py-2 bg-slate-800/50 rounded-lg border border-slate-700 hover:border-cyan-500/50 transition-all group"
                  >
                    <div className="flex items-center space-x-2">
                      <div className="w-8 h-8 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-full flex items-center justify-center">
                        <User className="w-4 h-4 text-white" />
                      </div>
                      <div className="text-left">
                        <div className="text-white font-semibold text-sm">{user.walletAddress.slice(0, 6)}...{user.walletAddress.slice(-4)}</div>
                        <div className="text-cyan-400 text-xs">${user.portfolioValue?.toLocaleString() || '0'}</div>
                      </div>
                    </div>
                    <ChevronDown className={`w-4 h-4 text-slate-400 transition-transform duration-200 ${
                      isUserMenuOpen ? 'rotate-180' : ''
                    }`} />
                  </button>

                  {/* User Dropdown */}
                  <AnimatePresence>
                    {isUserMenuOpen && (
                      <motion.div
                        initial={{ opacity: 0, y: 10, scale: 0.95 }}
                        animate={{ opacity: 1, y: 0, scale: 1 }}
                        exit={{ opacity: 0, y: 10, scale: 0.95 }}
                        className="absolute top-full right-0 mt-2 w-64 bg-slate-800 rounded-xl border border-slate-700 shadow-2xl overflow-hidden"
                      >
                        <div className="p-4 border-b border-slate-700">
                          <div className="text-white font-semibold">{user.walletAddress.slice(0, 6)}...{user.walletAddress.slice(-4)}</div>
                          <div className="text-cyan-400 text-sm">Premium Investor</div>
                        </div>

                        <div className="p-3">
                          <div className="grid grid-cols-2 gap-2 mb-3">
                            <div className="text-center p-3 bg-cyan-500/10 rounded-lg border border-cyan-500/20">
                              <div className="text-cyan-400 font-bold">${user.portfolioValue?.toLocaleString() || '0'}</div>
                              <div className="text-cyan-400/80 text-xs">Portfolio</div>
                            </div>
                            <div className="text-center p-3 bg-blue-500/10 rounded-lg border border-blue-500/20">
                              <div className="text-blue-400 font-bold">{user.asrdBalance?.toLocaleString() || '5,000'}</div>
                              <div className="text-blue-400/80 text-xs">ASRD Tokens</div>
                            </div>
                          </div>

                          <button
                            onClick={handleLogout}
                            className="w-full flex items-center justify-center space-x-2 px-4 py-3 text-red-400 hover:text-red-300 bg-red-500/10 hover:bg-red-500/20 border border-red-500/20 rounded-lg transition-all text-sm"
                          >
                            <LogOut className="w-4 h-4" />
                            <span className="font-semibold">Logout</span>
                          </button>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
              </div>
            ) : (
              <div className="flex items-center space-x-3">
                <button
                  onClick={handleLogin}
                  className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white px-6 py-2.5 rounded-lg font-semibold text-sm transition-all duration-300 flex items-center space-x-2 group shadow-lg hover:shadow-cyan-500/25"
                >
                  <User className="w-4 h-4" />
                  <span>Log in</span>
                </button>
              </div>
            )}
          </div>

          {/* Mobile Menu Button */}
          <button
            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            className="lg:hidden p-2 text-slate-300 hover:text-white transition-colors bg-slate-800/50 rounded-lg border border-slate-700 hover:border-cyan-500/50"
            aria-label="Toggle mobile menu"
          >
            {isMobileMenuOpen ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}
          </button>
        </div>

        {/* Mobile Menu */}
        <AnimatePresence>
          {isMobileMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="lg:hidden mt-4 bg-slate-800 rounded-xl border border-slate-700 shadow-2xl overflow-hidden"
            >
              <div className="p-4 space-y-2">
                {navigation.map((item) => (
                  <Link
                    key={item.name}
                    href={item.href}
                    onClick={() => setIsMobileMenuOpen(false)}
                    className={`flex items-center space-x-3 px-4 py-3 rounded-lg text-base font-medium transition-all ${
                      isActive(item.href)
                        ? 'bg-cyan-500/20 text-cyan-400 border border-cyan-500/30'
                        : 'text-slate-300 hover:text-cyan-400 hover:bg-slate-700/50'
                    }`}
                  >
                    <item.icon className="w-5 h-5" />
                    <div className="flex-1">
                      <div className="font-semibold">{item.name}</div>
                      <div className="text-xs text-cyan-400/80">{item.description}</div>
                    </div>
                  </Link>
                ))}

                {/* Mobile Auth */}
                <div className="pt-4 border-t border-slate-700">
                  {user ? (
                    <div className="space-y-3">
                      <div className="px-4 py-3 bg-slate-700/50 rounded-lg border border-slate-600">
                        <div className="flex items-center space-x-2 mb-2">
                          <User className="w-4 h-4 text-cyan-400" />
                          <span className="font-semibold text-white">{user.walletAddress.slice(0, 6)}...{user.walletAddress.slice(-4)}</span>
                        </div>
                        <div className="grid grid-cols-2 gap-2 text-sm">
                          <div className="text-cyan-400">${user.portfolioValue?.toLocaleString() || '0'}</div>
                          <div className="text-blue-400">{user.asrdBalance?.toLocaleString() || '5,000'} ASRD</div>
                        </div>
                      </div>
                      <button
                        onClick={handleLogout}
                        className="w-full flex items-center justify-center space-x-2 px-4 py-3 text-red-400 hover:text-red-300 bg-red-500/10 hover:bg-red-500/20 border border-red-500/20 rounded-lg transition-all"
                      >
                        <LogOut className="w-5 h-5" />
                        <span className="font-semibold">Logout</span>
                      </button>
                    </div>
                  ) : (
                    <button
                      onClick={handleLogin}
                      className="w-full bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white py-3 rounded-lg font-semibold transition-all duration-300 flex items-center justify-center space-x-2 shadow-lg"
                    >
                      <User className="w-5 h-5" />
                      <span>Log in</span>
                    </button>
                  )}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </header>
  );
}
--- END: src/components/layout/PremiumHeader.tsx ---

=== FILE: src/components/sections/FeaturedAssetsSection.tsx ===

// src/components/sections/FeaturedAssetsSection.tsx - PREMIUM ENHANCED VERSION
"use client";

import { motion } from 'framer-motion';
import { useState } from 'react';
import { 
  Star, TrendingUp, MapPin, Calendar, Shield, Users, 
  ArrowRight, Crown, Zap, Sparkles, Target, Award,
  Eye, Heart, Share2, Clock, BarChart3
} from 'lucide-react';
import { mockAssets } from '@/data/mockData';
import { useUniversal } from '@/lib/universal';
import InvestmentModal from '@/components/ui/InvestmentModal';
import AssetDetailsModal from '@/components/ui/AssetDetailsModal';
import { Asset } from '@/types';
import RealAssetImage from '@/components/ui/RealAssetImage';
import { useAuth } from '@/contexts/AuthContext';
import { useNotification } from '@/contexts/NotificationContext';

export default function FeaturedAssetsSection() {
  const { universalAttributes, deviceInfo } = useUniversal();
  const { user, login, invest } = useAuth();
  const { showNotification } = useNotification();
  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null);
  const [isInvestmentModalOpen, setIsInvestmentModalOpen] = useState(false);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [hoveredAsset, setHoveredAsset] = useState<string | null>(null);
  const [likedAssets, setLikedAssets] = useState<Set<string>>(new Set());

  const featuredAssets = mockAssets.slice(0, 3);

  // Enhanced investment handler with notifications
  const handleInvest = (asset: Asset) => {
    if (!user) {
      login('/home');
      showNotification({ 
        title: 'Connect Your Wallet', 
        message: 'Please connect your wallet to start investing', 
        type: 'warning',
        duration: 4000
      });
      return;
    }
    
    setSelectedAsset(asset);
    setIsInvestmentModalOpen(true);
    
    // Track investment interest
    console.log(`User interested in investing in: ${asset.title}`);
  };

  // Enhanced investment confirmation with success flow
  const handleInvestmentConfirm = (amount: number) => {
    if (!selectedAsset || !user) return;
    
    const success = invest(amount, selectedAsset.name, Number(selectedAsset.id));
    
    if (success) {
      showNotification({
        title: 'Investment Successful! 🎉',
        message: `You've invested $${amount.toLocaleString()} in ${selectedAsset.title}. Welcome to the investor community!`,
        type: 'success',
        duration: 6000
      });
      
      // Track successful investment
      console.log(`Investment completed: $${amount} in ${selectedAsset.title}`);
    } else {
      showNotification({
        title: 'Insufficient Balance',
        message: 'You need more ASRD tokens to complete this investment. Visit the treasury to purchase more.',
        type: 'error',
        duration: 5000
      });
    }
    
    setIsInvestmentModalOpen(false);
    setSelectedAsset(null);
  };

  const handleViewDetails = (asset: Asset) => {
    setSelectedAsset(asset);
    setIsDetailsModalOpen(true);
  };

  const handleLikeAsset = (assetId: string, e: React.MouseEvent) => {
    e.stopPropagation();
    const newLikedAssets = new Set(likedAssets);
    if (newLikedAssets.has(assetId)) {
      newLikedAssets.delete(assetId);
      showNotification({
        title: 'Removed from Favorites',
        message: 'Asset removed from your favorites',
        type: 'info',
        duration: 2000
      });
    } else {
      newLikedAssets.add(assetId);
      showNotification({
        title: 'Added to Favorites',
        message: 'Asset added to your favorites list',
        type: 'success',
        duration: 2000
      });
    }
    setLikedAssets(newLikedAssets);
  };

  const getRiskColor = (riskLevel: string) => {
    switch (riskLevel.toLowerCase()) {
      case 'low': 
        return 'text-emerald-400 bg-emerald-400/10 border-emerald-400/20 shadow-emerald-500/10';
      case 'medium': 
        return 'text-amber-400 bg-amber-400/10 border-amber-400/20 shadow-amber-500/10';
      case 'high': 
        return 'text-rose-400 bg-rose-400/10 border-rose-400/20 shadow-rose-500/10';
      default: 
        return 'text-slate-400 bg-slate-400/10 border-slate-400/20';
    }
  };

  const getROIColor = (roi: number) => {
    if (roi >= 40) return 'from-amber-500 to-orange-500';
    if (roi >= 30) return 'from-emerald-500 to-green-500';
    if (roi >= 20) return 'from-cyan-500 to-blue-500';
    return 'from-slate-500 to-slate-600';
  };

  const getAssetTypeIcon = (type: string) => {
    switch (type) {
      case 'real-estate':
        return <TrendingUp className="w-4 h-4" />;
      case 'horse-racing':
        return <Zap className="w-4 h-4" />;
      default:
        return <BarChart3 className="w-4 h-4" />;
    }
  };

  return (
    <section 
      className="relative py-24 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 overflow-hidden"
      {...universalAttributes}
    >
      {/* Premium Background Elements */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute top-10 left-10 w-4 h-4 bg-cyan-400 rounded-full opacity-20 animate-pulse" />
        <div className="absolute top-1/4 right-20 w-3 h-3 bg-blue-400 rounded-full opacity-30 animate-bounce" />
        <div className="absolute bottom-1/3 left-1/4 w-2 h-2 bg-purple-400 rounded-full opacity-40 animate-ping" />
      </div>

      <div className="max-w-7xl mx-auto relative z-10">
        {/* Enhanced Section Header */}
        <motion.div
          initial={{ opacity: 0, y: 40 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, ease: "easeOut" }}
          className="text-center mb-20"
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            whileInView={{ scale: 1, opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.6 }}
            className="inline-flex items-center gap-3 px-6 py-3 rounded-2xl bg-slate-800/50 border border-slate-700/50 backdrop-blur-sm mb-6"
          >
            <Crown className="w-5 h-5 text-amber-400" />
            <span className="text-amber-400 font-semibold text-sm uppercase tracking-wider">
              Premium Curated Selection
            </span>
            <Sparkles className="w-5 h-5 text-amber-400" />
          </motion.div>

          <h2 className="text-5xl md:text-6xl font-bold text-white mb-6">
            Featured <span className="text-transparent bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text">Investment</span> Opportunities
          </h2>
          
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4, duration: 0.6 }}
            className="text-xl md:text-2xl text-slate-300 max-w-4xl mx-auto leading-relaxed"
          >
            Hand-picked premium assets with verified track records, exclusive access, and exceptional 
            <span className="text-cyan-400 font-semibold"> 22-46% projected returns</span>. Each opportunity is thoroughly vetted for maximum potential.
          </motion.p>

          {/* Stats Bar */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6, duration: 0.6 }}
            className="flex flex-wrap justify-center gap-8 mt-12"
          >
            {[
              { value: '7.2M+', label: 'Total Invested', icon: TrendingUp },
              { value: '1.4K+', label: 'Active Investors', icon: Users },
              { value: '98%', label: 'Success Rate', icon: Award },
              { value: '24/7', label: 'Support', icon: Clock }
            ].map((stat, index) => (
              <motion.div
                key={stat.label}
                initial={{ opacity: 0, scale: 0.8 }}
                whileInView={{ opacity: 1, scale: 1 }}
                transition={{ delay: 0.8 + index * 0.1, duration: 0.5 }}
                className="text-center group cursor-pointer"
              >
                <div className="w-16 h-16 bg-slate-800/50 border border-slate-700/50 rounded-2xl flex items-center justify-center mx-auto mb-3 group-hover:border-cyan-500/50 transition-all duration-300">
                  <stat.icon className="w-7 h-7 text-cyan-400 group-hover:scale-110 transition-transform" />
                </div>
                <div className="text-2xl font-bold text-white group-hover:text-cyan-400 transition-colors">
                  {stat.value}
                </div>
                <div className="text-sm text-slate-400 mt-1">{stat.label}</div>
              </motion.div>
            ))}
          </motion.div>
        </motion.div>

        {/* Premium Featured Assets Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {featuredAssets.map((asset, index) => (
            <motion.div
              key={asset.id}
              initial={{ opacity: 0, y: 50, scale: 0.95 }}
              whileInView={{ opacity: 1, y: 0, scale: 1 }}
              transition={{ 
                duration: 0.7, 
                delay: index * 0.2,
                ease: "easeOut"
              }}
              whileHover={{ 
                y: -8,
                scale: 1.02,
                transition: { duration: 0.3, ease: "easeInOut" }
              }}
              onHoverStart={() => setHoveredAsset(asset.id.toString())}
              onHoverEnd={() => setHoveredAsset(null)}
              className="group relative"
            >
              {/* Premium Card */}
              <div className="relative bg-gradient-to-br from-slate-800/80 to-slate-900/90 rounded-3xl border border-slate-700/50 overflow-hidden shadow-2xl backdrop-blur-sm transition-all duration-500 group-hover:border-cyan-500/30 group-hover:shadow-cyan-500/10">
                
                {/* Premium Glow Effect */}
                <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/5 via-transparent to-blue-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />

                {/* Asset Image with Enhanced Overlay */}
                <div className="relative h-64 overflow-hidden">
                  <RealAssetImage
                    asset={asset}
                    size="xl"
                    className="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
                  />
                  
                  {/* Gradient Overlay */}
                  <div className="absolute inset-0 bg-gradient-to-t from-slate-900/90 via-slate-900/20 to-transparent" />
                  
                  {/* Premium Top Bar */}
                  <div className="absolute top-4 left-4 right-4 flex items-start justify-between">
                    {/* Premium Badges */}
                    <div className="flex flex-wrap gap-2">
                      {asset.badges?.slice(0, 2).map((badge, badgeIndex) => (
                        <motion.span
                          key={badgeIndex}
                          initial={{ opacity: 0, x: -20 }}
                          whileInView={{ opacity: 1, x: 0 }}
                          transition={{ delay: index * 0.3 + badgeIndex * 0.1 }}
                          className={`px-3 py-1.5 rounded-full text-xs font-bold backdrop-blur-md border shadow-lg ${
                            badge.color === 'emerald' ? 'bg-emerald-500/20 text-emerald-300 border-emerald-500/30 shadow-emerald-500/20' :
                            badge.color === 'amber' ? 'bg-amber-500/20 text-amber-300 border-amber-500/30 shadow-amber-500/20' :
                            badge.color === 'blue' ? 'bg-blue-500/20 text-blue-300 border-blue-500/30 shadow-blue-500/20' :
                            badge.color === 'rose' ? 'bg-rose-500/20 text-rose-300 border-rose-500/30 shadow-rose-500/20' :
                            'bg-purple-500/20 text-purple-300 border-purple-500/30 shadow-purple-500/20'
                          }`}
                        >
                          {badge.label}
                        </motion.span>
                      ))}
                    </div>

                    {/* Action Buttons */}
                    <div className="flex gap-2">
                      <motion.button
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                        onClick={(e) => handleLikeAsset(asset.id.toString(), e)}
                        className="p-2 bg-slate-900/80 backdrop-blur-md rounded-xl border border-slate-700/50 hover:border-rose-500/50 transition-all duration-300"
                      >
                        <Heart 
                          className={`w-4 h-4 transition-all duration-300 ${
                            likedAssets.has(asset.id.toString()) 
                              ? 'fill-rose-500 text-rose-500' 
                              : 'text-slate-400 hover:text-rose-400'
                          }`}
                        />
                      </motion.button>
                      
                      <motion.button
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                        className="p-2 bg-slate-900/80 backdrop-blur-md rounded-xl border border-slate-700/50 hover:border-cyan-500/50 transition-all duration-300"
                      >
                        <Share2 className="w-4 h-4 text-slate-400 hover:text-cyan-400" />
                      </motion.button>
                    </div>
                  </div>

                  {/* Risk Level */}
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.3 + 0.2 }}
                    className="absolute bottom-4 left-4"
                  >
                    <span className={`px-3 py-1.5 rounded-full text-xs font-bold backdrop-blur-md border shadow-lg ${getRiskColor(asset.riskLevel)}`}>
                      {asset.riskLevel} Risk
                    </span>
                  </motion.div>

                  {/* ROI Badge */}
                  <motion.div
                    initial={{ opacity: 0, scale: 0.8 }}
                    whileInView={{ opacity: 1, scale: 1 }}
                    transition={{ delay: index * 0.3 + 0.3 }}
                    className="absolute bottom-4 right-4"
                  >
                    <div className={`bg-gradient-to-r ${getROIColor(asset.projectedROI)} text-white px-3 py-1.5 rounded-full text-xs font-bold shadow-lg backdrop-blur-md border border-white/20`}>
                      {asset.projectedROI}% ROI
                    </div>
                  </motion.div>
                </div>

                {/* Enhanced Asset Content */}
                <div className="p-6 relative">
                  {/* Location & Type */}
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center gap-2 text-slate-400">
                      <MapPin className="w-4 h-4" />
                      <span className="text-sm font-medium">{asset.location.city}, {asset.location.country}</span>
                    </div>
                    <div className="flex items-center gap-2 text-cyan-400 bg-cyan-500/10 px-3 py-1 rounded-full border border-cyan-500/20">
                      {getAssetTypeIcon(asset.type)}
                      <span className="text-xs font-semibold">
                        {asset.type.replace('-', ' ').toUpperCase()}
                      </span>
                    </div>
                  </div>

                  {/* Title */}
                  <h3 className="text-xl font-bold text-white mb-3 line-clamp-2 group-hover:text-cyan-400 transition-colors duration-300">
                    {asset.title}
                  </h3>

                  {/* Description */}
                  <p className="text-slate-400 text-sm mb-6 line-clamp-2 leading-relaxed">
                    {asset.description}
                  </p>

                  {/* Enhanced Stats Grid */}
                  <div className="grid grid-cols-3 gap-4 mb-6">
                    <div className="text-center p-3 bg-slate-800/50 rounded-xl border border-slate-700/50 group-hover:border-cyan-500/30 transition-all duration-300">
                      <div className="text-2xl font-bold text-cyan-400">{asset.projectedROI}%</div>
                      <div className="text-xs text-slate-400 mt-1">Projected ROI</div>
                    </div>
                    <div className="text-center p-3 bg-slate-800/50 rounded-xl border border-slate-700/50 group-hover:border-blue-500/30 transition-all duration-300">
                      <div className="text-2xl font-bold text-blue-400">{asset.term}</div>
                      <div className="text-xs text-slate-400 mt-1">Months</div>
                    </div>
                    <div className="text-center p-3 bg-slate-800/50 rounded-xl border border-slate-700/50 group-hover:border-emerald-500/30 transition-all duration-300">
                      <div className="text-xl font-bold text-emerald-400">{asset.minimumInvestment}</div>
                      <div className="text-xs text-slate-400 mt-1">Min. Invest</div>
                    </div>
                  </div>

                  {/* Investor Metrics */}
                  <div className="flex items-center justify-between mb-6 text-xs text-slate-500">
                    <div className="flex items-center gap-4">
                      <div className="flex items-center gap-1">
                        <Users className="w-3 h-3" />
                        <span>{asset.investorCount.toLocaleString()} investors</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Star className="w-3 h-3" />
                        <span>{asset.rating}</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <Shield className="w-3 h-3" />
                        <span>Blockchain Verified</span>
                      </div>
                    </div>
                  </div>

                  {/* Enhanced Progress Bar */}
                  <div className="mb-6">
                    <div className="flex justify-between text-sm text-slate-400 mb-3">
                      <span>Funding Progress</span>
                      <span className="font-semibold text-cyan-400">{asset.fundingProgress}% Funded</span>
                    </div>
                    <div className="w-full bg-slate-700 rounded-full h-2.5 overflow-hidden">
                      <motion.div 
                        className="bg-gradient-to-r from-cyan-500 to-blue-500 h-2.5 rounded-full relative overflow-hidden"
                        initial={{ width: 0 }}
                        whileInView={{ width: `${asset.fundingProgress}%` }}
                        transition={{ duration: 1.5, delay: index * 0.1 + 0.5, ease: "easeOut" }}
                      >
                        <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent -skew-x-12 animate-shimmer" />
                      </motion.div>
                    </div>
                  </div>

                  {/* Enhanced Action Buttons */}
                  <div className="flex gap-3">
                    <motion.button
                      onClick={() => handleInvest(asset)}
                      className="flex-1 bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white py-3.5 px-6 rounded-xl font-semibold transition-all duration-300 flex items-center justify-center gap-2 group/btn relative overflow-hidden"
                      whileHover={{ scale: 1.02, y: -2 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <Target className="w-4 h-4" />
                      <span>Invest Now</span>
                      <div className="absolute inset-0 -skew-x-12 bg-gradient-to-r from-transparent via-white/10 to-transparent translate-x-[-100%] group-hover/btn:translate-x-[100%] transition-transform duration-1000" />
                    </motion.button>
                    
                    <motion.button
                      onClick={() => handleViewDetails(asset)}
                      className="flex items-center justify-center gap-2 text-slate-300 hover:text-white transition-all duration-300 border border-slate-600 hover:border-cyan-500/50 rounded-xl px-5 py-3.5 group/details"
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <Eye className="w-4 h-4 group-hover/details:scale-110 transition-transform" />
                      <span className="font-semibold">Details</span>
                      <ArrowRight className="w-4 h-4 group-hover/details:translate-x-1 transition-transform" />
                    </motion.button>
                  </div>
                </div>

                {/* Hover Effect Border */}
                <div className="absolute inset-0 rounded-3xl border-2 border-transparent group-hover:border-cyan-500/20 transition-all duration-500 pointer-events-none" />
              </div>

              {/* Floating Elements on Hover */}
              {hoveredAsset === asset.id.toString() && (
                <>
                  <div className="absolute -top-2 -right-2 w-4 h-4 bg-cyan-400 rounded-full opacity-60 animate-ping" />
                  <div className="absolute -bottom-2 -left-2 w-3 h-3 bg-blue-400 rounded-full opacity-40 animate-bounce" />
                </>
              )}
            </motion.div>
          ))}
        </div>

        {/* Enhanced Bottom CTA */}
        <motion.div
          initial={{ opacity: 0, y: 40 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.6 }}
          className="text-center mt-16"
        >
          <motion.button
            className="bg-transparent border-2 border-cyan-400 text-cyan-400 hover:bg-cyan-400 hover:text-white px-10 py-5 rounded-2xl font-semibold text-lg transition-all duration-500 transform hover:scale-105 hover:shadow-2xl hover:shadow-cyan-500/25 group relative overflow-hidden"
            whileHover={{ y: -5 }}
            whileTap={{ scale: 0.95 }}
          >
            <span className="relative z-10 flex items-center gap-3">
              <Sparkles className="w-5 h-5 group-hover:rotate-180 transition-transform duration-500" />
              Explore All Investment Opportunities
              <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform" />
            </span>
            <div className="absolute inset-0 bg-gradient-to-r from-cyan-500 to-blue-500 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-500 origin-left" />
          </motion.button>
          
          <motion.p
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            transition={{ delay: 0.8, duration: 0.6 }}
            className="text-slate-400 mt-6 text-sm"
          >
            Join 1,400+ investors who trust our curated opportunities
          </motion.p>
        </motion.div>
      </div>

      {/* Enhanced Modals */}
      <InvestmentModal
        isOpen={isInvestmentModalOpen}
        onClose={() => setIsInvestmentModalOpen(false)}
        asset={selectedAsset}
        onInvest={handleInvestmentConfirm}
        userBalance={user?.asrdBalance || 0}
      />

      <AssetDetailsModal
        isOpen={isDetailsModalOpen}
        onClose={() => setIsDetailsModalOpen(false)}
        asset={selectedAsset}
      />

      {/* Custom Styles */}
      <style jsx>{`
        @keyframes shimmer {
          0% { transform: translateX(-100%); }
          100% { transform: translateX(100%); }
        }
        .animate-shimmer {
          animation: shimmer 2s infinite;
        }
      `}</style>
    </section>
  );
}
--- END: src/components/sections/FeaturedAssetsSection.tsx ---

=== FILE: src/components/sections/FinalCTASection.tsx ===

"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { Zap, ArrowRight, Shield, CheckCircle, User } from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';

export default function FinalCTASection() {
  const { login } = useAuth();

  const handleLogin = () => {
    login('/dashboard');
  };

  return (
    <section className="fluid-section-lg bg-gradient-to-br from-slate-50 to-white">
      <div className="fluid-container">
        <div className="max-w-4xl mx-auto">
          {/* Main CTA Card */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="bg-white rounded-3xl shadow-2xl border border-slate-200 overflow-hidden"
          >
            <div className="p-8 sm:p-12">
              <div className="text-center mb-6">
                <div className="w-16 h-16 bg-gradient-to-r from-emerald-500 to-sapphire-500 rounded-full flex items-center justify-center mx-auto mb-4">
                  <Zap className="w-8 h-8 text-white" />
                </div>
                <h3 className="text-2xl font-bold text-slate-900 mb-2">
                  Begin in Minutes
                </h3>
                <p className="text-slate-600">
                  Log in to your account and start investing today
                </p>
              </div>

              {/* Single CTA Button */}
              <div className="max-w-sm mx-auto">
                <motion.button
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  onClick={handleLogin}
                  className="w-full bg-gradient-to-r from-emerald-600 to-sapphire-600 text-white py-4 rounded-xl font-semibold text-lg shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center space-x-2"
                >
                  <User className="w-5 h-5" />
                  <span>Log in to Dashboard</span>
                  <ArrowRight className="w-5 h-5" />
                </motion.button>
              </div>

              {/* Security Badge */}
              <div className="mt-6 pt-6 border-t border-slate-200 flex items-center justify-center space-x-2">
                <div className="flex items-center space-x-2 text-slate-500 text-sm">
                  <Shield className="w-4 h-4 text-emerald-500" />
                  <span>Secure & Regulated Platform</span>
                </div>
              </div>
            </div>

            {/* Feature Highlights */}
            <div className="bg-slate-50 border-t border-slate-200 p-6">
              <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 text-center">
                {[
                  { label: 'No Account Fees', icon: CheckCircle },
                  { label: 'Instant Access', icon: Zap },
                  { label: '24/7 Support', icon: Shield }
                ].map((feature, index) => {
                  const FeatureIcon = feature.icon;
                  return (
                    <motion.div
                      key={feature.label}
                      initial={{ opacity: 0, y: 20 }}
                      whileInView={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.6, delay: index * 0.1 }}
                      viewport={{ once: true }}
                      className="flex items-center justify-center space-x-2 text-slate-600"
                    >
                      <FeatureIcon className="w-4 h-4 text-emerald-500" />
                      <span className="text-sm font-medium">{feature.label}</span>
                    </motion.div>
                  );
                })}
              </div>
            </div>
          </motion.div>

          {/* Trust Indicators */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6, delay: 0.3 }}
            viewport={{ once: true }}
            className="mt-8 text-center"
          >
            <p className="text-slate-500 text-sm">
              Trusted by thousands of investors worldwide • Bank-level security • Fully regulated
            </p>
          </motion.div>
        </div>
      </div>
    </section>
  );
}
--- END: src/components/sections/FinalCTASection.tsx ---

=== FILE: src/components/sections/FluidDAO.tsx ===

"use client";

import React, { useState } from 'react';
import { Users, Vote, Clock, CheckCircle, XCircle, TrendingUp, Award, Shield, Crown, Zap, Target, Gem, ArrowRight, BarChart3, Coins, Building, Ship, Plane } from 'lucide-react';
import { motion } from 'framer-motion';

export default function FluidDAO() {
  const [activeTab, setActiveTab] = useState<'proposals' | 'governance' | 'rewards'>('proposals');
  const [votedProposals, setVotedProposals] = useState<number[]>([]);

  const proposals = [
    {
      id: 1,
      title: "Expand Dubai Luxury Real Estate Portfolio",
      description: "Acquire 3 additional waterfront villas in Palm Jumeirah to capitalize on 32% annual tourism growth and premium rental demand. Projected ROI: 28-35%",
      votesFor: 1842,
      votesAgainst: 428,
      status: "active",
      endDate: "2025-02-15",
      type: "Real Estate",
      impact: "High",
      budget: "$8.5M",
      timeline: "6 months",
      icon: Building
    },
    {
      id: 2,
      title: "Launch Elite Thoroughbred Racing Fund",
      description: "Create specialized investment fund for champion racehorses with proven track records. Includes breeding rights and international racing schedule.",
      votesFor: 1567,
      votesAgainst: 289,
      status: "active",
      endDate: "2025-02-20",
      type: "Sports Assets",
      impact: "Medium",
      budget: "$4.2M",
      timeline: "3 months",
      icon: Zap
    },
    {
      id: 3,
      title: "Mediterranean Superyacht Fleet Upgrade",
      description: "Strategic upgrades to luxury yacht amenities including helipad expansion and premium spa facilities to increase charter rates by 25-40%",
      votesFor: 1321,
      votesAgainst: 198,
      status: "active",
      endDate: "2025-02-25",
      type: "Marine Assets",
      impact: "High",
      budget: "$2.8M",
      timeline: "4 months",
      icon: Ship
    },
    {
      id: 4,
      title: "Private Jet Portfolio Expansion",
      description: "Add 2 new business jets to fleet serving corporate clients in Europe and Middle East. Projected 45% utilization rate with premium charter pricing.",
      votesFor: 987,
      votesAgainst: 156,
      status: "upcoming",
      endDate: "2025-03-10",
      type: "Aviation",
      impact: "Medium",
      budget: "$12M",
      timeline: "8 months",
      icon: Plane
    }
  ];

  const governanceStats = [
    { 
      label: "Community Members", 
      value: "3,247", 
      change: "+427", 
      icon: Users, 
      color: "text-amber-400",
      description: "Active governance participants"
    },
    { 
      label: "Active Proposals", 
      value: "8", 
      change: "+3", 
      icon: Vote, 
      color: "text-emerald-400",
      description: "Currently under review"
    },
    { 
      label: "Approval Rate", 
      value: "82%", 
      change: "+4%", 
      icon: CheckCircle, 
      color: "text-cyan-400",
      description: "Successful proposals"
    },
    { 
      label: "Voting Power", 
      value: "64%", 
      change: "+8%", 
      icon: TrendingUp, 
      color: "text-amber-400",
      description: "Average participation"
    }
  ];

  const rewards = [
    { 
      type: "Proposal Creation", 
      amount: "250 ASRD", 
      description: "Reward for submitting successful governance proposals that benefit the platform",
      icon: Target,
      color: "emerald"
    },
    { 
      type: "Active Voting", 
      amount: "75 ASRD", 
      description: "Monthly reward for participating in 80%+ of active proposals",
      icon: Vote,
      color: "cyan"
    },
    { 
      type: "Community Governance", 
      amount: "150 ASRD", 
      description: "Quarterly reward for consistent platform governance participation",
      icon: Shield,
      color: "amber"
    },
    { 
      type: "Platform Growth", 
      amount: "200 ASRD", 
      description: "Bonus for contributions that drive platform expansion and adoption",
      icon: TrendingUp,
      color: "violet"
    }
  ];

  const getProgressPercentage = (forVotes: number, againstVotes: number) => {
    const total = forVotes + againstVotes;
    return total > 0 ? (forVotes / total) * 100 : 0;
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-emerald-500/20 text-emerald-300 border-emerald-500/30';
      case 'upcoming': return 'bg-cyan-500/20 text-cyan-300 border-cyan-500/30';
      case 'closed': return 'bg-slate-500/20 text-slate-300 border-slate-500/30';
      default: return 'bg-slate-500/20 text-slate-300 border-slate-500/30';
    }
  };

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'High': return 'text-rose-400 bg-rose-500/20 border-rose-500/30';
      case 'Medium': return 'text-amber-400 bg-amber-500/20 border-amber-500/30';
      case 'Low': return 'text-emerald-400 bg-emerald-500/20 border-emerald-500/30';
      default: return 'text-slate-400 bg-slate-500/20 border-slate-500/30';
    }
  };

  const handleVote = (proposalId: number, voteType: 'for' | 'against') => {
    if (!votedProposals.includes(proposalId)) {
      setVotedProposals(prev => [...prev, proposalId]);
      // In real implementation, this would call your voting contract
      console.log(`Voted ${voteType} on proposal ${proposalId}`);
    }
  };

  return (
    <div className="fluid-section">
      <div className="fluid-container">
        {/* Enhanced Header Section */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12 md:mb-16"
        >
          {/* Elite Badge */}
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.6 }}
            className="inline-flex items-center space-x-2 bg-gradient-to-r from-amber-500/20 to-amber-600/20 border border-amber-500/30 rounded-full px-6 py-3 mb-6 backdrop-blur-sm"
          >
            <Crown className="w-5 h-5 text-amber-400" />
            <span className="text-amber-400 font-semibold text-sm">Collective Intelligence in Action</span>
          </motion.div>

          <h1 className="text-4xl md:text-6xl font-bold text-white mb-6">
            Shape the Future of <span className="bg-gradient-to-r from-amber-400 to-cyan-400 bg-clip-text text-transparent">Real-World Asset</span> Investment
          </h1>
          <p className="text-xl text-slate-300 max-w-3xl mx-auto leading-relaxed">
            Your voice matters. Join 3,247+ investors driving platform evolution through transparent, 
            decentralized governance and community-powered decisions.
          </p>
        </motion.div>

        {/* Enhanced Governance Stats */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-6 mb-12 md:mb-16">
          {governanceStats.map((stat, index) => (
            <motion.div
              key={stat.label}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6 text-center hover:border-cyan-400/30 transition-all duration-300"
            >
              <div className={`w-12 h-12 ${stat.color.replace('text-', 'bg-')} ${stat.color.replace('text-', 'bg-')}/20 rounded-xl flex items-center justify-center mx-auto mb-3`}>
                <stat.icon className={`w-6 h-6 ${stat.color}`} />
              </div>
              <div className="text-2xl font-bold text-white mb-1">{stat.value}</div>
              <div className="flex items-center justify-center space-x-1 text-emerald-400 text-sm mb-2">
                <TrendingUp className="w-4 h-4" />
                <span>{stat.change}</span>
              </div>
              <div className="text-slate-300 font-medium text-sm mb-1">{stat.label}</div>
              <div className="text-slate-400 text-xs">{stat.description}</div>
            </motion.div>
          ))}
        </div>

        {/* Enhanced Tabs */}
        <div className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6 md:p-8 mb-8">
          {/* Tab Navigation */}
          <div className="flex flex-col md:flex-row md:space-x-2 space-y-2 md:space-y-0 mb-6 md:mb-8">
            {[
              { id: 'proposals', label: 'Active Proposals', icon: Vote, count: proposals.filter(p => p.status === 'active').length },
              { id: 'governance', label: 'Governance Framework', icon: Shield },
              { id: 'rewards', label: 'Community Rewards', icon: Award }
            ].map((tab) => (
              <motion.button
                key={tab.id}
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => setActiveTab(tab.id as any)}
                className={`flex items-center space-x-3 px-4 md:px-6 py-3 md:py-4 rounded-xl font-semibold transition-all duration-300 text-sm md:text-base ${
                  activeTab === tab.id
                    ? 'bg-gradient-to-r from-cyan-500 to-blue-600 text-white shadow-lg'
                    : 'bg-slate-700/50 text-slate-300 hover:text-white hover:bg-slate-700'
                }`}
              >
                <tab.icon className="w-5 h-5" />
                <span>{tab.label}</span>
                {tab.count && (
                  <span className="bg-amber-500 text-white px-2 py-1 rounded-full text-xs font-bold">
                    {tab.count}
                  </span>
                )}
              </motion.button>
            ))}
          </div>

          {/* Proposals Tab */}
          {activeTab === 'proposals' && (
            <div className="space-y-6">
              {proposals.map((proposal, index) => {
                const progress = getProgressPercentage(proposal.votesFor, proposal.votesAgainst);
                const hasVoted = votedProposals.includes(proposal.id);
                const ProposalIcon = proposal.icon;

                return (
                  <motion.div
                    key={proposal.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    className="bg-gradient-to-br from-slate-800/60 to-slate-900/60 backdrop-blur-md rounded-2xl border border-slate-700 p-6 hover:border-cyan-400/30 transition-all duration-300"
                  >
                    <div className="flex flex-col lg:flex-row lg:items-start justify-between gap-6 mb-4">
                      <div className="flex-1">
                        {/* Proposal Header */}
                        <div className="flex flex-wrap items-center gap-2 mb-3">
                          <span className={`px-3 py-1 rounded-full text-xs font-semibold border ${getStatusColor(proposal.status)}`}>
                            {proposal.status.toUpperCase()}
                          </span>
                          <span className="px-3 py-1 bg-cyan-500/20 text-cyan-300 rounded-full text-xs font-semibold border border-cyan-500/30">
                            {proposal.type}
                          </span>
                          <span className={`px-3 py-1 rounded-full text-xs font-semibold border ${getImpactColor(proposal.impact)}`}>
                            {proposal.impact} Impact
                          </span>
                        </div>

                        {/* Proposal Content */}
                        <div className="flex items-start space-x-4 mb-4">
                          <div className="w-12 h-12 bg-cyan-500/20 rounded-xl flex items-center justify-center flex-shrink-0">
                            <ProposalIcon className="w-6 h-6 text-cyan-400" />
                          </div>
                          <div className="flex-1">
                            <h3 className="text-xl font-bold text-white mb-2">{proposal.title}</h3>
                            <p className="text-slate-300 leading-relaxed">{proposal.description}</p>
                          </div>
                        </div>

                        {/* Proposal Details */}
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
                          <div className="text-center p-3 bg-slate-700/30 rounded-xl border border-slate-600">
                            <div className="text-slate-400 text-sm mb-1">Budget</div>
                            <div className="text-white font-semibold">{proposal.budget}</div>
                          </div>
                          <div className="text-center p-3 bg-slate-700/30 rounded-xl border border-slate-600">
                            <div className="text-slate-400 text-sm mb-1">Timeline</div>
                            <div className="text-white font-semibold">{proposal.timeline}</div>
                          </div>
                          <div className="text-center p-3 bg-slate-700/30 rounded-xl border border-slate-600">
                            <div className="text-slate-400 text-sm mb-1">Votes For</div>
                            <div className="text-emerald-400 font-semibold">{proposal.votesFor.toLocaleString()}</div>
                          </div>
                          <div className="text-center p-3 bg-slate-700/30 rounded-xl border border-slate-600">
                            <div className="text-slate-400 text-sm mb-1">Votes Against</div>
                            <div className="text-rose-400 font-semibold">{proposal.votesAgainst.toLocaleString()}</div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Voting Progress */}
                    <div className="space-y-3 mb-4">
                      <div className="flex justify-between text-sm">
                        <span className="text-emerald-400 font-semibold">{proposal.votesFor.toLocaleString()} For</span>
                        <span className="text-rose-400 font-semibold">{proposal.votesAgainst.toLocaleString()} Against</span>
                      </div>
                      <div className="w-full bg-slate-700 rounded-full h-3">
                        <motion.div
                          initial={{ width: 0 }}
                          animate={{ width: `${progress}%` }}
                          transition={{ duration: 1, delay: 0.5 }}
                          className="bg-gradient-to-r from-emerald-500 to-cyan-500 h-3 rounded-full"
                        />
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <div className="flex items-center space-x-2 text-slate-400">
                          <Clock className="w-4 h-4" />
                          <span>Ends {proposal.endDate}</span>
                        </div>
                        <span className="text-white font-semibold">{progress.toFixed(1)}%</span>
                      </div>
                    </div>

                    {/* Action Buttons */}
                    {!hasVoted && proposal.status === 'active' && (
                      <div className="flex flex-col sm:flex-row gap-3">
                        <motion.button
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                          onClick={() => handleVote(proposal.id, 'for')}
                          className="flex-1 bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white py-3 rounded-xl font-semibold transition-all duration-300 flex items-center justify-center space-x-2"
                        >
                          <CheckCircle className="w-5 h-5" />
                          <span>Vote For</span>
                        </motion.button>
                        <motion.button
                          whileHover={{ scale: 1.02 }}
                          whileTap={{ scale: 0.98 }}
                          onClick={() => handleVote(proposal.id, 'against')}
                          className="flex-1 bg-gradient-to-r from-rose-500 to-rose-600 hover:from-rose-600 hover:to-rose-700 text-white py-3 rounded-xl font-semibold transition-all duration-300 flex items-center justify-center space-x-2"
                        >
                          <XCircle className="w-5 h-5" />
                          <span>Vote Against</span>
                        </motion.button>
                      </div>
                    )}

                    {hasVoted && (
                      <div className="bg-emerald-500/20 border border-emerald-500/30 rounded-xl p-4 text-center">
                        <CheckCircle className="w-6 h-6 text-emerald-400 mx-auto mb-2" />
                        <div className="text-emerald-400 font-semibold">Vote Submitted Successfully!</div>
                        <div className="text-emerald-300 text-sm">Thank you for participating in governance</div>
                      </div>
                    )}
                  </motion.div>
                );
              })}
            </div>
          )}

          {/* Governance Tab */}
          {activeTab === 'governance' && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                className="bg-gradient-to-br from-slate-800/60 to-slate-900/60 backdrop-blur-md rounded-2xl border border-slate-700 p-6"
              >
                <div className="w-12 h-12 bg-cyan-500/20 rounded-xl flex items-center justify-center mb-4">
                  <Shield className="w-6 h-6 text-cyan-400" />
                </div>
                <h3 className="text-xl font-bold text-white mb-3">Transparent Governance Framework</h3>
                <p className="text-slate-300 mb-4 leading-relaxed">
                  Our decentralized governance model ensures every ASRD token holder has equal voting power 
                  in platform evolution. Collective intelligence drives better investment decisions for all.
                </p>
                <div className="space-y-3">
                  {[
                    { label: "1 ASRD = 1 Vote", description: "Equal voting power for all token holders" },
                    { label: "7-Day Voting Periods", description: "Ample time for community deliberation" },
                    { label: "51% Approval Threshold", description: "Clear majority required for execution" },
                    { label: "Real-Time Results", description: "Transparent, on-chain voting process" }
                  ].map((item, index) => (
                    <div key={index} className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-cyan-400 rounded-full mt-2 flex-shrink-0" />
                      <div>
                        <div className="text-white font-semibold text-sm">{item.label}</div>
                        <div className="text-slate-400 text-xs">{item.description}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </motion.div>

              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.2 }}
                className="bg-gradient-to-br from-slate-800/60 to-slate-900/60 backdrop-blur-md rounded-2xl border border-slate-700 p-6"
              >
                <div className="w-12 h-12 bg-amber-500/20 rounded-xl flex items-center justify-center mb-4">
                  <Users className="w-6 h-6 text-amber-400" />
                </div>
                <h3 className="text-xl font-bold text-white mb-3">Community Power in Action</h3>
                <p className="text-slate-300 mb-4 leading-relaxed">
                  Join 3,247+ sophisticated investors collectively managing $154M+ in real-world assets. 
                  Your voice shapes platform strategy and investment direction.
                </p>
                <div className="space-y-4">
                  {[
                    { label: "Active Community Members", value: "3,247", change: "+427" },
                    { label: "Successful Proposals", value: "89", change: "+12" },
                    { label: "Total Votes Cast", value: "24,891", change: "+2,154" },
                    { label: "Platform Value Managed", value: "$154M", change: "+$28M" }
                  ].map((stat, index) => (
                    <div key={index} className="flex justify-between items-center">
                      <span className="text-slate-300 text-sm">{stat.label}</span>
                      <div className="text-right">
                        <div className="text-white font-semibold">{stat.value}</div>
                        <div className="text-emerald-400 text-xs">{stat.change}</div>
                      </div>
                    </div>
                  ))}
                </div>
              </motion.div>
            </div>
          )}

          {/* Rewards Tab */}
          {activeTab === 'rewards' && (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {rewards.map((reward, index) => {
                const RewardIcon = reward.icon;
                return (
                  <motion.div
                    key={reward.type}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.5, delay: index * 0.1 }}
                    className="bg-gradient-to-br from-slate-800/60 to-slate-900/60 backdrop-blur-md rounded-2xl border border-slate-700 p-6 hover:border-cyan-400/30 transition-all duration-300"
                  >
                    <div className="flex items-start justify-between mb-4">
                      <div className="w-12 h-12 bg-cyan-500/20 rounded-xl flex items-center justify-center">
                        <RewardIcon className="w-6 h-6 text-cyan-400" />
                      </div>
                      <div className={`px-3 py-1 bg-${reward.color}-500/20 text-${reward.color}-400 rounded-full text-sm font-semibold border border-${reward.color}-500/30`}>
                        {reward.amount}
                      </div>
                    </div>
                    <h3 className="text-xl font-bold text-white mb-2">{reward.type}</h3>
                    <p className="text-slate-300 leading-relaxed">{reward.description}</p>
                  </motion.div>
                );
              })}
            </div>
          )}
        </div>

        {/* Call to Action */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.6 }}
          className="bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-2xl border border-cyan-500/30 p-8 text-center"
        >
          <h3 className="text-2xl font-bold text-white mb-3">Ready to Shape the Future?</h3>
          <p className="text-slate-300 mb-6 max-w-2xl mx-auto">
            Join thousands of investors driving platform evolution. Your vote matters in building 
            the world's premier real-world asset investment platform.
          </p>
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white px-8 py-4 rounded-xl font-semibold transition-all duration-300 flex items-center space-x-3 mx-auto shadow-lg"
          >
            <Coins className="w-6 h-6" />
            <span>Start Participating in Governance</span>
            <ArrowRight className="w-5 h-5" />
          </motion.button>
        </motion.div>
      </div>
    </div>
  );
}
--- END: src/components/sections/FluidDAO.tsx ---

=== FILE: src/components/sections/FluidDashboard.tsx ===

"use client";

import { useState } from 'react';
import { 
  ArrowUpRight, Download, Eye, Coins, CalendarDays,
  BadgeCheck, Users, Clock, Star, Shield, Target
} from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';
import { ownedAssets, platformStats } from '@/data/mockData';
import RealAssetImage from '@/components/ui/RealAssetImage';
import AssetDetailsModal from '@/components/ui/AssetDetailsModal';
import { useNotification } from '@/contexts/NotificationContext';
import { motion } from 'framer-motion';
import { OwnedAsset } from '@/types';

export default function FluidDashboard() {
  const { user, claimRental, claimWinnings } = useAuth();
  const { showNotification } = useNotification();
  const [selectedAsset, setSelectedAsset] = useState<OwnedAsset | null>(null);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [claimedRent, setClaimedRent] = useState(false);
  const [claimedWinnings, setClaimedWinnings] = useState(false);

  // Fixed calculations with proper type handling
  const totalMonthlyIncome = ownedAssets.reduce((sum, asset) => sum + (asset.payoutAmount || 0), 0);
  const totalInvested = ownedAssets.reduce((sum, asset) => sum + asset.investedAmount, 0);
  const totalCurrentValue = ownedAssets.reduce((sum, asset) => sum + asset.currentValue, 0);
  const totalReturns = totalCurrentValue - totalInvested;
  const overallROI = totalInvested > 0 ? (totalReturns / totalInvested) * 100 : 0;

  const handleClaimRental = () => {
    const assetId = ownedAssets.length > 0 ? ownedAssets[0].id : 1;
    claimRental(assetId);
    setClaimedRent(true);
    showNotification({
      type: "success",
      title: "Rental Income Claimed",
      message: "Rental income claimed successfully! $8,500 has been added to your wallet."
    });
  };

  const handleClaimWinnings = () => {
    const assetId = ownedAssets.length > 0 ? ownedAssets[0].id : 1;
    claimWinnings(assetId);
    setClaimedWinnings(true);
    showNotification({
      type: "success",
      title: "Race Winnings Claimed",
      message: "Race winnings claimed! $12,200 prize money deposited."
    });
  };

  const openAssetDetails = (asset: OwnedAsset) => {
    setSelectedAsset(asset);
    setIsDetailsModalOpen(true);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white">
      {/* Header Stats */}
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8 p-6"
      >
        {/* Total Portfolio Value */}
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.1 }}
          className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6"
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-slate-400 text-sm">Portfolio Value</p>
              <h3 className="text-2xl font-bold text-white">${(totalCurrentValue / 1000).toFixed(0)}K</h3>
              <p className="text-green-400 text-sm">+${(totalReturns / 1000).toFixed(1)}K returns</p>
            </div>
            <div className="p-3 bg-cyan-500/10 rounded-xl">
              <Coins className="w-6 h-6 text-cyan-400" />
            </div>
          </div>
        </motion.div>

        {/* Monthly Income */}
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.2 }}
          className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6"
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-slate-400 text-sm">Monthly Income</p>
              <h3 className="text-2xl font-bold text-white">${totalMonthlyIncome.toLocaleString()}</h3>
              <p className="text-green-400 text-sm">Next: Dec 1, 2025</p>
            </div>
            <div className="p-3 bg-emerald-500/10 rounded-xl">
              <Download className="w-6 h-6 text-emerald-400" />
            </div>
          </div>
        </motion.div>

        {/* Total ROI */}
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.3 }}
          className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6"
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-slate-400 text-sm">Total ROI</p>
              <h3 className="text-2xl font-bold text-white">{overallROI.toFixed(1)}%</h3>
              <p className="text-green-400 text-sm">+${(totalReturns / 1000).toFixed(1)}K profit</p>
            </div>
            <div className="p-3 bg-amber-500/10 rounded-xl">
              <Target className="w-6 h-6 text-amber-400" />
            </div>
          </div>
        </motion.div>

        {/* Active Investments */}
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ delay: 0.4 }}
          className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6"
        >
          <div className="flex items-center justify-between">
            <div>
              <p className="text-slate-400 text-sm">Active Investments</p>
              <h3 className="text-2xl font-bold text-white">{ownedAssets.length}</h3>
              <p className="text-slate-400 text-sm">Diversified portfolio</p>
            </div>
            <div className="p-3 bg-blue-500/10 rounded-xl">
              <BadgeCheck className="w-6 h-6 text-blue-400" />
            </div>
          </div>
        </motion.div>
      </motion.div>

      {/* Main Content Grid */}
      <div className="grid grid-cols-1 xl:grid-cols-3 gap-8 px-6 pb-6">
        {/* Left Column - Portfolio Assets */}
        <div className="xl:col-span-2 space-y-6">
          {/* Portfolio Assets */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6"
          >
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-white">Your Portfolio Assets</h2>
              <button className="flex items-center gap-2 text-cyan-400 hover:text-cyan-300 transition-colors">
                <ArrowUpRight className="w-4 h-4" />
                View All
              </button>
            </div>

            <div className="space-y-4">
              {ownedAssets.map((asset, index) => (
                <motion.div
                  key={asset.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.5, delay: 0.6 + index * 0.1 }}
                  className="bg-slate-800/30 backdrop-blur-sm rounded-xl border border-slate-700 p-4 hover:border-slate-600 transition-all duration-300"
                >
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex items-center gap-3 flex-1 min-w-0">
                      <RealAssetImage
                        asset={asset.asset || asset}
                        className="w-12 h-12 rounded-lg flex-shrink-0"
                        size="sm"
                      />
                      <div className="flex-1 min-w-0">
                        <h3 className="font-semibold text-white truncate">
                          {asset.name || asset.asset?.name}
                        </h3>
                        <p className="text-slate-400 text-sm truncate">
                          {asset.location || asset.asset?.location?.city}
                        </p>
                      </div>
                    </div>
                    <button
                      onClick={() => openAssetDetails(asset)}
                      className="p-2 hover:bg-slate-700 rounded-lg transition-colors flex-shrink-0 ml-3"
                    >
                      <Eye className="w-4 h-4 text-slate-400" />
                    </button>
                  </div>

                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <p className="text-slate-400">Invested</p>
                      <p className="text-white font-semibold">${asset.investedAmount.toLocaleString()}</p>
                    </div>
                    <div>
                      <p className="text-slate-400">Current Value</p>
                      <p className="text-white font-semibold">${asset.currentValue.toLocaleString()}</p>
                    </div>
                    <div>
                      <p className="text-slate-400">ROI</p>
                      <p className="text-emerald-400 font-semibold">{asset.roi}%</p>
                    </div>
                    <div>
                      <p className="text-slate-400">Monthly</p>
                      <p className="text-cyan-400 font-semibold">${asset.payoutAmount?.toLocaleString()}</p>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>

          {/* Quick Actions */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.7 }}
            className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6"
          >
            <h2 className="text-xl font-semibold text-white mb-6">Quick Actions</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <button
                onClick={handleClaimRental}
                disabled={claimedRent}
                className={`p-4 rounded-xl border transition-all duration-300 ${
                  claimedRent
                    ? 'bg-emerald-500/20 border-emerald-500/50 text-emerald-400'
                    : 'bg-cyan-500/10 border-cyan-500/30 text-cyan-400 hover:bg-cyan-500/20 hover:border-cyan-500/50'
                }`}
              >
                <div className="flex items-center gap-3">
                  <Download className="w-5 h-5" />
                  <div className="text-left">
                    <p className="font-semibold">Claim Rental Income</p>
                    <p className="text-sm opacity-80">$8,500 available</p>
                  </div>
                </div>
              </button>

              <button
                onClick={handleClaimWinnings}
                disabled={claimedWinnings}
                className={`p-4 rounded-xl border transition-all duration-300 ${
                  claimedWinnings
                    ? 'bg-amber-500/20 border-amber-500/50 text-amber-400'
                    : 'bg-amber-500/10 border-amber-500/30 text-amber-400 hover:bg-amber-500/20 hover:border-amber-500/50'
                }`}
              >
                <div className="flex items-center gap-3">
                  <Coins className="w-5 h-5" />
                  <div className="text-left">
                    <p className="font-semibold">Claim Race Winnings</p>
                    <p className="text-sm opacity-80">$12,200 prize money</p>
                  </div>
                </div>
              </button>
            </div>
          </motion.div>
        </div>

        {/* Right Column - Platform Stats & Activity */}
        <div className="space-y-6">
          {/* Platform Overview */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.6 }}
            className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6"
          >
            <h2 className="text-xl font-semibold text-white mb-6">Platform Overview</h2>
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Users className="w-5 h-5 text-blue-400" />
                  <span className="text-slate-300">Total Investors</span>
                </div>
                <span className="text-white font-semibold">{platformStats.totalUsers.toLocaleString()}</span>
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Coins className="w-5 h-5 text-amber-400" />
                  <span className="text-slate-300">Total Investments</span>
                </div>
                <span className="text-white font-semibold">${(platformStats.totalInvestments / 1000000).toFixed(0)}M</span>
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Target className="w-5 h-5 text-emerald-400" />
                  <span className="text-slate-300">Average ROI</span>
                </div>
                <span className="text-emerald-400 font-semibold">{platformStats.averageROI}%</span>
              </div>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Star className="w-5 h-5 text-cyan-400" />
                  <span className="text-slate-300">Platform Growth</span>
                </div>
                <span className="text-cyan-400 font-semibold">+{platformStats.platformGrowth}%</span>
              </div>
            </div>
          </motion.div>

          {/* Recent Activity */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.8 }}
            className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6"
          >
            <h2 className="text-xl font-semibold text-white mb-6">Recent Activity</h2>
            <div className="space-y-4">
              <div className="flex items-center gap-3 p-3 bg-slate-700/50 rounded-lg">
                <div className="p-2 bg-green-500/10 rounded-lg">
                  <Download className="w-4 h-4 text-green-400" />
                </div>
                <div>
                  <p className="text-white text-sm">Rental income received</p>
                  <p className="text-slate-400 text-xs">2 hours ago</p>
                </div>
                <div className="ml-auto text-green-400 font-semibold">+$8,500</div>
              </div>
              <div className="flex items-center gap-3 p-3 bg-slate-700/50 rounded-lg">
                <div className="p-2 bg-blue-500/10 rounded-lg">
                  <BadgeCheck className="w-4 h-4 text-blue-400" />
                </div>
                <div>
                  <p className="text-white text-sm">Investment verified</p>
                  <p className="text-slate-400 text-xs">1 day ago</p>
                </div>
              </div>
              <div className="flex items-center gap-3 p-3 bg-slate-700/50 rounded-lg">
                <div className="p-2 bg-amber-500/10 rounded-lg">
                  <Target className="w-4 h-4 text-amber-400" />
                </div>
                <div>
                  <p className="text-white text-sm">ROI target exceeded</p>
                  <p className="text-slate-400 text-xs">3 days ago</p>
                </div>
                <div className="ml-auto text-amber-400 font-semibold">+2.4%</div>
              </div>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Asset Details Modal */}
      <AssetDetailsModal
        isOpen={isDetailsModalOpen}
        onClose={() => setIsDetailsModalOpen(false)}
        asset={selectedAsset?.asset || null}
      />
    </div>
  );
}
--- END: src/components/sections/FluidDashboard.tsx ---

=== FILE: src/components/sections/FluidHero.tsx ===

// src/components/sections/FluidHero.tsx - ENHANCED TAGLINE
"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { ArrowRight, Shield, TrendingUp, Coins, Users, BarChart3, Sparkles, Gem } from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';

const FluidHero = () => {
  const { login } = useAuth();

  const scrollToHowItWorks = () => {
    document.getElementById('how-it-works')?.scrollIntoView({ behavior: 'smooth' });
  };

  const exploreAssets = () => {
    document.getElementById('featured-assets')?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleGetStarted = () => {
    login('/dashboard');
  };

  return (
    <section className="relative min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 overflow-hidden pt-20"> {/* Added pt-20 for header spacing */}
      {/* Enhanced Background */}
      <div className="absolute inset-0">
        <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/10 via-blue-600/10 to-purple-500/10" />
        <div className="absolute inset-0 bg-[linear-gradient(rgba(6,182,212,0.03)_1px,transparent_1px),linear-gradient(90deg,rgba(6,182,212,0.03)_1px,transparent_1px)] bg-[size:64px_64px]" />
      </div>

      {/* Floating Elements */}
      <motion.div
        initial={{ opacity: 0, scale: 0.8, x: -50 }}
        animate={{ opacity: 1, scale: 1, x: 0 }}
        transition={{ duration: 1 }}
        className="absolute top-20 left-10 md:left-20 w-3 h-3 bg-cyan-400 rounded-full opacity-40"
      />
      <motion.div
        initial={{ opacity: 0, scale: 0.8, x: 50 }}
        animate={{ opacity: 1, scale: 1, x: 0 }}
        transition={{ duration: 1, delay: 0.3 }}
        className="absolute bottom-40 right-10 md:right-32 w-4 h-4 bg-blue-400 rounded-full opacity-40"
      />

      {/* Main Content */}
      <div className="relative z-10 text-center px-4 sm:px-6 lg:px-8 max-w-6xl mx-auto w-full mt-8"> {/* Added mt-8 for spacing */}
        {/* ENHANCED Premium Badge with 3D Animation */}
        <motion.div
          initial={{ opacity: 0, y: 20, scale: 0.9 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          transition={{ duration: 0.8, type: "spring", stiffness: 100 }}
          className="inline-flex items-center space-x-3 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 backdrop-blur-lg border border-cyan-400/40 rounded-2xl px-6 py-4 mb-8 md:mb-12 mx-auto shadow-2xl shadow-cyan-500/20 relative overflow-hidden"
        >
          {/* Animated background shine */}
          <motion.div
            animate={{ x: [-100, 300, -100] }}
            transition={{ duration: 3, repeat: Infinity, ease: "easeInOut" }}
            className="absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent skew-x-12"
          />
          
          {/* Glowing dots */}
          <motion.div
            animate={{ scale: [1, 1.2, 1], opacity: [0.5, 1, 0.5] }}
            transition={{ duration: 2, repeat: Infinity }}
            className="w-2 h-2 bg-cyan-400 rounded-full"
          />
          <motion.div
            animate={{ scale: [1, 1.2, 1], opacity: [0.5, 1, 0.5] }}
            transition={{ duration: 2, repeat: Infinity, delay: 0.5 }}
            className="w-2 h-2 bg-blue-400 rounded-full"
          />
          
          {/* Text with glow effect */}
          <motion.span
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.3 }}
            className="text-cyan-300 font-bold text-sm md:text-base tracking-wider relative z-10 text-shadow-lg shadow-cyan-500/50"
          >
            WE DON'T SELL DREAMS — WE TOKENIZE REALITY
          </motion.span>

          {/* Corner accents */}
          <div className="absolute top-2 left-2 w-2 h-2 border-t-2 border-l-2 border-cyan-400/60 rounded-tl" />
          <div className="absolute top-2 right-2 w-2 h-2 border-t-2 border-r-2 border-cyan-400/60 rounded-tr" />
          <div className="absolute bottom-2 left-2 w-2 h-2 border-b-2 border-l-2 border-cyan-400/60 rounded-bl" />
          <div className="absolute bottom-2 right-2 w-2 h-2 border-b-2 border-r-2 border-cyan-400/60 rounded-br" />
        </motion.div>

        {/* Headline */}
        <motion.h1
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="text-3xl md:text-5xl lg:text-6xl xl:text-7xl font-bold text-white mb-4 md:mb-6 leading-tight"
        >
          Institutional <span className="bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent">Real-World Assets</span>
        </motion.h1>

        <motion.h2
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.3 }}
          className="text-lg md:text-2xl lg:text-3xl text-slate-300 font-light mb-6 md:mb-8 max-w-4xl mx-auto"
        >
          Now Accessible to Everyone
        </motion.h2>

        {/* Subheading */}
        <motion.p
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
          className="text-base md:text-xl text-slate-300 max-w-3xl mx-auto mb-6 md:mb-8 leading-relaxed px-4"
        >
          Fractional ownership starting from $100. Invest in commercial real estate,
          private equity, and fine art with blockchain security and complete transparency.
        </motion.p>

        {/* Trust Indicators */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.6 }}
          className="grid grid-cols-2 md:flex md:flex-wrap justify-center gap-4 md:gap-8 mb-8 md:mb-12 max-w-2xl mx-auto"
        >
          {[
            { icon: Shield, text: "Bank-Grade Security", value: "100%" },
            { icon: Users, text: "Active Investors", value: "2,500+" },
            { icon: Coins, text: "Assets Managed", value: "$85M+" },
            { icon: BarChart3, text: "Average ROI", value: "12.8%" }
          ].map((item, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.6, delay: 0.8 + index * 0.1 }}
              className="text-center p-3 md:p-0"
            >
              <div className="flex items-center justify-center w-8 h-8 md:w-12 md:h-12 bg-cyan-500/10 rounded-lg md:rounded-xl mb-2 mx-auto">
                <item.icon className="w-4 h-4 md:w-6 md:h-6 text-cyan-400" />
              </div>
              <div className="text-white font-bold text-sm md:text-lg">{item.value}</div>
              <div className="text-slate-400 text-xs md:text-sm">{item.text}</div>
            </motion.div>
          ))}
        </motion.div>

        {/* Action Buttons */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.8 }}
          className="flex flex-col sm:flex-row gap-3 md:gap-4 justify-center items-center max-w-md mx-auto"
        >
          {/* Primary CTA */}
          <motion.button
            whileHover={{ scale: 1.02, y: -2 }}
            whileTap={{ scale: 0.98 }}
            onClick={exploreAssets}
            className="w-full bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white px-6 py-3 md:px-8 md:py-4 rounded-xl font-semibold text-base md:text-lg transition-all duration-300 flex items-center justify-center space-x-2 shadow-lg hover:shadow-xl"
          >
            <Coins className="w-5 h-5 md:w-6 md:h-6" />
            <span>Explore Investment Opportunities</span>
          </motion.button>

          {/* Secondary CTA */}
          <motion.button
            whileHover={{ scale: 1.02, y: -2 }}
            whileTap={{ scale: 0.98 }}
            onClick={scrollToHowItWorks}
            className="w-full border-2 border-cyan-500/50 text-cyan-400 hover:border-cyan-400 hover:text-cyan-300 px-6 py-3 md:px-8 md:py-4 rounded-xl font-semibold text-base md:text-lg transition-all duration-300 flex items-center justify-center space-x-2 backdrop-blur-sm"
          >
            <span>How It Works</span>
            <ArrowRight className="w-4 h-4 md:w-5 md:h-5" />
          </motion.button>
        </motion.div>

        {/* Social Proof */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.8, delay: 1 }}
          className="mt-8 md:mt-12 text-slate-400 text-sm"
        >
          <p>Trusted by institutional investors worldwide</p>
        </motion.div>
      </div>

      {/* Scroll Indicator */}
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.8, delay: 1.2 }}
        className="absolute bottom-6 md:bottom-8 left-1/2 transform -translate-x-1/2"
      >
        <motion.div
          animate={{ y: [0, 8, 0] }}
          transition={{ duration: 2, repeat: Infinity }}
          className="w-5 h-8 md:w-6 md:h-10 border-2 border-cyan-500/30 rounded-full flex justify-center"
        >
          <motion.div
            animate={{ y: [0, 10, 0] }}
            transition={{ duration: 2, repeat: Infinity }}
            className="w-1 h-2 md:h-3 bg-cyan-400 rounded-full mt-2"
          />
        </motion.div>
      </motion.div>
    </section>
  );
};

export default FluidHero;
--- END: src/components/sections/FluidHero.tsx ---

=== FILE: src/components/sections/FluidMarketplace.tsx ===

// src/components/sections/FluidMarketplace.tsx - PREMIUM ENHANCED VERSION
'use client';

import React, { useState, useMemo, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Grid, List, Search, Filter, SlidersHorizontal, 
  Star, TrendingUp, MapPin, Users, Shield, Zap,
  Crown, Sparkles, Target, Award, Clock, BarChart3,
  Heart, Share2, Eye, ArrowRight, Rocket
} from 'lucide-react';
import { useAuth } from '@/contexts/AuthContext';
import { useNotification } from '@/contexts/NotificationContext';
import EnhancedAssetCard from '@/components/ui/EnhancedAssetCard';
import InvestmentModal from '@/components/ui/InvestmentModal';
import AssetDetailsModal from '@/components/ui/AssetDetailsModal';
import { mockAssets } from '@/data/mockData';
import { Asset } from '@/types';
import { useUniversalDevice } from '@/hooks/useUniversalDevice';

export default function FluidMarketplace() {
  const { user, login, invest } = useAuth();
  const { showNotification, showSuccess, showError, showPremium } = useNotification();
  const { deviceInfo } = useUniversalDevice();

  // Enhanced state management
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedType, setSelectedType] = useState('all');
  const [selectedLocation, setSelectedLocation] = useState('all');
  const [selectedRisk, setSelectedRisk] = useState('all');
  const [sortBy, setSortBy] = useState<'roi' | 'value' | 'minInvestment' | 'popularity' | 'risk'>('roi');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [priceRange, setPriceRange] = useState<[number, number]>([100, 1000000]);
  const [selectedAsset, setSelectedAsset] = useState<Asset | null>(null);
  const [isInvestmentModalOpen, setIsInvestmentModalOpen] = useState(false);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [isFiltersOpen, setIsFiltersOpen] = useState(false);
  const [likedAssets, setLikedAssets] = useState<Set<string>>(new Set());
  const [recentlyViewed, setRecentlyViewed] = useState<Asset[]>([]);

  // Enhanced asset list with premium features
  const enhancedAssets: Asset[] = useMemo(() => 
    mockAssets.map((asset, index) => ({
      ...asset,
      badges: [
        ...(asset.badges || []),
        ...(index % 3 === 0 ? [{ label: "Featured", color: "amber" }] : []),
        ...(asset.projectedROI > 35 ? [{ label: "High ROI", color: "emerald" }] : []),
        ...(asset.fundingProgress > 90 ? [{ label: "Almost Funded", color: "blue" }] : [])
      ].slice(0, 3)
    })), []);

  // Enhanced filters data
  const assetTypes = ['all', ...Array.from(new Set(enhancedAssets.map(a => a.type)))];
  const locations = ['all', ...Array.from(new Set(enhancedAssets.map(a => a.location.country)))];
  const riskLevels = ['all', ...Array.from(new Set(enhancedAssets.map(a => a.riskLevel)))];

  // Enhanced filter + sort with more criteria
  const filteredAssets = useMemo(() => {
    return enhancedAssets
      .filter(asset => {
        const matchesSearch = [
          asset.name,
          asset.title,
          asset.description,
          asset.location?.city,
          asset.location?.country,
          asset.tags?.join(' '),
          asset.features?.join(' ')
        ]
          .filter(Boolean)
          .some(field => field!.toLowerCase().includes(searchQuery.toLowerCase()));

        const matchesType = selectedType === 'all' || asset.type === selectedType;
        const matchesLocation = selectedLocation === 'all' || asset.location.country === selectedLocation;
        const matchesRisk = selectedRisk === 'all' || asset.riskLevel === selectedRisk;
        const matchesPrice = asset.minimumInvestment >= priceRange[0] && asset.minimumInvestment <= priceRange[1];

        return matchesSearch && matchesType && matchesLocation && matchesRisk && matchesPrice;
      })
      .sort((a, b) => {
        switch (sortBy) {
          case 'roi':
            return (b.projectedROI || 0) - (a.projectedROI || 0);
          case 'value':
            return (b.totalFunding || 0) - (a.totalFunding || 0);
          case 'minInvestment':
            return (a.minimumInvestment || 0) - (b.minimumInvestment || 0);
          case 'popularity':
            return (b.investorCount || 0) - (a.investorCount || 0);
          case 'risk':
            const riskOrder = { Low: 1, Medium: 2, High: 3 };
            return (riskOrder[a.riskLevel as keyof typeof riskOrder] || 0) - 
                   (riskOrder[b.riskLevel as keyof typeof riskOrder] || 0);
          default:
            return 0;
        }
      });
  }, [searchQuery, selectedType, selectedLocation, selectedRisk, sortBy, priceRange]);

  // Enhanced investment handler
  const handleInvest = (asset: Asset) => {
    if (!user) {
      login('/marketplace');
      showPremium(
        'Connect Your Wallet',
        'Join our premium investor community to access exclusive investment opportunities with 22-46% projected returns.',
        {
          label: 'Connect Now',
          onClick: () => login('/marketplace')
        }
      );
      return;
    }

    // Track investment interest
    console.log(`Investment interest in: ${asset.title}`);
    
    setSelectedAsset(asset);
    setIsInvestmentModalOpen(true);

    // Show premium notification for high-value assets
    if (asset.projectedROI > 35) {
      showPremium(
        'Premium Opportunity',
        `This ${asset.type.replace('-', ' ')} offers exceptional ${asset.projectedROI}% projected returns!`,
        {
          label: 'Learn More',
          onClick: () => handleViewDetails(asset)
        }
      );
    }
  };

  // Enhanced investment confirmation
  const handleInvestmentConfirm = (amount: number) => {
    if (!selectedAsset || !user) return;
    
    const success = invest(amount, selectedAsset.name, Number(selectedAsset.id));
    
    if (success) {
      showSuccess(
        'Investment Successful! 🎉',
        `You've invested $${amount.toLocaleString()} in ${selectedAsset.title}. Welcome to the exclusive investor community!`,
        {
          label: 'View Portfolio',
          onClick: () => window.location.href = '/dashboard'
        }
      );
      
      // Track successful investment
      console.log(`Investment completed: $${amount} in ${selectedAsset.title}`);
      
      // Add to recently viewed
      setRecentlyViewed(prev => 
        [selectedAsset, ...prev.filter(a => a.id !== selectedAsset.id)].slice(0, 5)
      );
    } else {
      showError(
        'Insufficient Balance',
        `You need ${amount - user.asrdBalance} more ASRD tokens to complete this investment. Visit the treasury to purchase more.`,
        {
          label: 'Buy ASRD',
          onClick: () => window.location.href = '/treasury'
        }
      );
    }
    
    setIsInvestmentModalOpen(false);
    setSelectedAsset(null);
  };

  const handleViewDetails = (asset: Asset) => {
    setSelectedAsset(asset);
    setIsDetailsModalOpen(true);
    
    // Add to recently viewed
    setRecentlyViewed(prev => 
      [asset, ...prev.filter(a => a.id !== asset.id)].slice(0, 5)
    );
  };

  const handleLikeAsset = (assetId: string) => {
    const newLikedAssets = new Set(likedAssets);
    if (newLikedAssets.has(assetId)) {
      newLikedAssets.delete(assetId);
      showNotification({
        title: 'Removed from Favorites',
        message: 'Asset removed from your favorites list',
        type: 'info',
        duration: 2000
      });
    } else {
      newLikedAssets.add(assetId);
      showSuccess(
        'Added to Favorites',
        'Asset added to your favorites. You can track it from your dashboard.',
        {
          label: 'View Favorites',
          onClick: () => window.location.href = '/dashboard'
        }
      );
    }
    setLikedAssets(newLikedAssets);
  };

  // Enhanced marketplace stats
  const marketplaceStats = {
    totalAssets: enhancedAssets.length,
    totalValue: enhancedAssets.reduce((sum, asset) => sum + asset.totalFunding, 0),
    averageROI: enhancedAssets.reduce((sum, asset) => sum + asset.projectedROI, 0) / enhancedAssets.length,
    totalInvestors: enhancedAssets.reduce((sum, asset) => sum + asset.investorCount, 0)
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 text-white">
      {/* Premium Header */}
      <div className="relative bg-slate-800/30 backdrop-blur-xl border-b border-slate-700/50 overflow-hidden">
        {/* Animated Background */}
        <div className="absolute inset-0">
          <div className="absolute top-10 left-10 w-4 h-4 bg-cyan-400 rounded-full opacity-20 animate-pulse" />
          <div className="absolute top-1/4 right-20 w-3 h-3 bg-blue-400 rounded-full opacity-30 animate-bounce" />
          <div className="absolute bottom-1/3 left-1/4 w-2 h-2 bg-purple-400 rounded-full opacity-40 animate-ping" />
        </div>

        <div className="max-w-7xl mx-auto px-6 py-16 text-center relative z-10">
          <motion.div
            initial={{ y: 30, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            className="inline-flex items-center gap-3 px-6 py-3 rounded-2xl bg-slate-800/50 border border-slate-700/50 backdrop-blur-sm mb-6"
          >
            <Rocket className="w-5 h-5 text-cyan-400" />
            <span className="text-cyan-400 font-semibold text-sm uppercase tracking-wider">
              Premium Marketplace
            </span>
            <Sparkles className="w-5 h-5 text-cyan-400" />
          </motion.div>

          <motion.h1 
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.1 }}
            className="text-5xl md:text-6xl font-bold text-white mb-4"
          >
            Exclusive <span className="text-transparent bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text">Investment</span> Marketplace
          </motion.h1>
          
          <motion.p 
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.2 }}
            className="text-xl text-slate-300 max-w-2xl mx-auto mb-8 leading-relaxed"
          >
            Discover premium real-world assets in Australia, UK, and Dubai with verified 
            <span className="text-cyan-400 font-semibold"> 22-46% returns</span> and blockchain-powered security.
          </motion.p>

          {/* Enhanced Stats Bar */}
          <motion.div
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ delay: 0.3 }}
            className="grid grid-cols-2 md:grid-cols-4 gap-6 max-w-4xl mx-auto"
          >
            {[
              { 
                value: marketplaceStats.totalAssets.toLocaleString(), 
                label: 'Premium Assets', 
                icon: Crown,
                color: 'text-amber-400'
              },
              { 
                value: `$${(marketplaceStats.totalValue / 1000000).toFixed(1)}M`, 
                label: 'Total Value', 
                icon: TrendingUp,
                color: 'text-emerald-400'
              },
              { 
                value: `${marketplaceStats.averageROI.toFixed(1)}%`, 
                label: 'Avg. ROI', 
                icon: Award,
                color: 'text-cyan-400'
              },
              { 
                value: `${(marketplaceStats.totalInvestors / 1000).toFixed(1)}K+`, 
                label: 'Investors', 
                icon: Users,
                color: 'text-blue-400'
              }
            ].map((stat, index) => (
              <motion.div
                key={stat.label}
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ delay: 0.4 + index * 0.1 }}
                className="text-center p-4 bg-slate-800/30 rounded-2xl border border-slate-700/50 backdrop-blur-sm hover:border-cyan-500/30 transition-all duration-300 group cursor-pointer"
              >
                <stat.icon className={`w-8 h-8 mx-auto mb-3 ${stat.color} group-hover:scale-110 transition-transform`} />
                <div className={`text-2xl font-bold ${stat.color} group-hover:scale-105 transition-transform`}>
                  {stat.value}
                </div>
                <div className="text-sm text-slate-400 mt-1">{stat.label}</div>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </div>

      {/* Enhanced Controls Section */}
      <div className="max-w-7xl mx-auto px-6 py-8">
        <motion.div
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          className="space-y-6"
        >
          {/* Main Search and Controls */}
          <div className="flex flex-col lg:flex-row gap-4 items-start lg:items-center">
            {/* Enhanced Search */}
            <div className="flex-1 relative">
              <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400" />
              <input
                type="text"
                placeholder="Search assets, locations, features, or tags..."
                value={searchQuery}
                onChange={e => setSearchQuery(e.target.value)}
                className="w-full pl-12 pr-4 py-4 border-2 border-slate-600 rounded-2xl bg-slate-800/50 backdrop-blur-sm text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-2 focus:ring-cyan-500/20 transition-all duration-300 text-lg"
              />
            </div>

            {/* Enhanced Control Buttons */}
            <div className="flex gap-3">
              {/* Filter Toggle */}
              <motion.button
                onClick={() => setIsFiltersOpen(!isFiltersOpen)}
                className={`px-4 py-4 rounded-2xl border-2 transition-all duration-300 flex items-center gap-2 ${
                  isFiltersOpen 
                    ? 'bg-cyan-500 border-cyan-500 text-white shadow-lg shadow-cyan-500/25' 
                    : 'bg-slate-800/50 border-slate-600 text-slate-300 hover:border-cyan-500 hover:text-cyan-400'
                }`}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <SlidersHorizontal className="w-5 h-5" />
                <span className="font-semibold">Filters</span>
              </motion.button>

              {/* View Toggle */}
              <div className="flex border-2 border-slate-600 rounded-2xl overflow-hidden bg-slate-800/50">
                <button 
                  className={`p-4 transition-all duration-300 ${
                    viewMode === 'grid' 
                      ? 'bg-cyan-500 text-white shadow-inner' 
                      : 'text-slate-400 hover:text-cyan-400'
                  }`}
                  onClick={() => setViewMode('grid')}
                >
                  <Grid className="w-5 h-5" />
                </button>
                <button 
                  className={`p-4 transition-all duration-300 ${
                    viewMode === 'list' 
                      ? 'bg-cyan-500 text-white shadow-inner' 
                      : 'text-slate-400 hover:text-cyan-400'
                  }`}
                  onClick={() => setViewMode('list')}
                >
                  <List className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>

          {/* Enhanced Filters Panel */}
          <AnimatePresence>
            {isFiltersOpen && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                className="bg-slate-800/30 backdrop-blur-sm rounded-2xl border-2 border-slate-700/50 p-6"
              >
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  {/* Asset Type Filter */}
                  <div>
                    <label className="block text-sm font-semibold text-slate-300 mb-2">
                      Asset Type
                    </label>
                    <select
                      value={selectedType}
                      onChange={e => setSelectedType(e.target.value)}
                      className="w-full px-4 py-3 border-2 border-slate-600 rounded-xl bg-slate-800/50 text-white focus:border-cyan-500 focus:ring-2 focus:ring-cyan-500/20 transition-all duration-300"
                    >
                      {assetTypes.map(type => (
                        <option key={type} value={type}>
                          {type === 'all' ? 'All Types' : type.split('-').map(word => 
                            word.charAt(0).toUpperCase() + word.slice(1)
                          ).join(' ')}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Location Filter */}
                  <div>
                    <label className="block text-sm font-semibold text-slate-300 mb-2">
                      Location
                    </label>
                    <select
                      value={selectedLocation}
                      onChange={e => setSelectedLocation(e.target.value)}
                      className="w-full px-4 py-3 border-2 border-slate-600 rounded-xl bg-slate-800/50 text-white focus:border-cyan-500 focus:ring-2 focus:ring-cyan-500/20 transition-all duration-300"
                    >
                      {locations.map(location => (
                        <option key={location} value={location}>
                          {location === 'all' ? 'All Locations' : location}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Risk Level Filter */}
                  <div>
                    <label className="block text-sm font-semibold text-slate-300 mb-2">
                      Risk Level
                    </label>
                    <select
                      value={selectedRisk}
                      onChange={e => setSelectedRisk(e.target.value)}
                      className="w-full px-4 py-3 border-2 border-slate-600 rounded-xl bg-slate-800/50 text-white focus:border-cyan-500 focus:ring-2 focus:ring-cyan-500/20 transition-all duration-300"
                    >
                      {riskLevels.map(risk => (
                        <option key={risk} value={risk}>
                          {risk === 'all' ? 'All Risk Levels' : risk}
                        </option>
                      ))}
                    </select>
                  </div>

                  {/* Sort By */}
                  <div>
                    <label className="block text-sm font-semibold text-slate-300 mb-2">
                      Sort By
                    </label>
                    <select
                      value={sortBy}
                      onChange={e => setSortBy(e.target.value as any)}
                      className="w-full px-4 py-3 border-2 border-slate-600 rounded-xl bg-slate-800/50 text-white focus:border-cyan-500 focus:ring-2 focus:ring-cyan-500/20 transition-all duration-300"
                    >
                      <option value="roi">Highest ROI</option>
                      <option value="value">Highest Value</option>
                      <option value="minInvestment">Lowest Minimum</option>
                      <option value="popularity">Most Popular</option>
                      <option value="risk">Lowest Risk</option>
                    </select>
                  </div>
                </div>

                {/* Price Range Slider */}
                <div className="mt-6">
                  <label className="block text-sm font-semibold text-slate-300 mb-4">
                    Investment Range: ${priceRange[0].toLocaleString()} - ${priceRange[1].toLocaleString()}
                  </label>
                  <div className="flex items-center gap-4">
                    <input
                      type="range"
                      min="100"
                      max="1000000"
                      step="100"
                      value={priceRange[0]}
                      onChange={e => setPriceRange([Number(e.target.value), priceRange[1]])}
                      className="flex-1 h-2 bg-slate-600 rounded-lg appearance-none cursor-pointer slider-thumb"
                    />
                    <input
                      type="range"
                      min="100"
                      max="1000000"
                      step="100"
                      value={priceRange[1]}
                      onChange={e => setPriceRange([priceRange[0], Number(e.target.value)])}
                      className="flex-1 h-2 bg-slate-600 rounded-lg appearance-none cursor-pointer slider-thumb"
                    />
                  </div>
                </div>

                {/* Active Filters Summary */}
                <div className="flex flex-wrap gap-2 mt-4">
                  {selectedType !== 'all' && (
                    <span className="px-3 py-1 bg-cyan-500/20 text-cyan-300 rounded-full text-sm border border-cyan-500/30">
                      Type: {selectedType}
                    </span>
                  )}
                  {selectedLocation !== 'all' && (
                    <span className="px-3 py-1 bg-blue-500/20 text-blue-300 rounded-full text-sm border border-blue-500/30">
                      Location: {selectedLocation}
                    </span>
                  )}
                  {selectedRisk !== 'all' && (
                    <span className="px-3 py-1 bg-amber-500/20 text-amber-300 rounded-full text-sm border border-amber-500/30">
                      Risk: {selectedRisk}
                    </span>
                  )}
                </div>
              </motion.div>
            )}
          </AnimatePresence>

          {/* Results Summary */}
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"
          >
            <div className="text-slate-300">
              Showing <span className="text-cyan-400 font-semibold">{filteredAssets.length}</span> of{' '}
              <span className="text-white font-semibold">{enhancedAssets.length}</span> premium assets
            </div>
            
            {filteredAssets.length === 0 && (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-center py-12"
              >
                <Target className="w-16 h-16 text-slate-600 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-slate-400 mb-2">No assets found</h3>
                <p className="text-slate-500">Try adjusting your filters or search terms</p>
              </motion.div>
            )}
          </motion.div>
        </motion.div>

        {/* Enhanced Asset Grid */}
        <motion.div 
          className={`mt-8 gap-6 ${
            viewMode === 'grid' 
              ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3' 
              : 'flex flex-col space-y-6'
          }`}
          layout
        >
          <AnimatePresence mode="popLayout">
            {filteredAssets.map((asset, index) => (
              <motion.div
                key={asset.id}
                layout
                initial={{ opacity: 0, scale: 0.9, y: 20 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.9, y: -20 }}
                transition={{ 
                  duration: 0.4, 
                  delay: index * 0.05,
                  layout: { duration: 0.3 }
                }}
                className={`${
                  viewMode === 'grid'
                    ? 'bg-slate-800/30 backdrop-blur-sm rounded-3xl border-2 border-slate-700/50 hover:border-cyan-500/30 hover:scale-105'
                    : 'bg-slate-800/20 backdrop-blur-sm rounded-2xl border border-slate-700/50 hover:border-cyan-500/20'
                } transition-all duration-500 shadow-xl hover:shadow-2xl hover:shadow-cyan-500/10`}
              >
                <EnhancedAssetCard 
                  asset={asset} 
                  onViewDetails={handleViewDetails} 
                  onInvest={handleInvest}
                  onLike={handleLikeAsset}
                  isLiked={likedAssets.has(asset.id.toString())}
                  viewMode={viewMode}
                />
              </motion.div>
            ))}
          </AnimatePresence>
        </motion.div>

        {/* Load More Section */}
        {filteredAssets.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="text-center mt-12"
          >
            <motion.button
              className="bg-transparent border-2 border-cyan-400 text-cyan-400 hover:bg-cyan-400 hover:text-white px-8 py-4 rounded-2xl font-semibold transition-all duration-500 transform hover:scale-105 hover:shadow-2xl hover:shadow-cyan-500/25 group"
              whileHover={{ y: -2 }}
              whileTap={{ scale: 0.95 }}
            >
              <span className="flex items-center gap-3">
                <Zap className="w-5 h-5 group-hover:rotate-180 transition-transform duration-500" />
                Load More Premium Opportunities
                <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform" />
              </span>
            </motion.button>
          </motion.div>
        )}
      </div>

      {/* Enhanced Modals */}
      <InvestmentModal
        isOpen={isInvestmentModalOpen}
        onClose={() => setIsInvestmentModalOpen(false)}
        asset={selectedAsset}
        onInvest={handleInvestmentConfirm}
        userBalance={user?.asrdBalance || 0}
      />
      
      <AssetDetailsModal
        isOpen={isDetailsModalOpen}
        onClose={() => setIsDetailsModalOpen(false)}
        asset={selectedAsset}
      />

      {/* Custom Styles */}
      <style jsx>{`
        .slider-thumb::-webkit-slider-thumb {
          appearance: none;
          height: 20px;
          width: 20px;
          border-radius: 50%;
          background: rgb(6, 182, 212);
          cursor: pointer;
          border: 2px solid white;
          box-shadow: 0 0 10px rgba(6, 182, 212, 0.5);
        }
        
        .slider-thumb::-moz-range-thumb {
          height: 20px;
          width: 20px;
          border-radius: 50%;
          background: rgb(6, 182, 212);
          cursor: pointer;
          border: 2px solid white;
          box-shadow: 0 0 10px rgba(6, 182, 212, 0.5);
        }
      `}</style>
    </div>
  );
}
--- END: src/components/sections/FluidMarketplace.tsx ---

=== FILE: src/components/sections/FluidTreasury.tsx ===

"use client";

import React from 'react';
import {
  DollarSign, TrendingUp, PieChart, Building, Ship, Zap,
  ArrowUpRight, Users, Calendar, Shield, Target, Coins
} from 'lucide-react';
import { treasuryData } from '@/data/mockData';
import { useUniversal } from '@/lib/universal';
import { motion } from 'framer-motion';

export default function FluidTreasury() {
  const { universalAttributes } = useUniversal();

  const stats = [
    {
      icon: DollarSign,
      label: 'Total Value',
      value: `$${(treasuryData.totalValue / 1000000).toFixed(0)}M`,
      change: treasuryData.growth.monthly,
      color: 'emerald'
    },
    {
      icon: Coins,
      label: 'Available Funds',
      value: `$${(treasuryData.availableFunds / 1000000).toFixed(0)}M`,
      change: '+5.2%',
      color: 'cyan'
    },
    {
      icon: TrendingUp,
      label: 'Monthly Income',
      value: `$${(treasuryData.monthlyIncome / 1000).toFixed(0)}K`,
      change: treasuryData.growth.monthly,
      color: 'amber'
    },
    {
      icon: PieChart,
      label: 'Net Cash Flow',
      value: `$${(treasuryData.netCashFlow / 1000).toFixed(0)}K`,
      change: treasuryData.growth.quarterly,
      color: 'blue'
    }
  ];

  const getAssetIcon = (assetName: string) => {
    if (assetName.includes('Real Estate')) return Building;
    if (assetName.includes('Horse')) return Zap;
    if (assetName.includes('Commercial')) return Building;
    return DollarSign;
  };

  const getColorClasses = (color: string) => {
    const colorMap = {
      emerald: 'from-emerald-500 to-green-500',
      amber: 'from-amber-500 to-orange-500',
      blue: 'from-blue-500 to-cyan-500',
      cyan: 'from-cyan-500 to-blue-500'
    };
    return colorMap[color as keyof typeof colorMap] || 'from-cyan-500 to-blue-500';
  };

  return (
    <section 
      className="py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900"
      {...universalAttributes}
    >
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl md:text-5xl font-bold text-white mb-6">
            Platform <span className="text-cyan-400">Treasury</span> Overview
          </h2>
          <p className="text-xl text-slate-300 max-w-3xl mx-auto">
            Transparent view of our platform's financial health, asset allocation, and performance metrics
          </p>
        </motion.div>

        {/* Stats Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-12">
          {stats.map((stat, index) => (
            <motion.div
              key={stat.label}
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6 hover:border-cyan-500/30 transition-all duration-300"
            >
              <div className="flex items-center justify-between mb-4">
                <div className={`p-3 rounded-xl bg-gradient-to-r ${getColorClasses(stat.color)}`}>
                  <stat.icon className="w-6 h-6 text-white" />
                </div>
                <div className="text-right">
                  <div className="text-green-400 text-sm font-semibold">{stat.change}</div>
                  <div className="text-slate-400 text-xs">This month</div>
                </div>
              </div>
              <h3 className="text-2xl font-bold text-white mb-2">{stat.value}</h3>
              <p className="text-slate-400">{stat.label}</p>
            </motion.div>
          ))}
        </div>

        {/* Asset Allocation */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.2 }}
          className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-8 mb-8"
        >
          <div className="flex items-center justify-between mb-8">
            <h3 className="text-2xl font-bold text-white">Asset Allocation</h3>
            <div className="text-slate-400">
              Total: <span className="text-white font-semibold">${(treasuryData.totalValue / 1000000).toFixed(0)}M</span>
            </div>
          </div>

          <div className="space-y-6">
            {treasuryData.assets.map((asset, index) => {
              const IconComponent = getAssetIcon(asset.name);
              return (
                <motion.div
                  key={asset.name}
                  initial={{ opacity: 0, x: -20 }}
                  whileInView={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.6, delay: 0.3 + index * 0.1 }}
                  className="flex items-center justify-between p-4 bg-slate-700/30 rounded-xl hover:bg-slate-700/50 transition-colors duration-300"
                >
                  <div className="flex items-center gap-4">
                    <div className={`p-3 rounded-xl bg-gradient-to-r ${getColorClasses(asset.color)}`}>
                      <IconComponent className="w-5 h-5 text-white" />
                    </div>
                    <div>
                      <h4 className="text-white font-semibold">{asset.name}</h4>
                      <p className="text-slate-400 text-sm">${(asset.value / 1000000).toFixed(1)}M</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-white font-semibold">{asset.percentage}%</div>
                    <div className="w-32 h-2 bg-slate-600 rounded-full overflow-hidden">
                      <div 
                        className={`h-full bg-gradient-to-r ${getColorClasses(asset.color)}`}
                        style={{ width: `${asset.percentage}%` }}
                      />
                    </div>
                  </div>
                </motion.div>
              );
            })}
          </div>
        </motion.div>

        {/* Performance Metrics */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
          className="grid grid-cols-1 md:grid-cols-3 gap-6"
        >
          <div className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6 text-center">
            <Target className="w-8 h-8 text-amber-400 mx-auto mb-3" />
            <div className="text-2xl font-bold text-white mb-1">{treasuryData.growth.monthly}</div>
            <div className="text-slate-400">Monthly Growth</div>
          </div>
          <div className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6 text-center">
            <TrendingUp className="w-8 h-8 text-emerald-400 mx-auto mb-3" />
            <div className="text-2xl font-bold text-white mb-1">{treasuryData.growth.quarterly}</div>
            <div className="text-slate-400">Quarterly Growth</div>
          </div>
          <div className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-6 text-center">
            <Zap className="w-8 h-8 text-cyan-400 mx-auto mb-3" />
            <div className="text-2xl font-bold text-white mb-1">{treasuryData.growth.yearly}</div>
            <div className="text-slate-400">Yearly Growth</div>
          </div>
        </motion.div>
      </div>
    </section>
  );
}
--- END: src/components/sections/FluidTreasury.tsx ---

=== FILE: src/components/sections/HowItWorksSection.tsx ===

"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { Search, Wallet, TrendingUp, RefreshCw, Zap, Shield, Coins, Sparkles } from 'lucide-react';

const HowItWorksSection = () => {
  const steps = [
    {
      icon: Search,
      title: "Discover Elite Assets",
      description: "Browse our curated collection of institutional-grade real-world assets with proven performance",
      color: "cyan",
      gradient: "from-cyan-500 to-blue-500",
      features: ["Commercial Real Estate", "Fine Art Collections", "Marine Assets", "Thoroughbreds"]
    },
    {
      icon: Wallet,
      title: "Invest Fractionally",
      description: "Start with as little as $100 and own a verified piece of multi-million dollar assets",
      color: "blue", 
      gradient: "from-blue-500 to-purple-500",
      features: ["$100 Minimum", "Blockchain Verified", "Instant Ownership", "Full Transparency"]
    },
    {
      icon: TrendingUp,
      title: "Grow Your Wealth",
      description: "Earn regular passive income and benefit from long-term asset appreciation",
      color: "emerald",
      gradient: "from-emerald-500 to-cyan-500",
      features: ["Monthly Dividends", "Asset Appreciation", "Tax Benefits", "Compound Growth"]
    },
    {
      icon: RefreshCw,
      title: "Trade & Manage",
      description: "Securely trade your fractions on our regulated platform with real-time tracking",
      color: "purple",
      gradient: "from-purple-500 to-pink-500",
      features: ["24/7 Trading", "Instant Settlements", "Portfolio Analytics", "Mobile Access"]
    }
  ];

  return (
    <section id="how-it-works" className="relative py-24 md:py-32 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 overflow-hidden">
      {/* Background Elements */}
      <div className="absolute inset-0">
        <div className="absolute top-0 left-0 w-96 h-96 bg-cyan-500/5 rounded-full blur-3xl" />
        <div className="absolute bottom-0 right-0 w-96 h-96 bg-purple-500/5 rounded-full blur-3xl" />
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full h-48 bg-gradient-to-r from-transparent via-cyan-500/10 to-transparent" />
      </div>

      <div className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Enhanced Header */}
        <motion.div
          initial={{ opacity: 0, y: 40 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
          className="text-center mb-20"
        >
          {/* Premium Badge */}
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            whileInView={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            viewport={{ once: true }}
            className="inline-flex items-center space-x-3 bg-gradient-to-r from-cyan-500/20 to-blue-500/20 backdrop-blur-lg border border-cyan-400/40 rounded-2xl px-6 py-4 mb-8 shadow-2xl shadow-cyan-500/20"
          >
            <Zap className="w-5 h-5 text-cyan-400" />
            <span className="text-cyan-300 font-bold text-sm tracking-wider">
              SIMPLE & POWERFUL PROCESS
            </span>
          </motion.div>

          <motion.h2
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.3 }}
            viewport={{ once: true }}
            className="text-4xl md:text-6xl lg:text-7xl font-bold text-white mb-6 leading-tight"
          >
            Start Building Wealth in{' '}
            <span className="bg-gradient-to-r from-cyan-400 via-blue-400 to-purple-400 bg-clip-text text-transparent">
              4 Simple Steps
            </span>
          </motion.h2>

          <motion.p
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.4 }}
            viewport={{ once: true }}
            className="text-xl md:text-2xl text-slate-300 max-w-4xl mx-auto leading-relaxed"
          >
            From discovery to dividends - our streamlined platform makes elite asset investment 
            <span className="text-cyan-400 font-semibold"> accessible, secure, and profitable</span>
          </motion.p>
        </motion.div>

        {/* Enhanced Steps Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-4 gap-8">
          {steps.map((step, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, y: 50, scale: 0.9 }}
              whileInView={{ opacity: 1, y: 0, scale: 1 }}
              whileHover={{ y: -10, scale: 1.02 }}
              transition={{ 
                duration: 0.6, 
                delay: index * 0.15,
                type: "spring",
                stiffness: 100
              }}
              viewport={{ once: true }}
              className="relative group"
            >
              {/* Glow Effect */}
              <div className={`absolute inset-0 bg-gradient-to-br ${step.gradient} rounded-3xl blur-xl opacity-0 group-hover:opacity-30 transition-opacity duration-500`} />
              
              {/* Main Card */}
              <div className="relative bg-gradient-to-br from-slate-800/80 to-slate-900/80 backdrop-blur-xl rounded-3xl border border-slate-700/50 group-hover:border-cyan-400/30 p-8 transition-all duration-500 overflow-hidden">
                
                {/* Step Number */}
                <div className="absolute top-6 right-6">
                  <div className="w-10 h-10 bg-gradient-to-r from-cyan-500 to-blue-500 rounded-full flex items-center justify-center shadow-lg">
                    <span className="text-white font-bold text-sm">{index + 1}</span>
                  </div>
                </div>

                {/* Icon Container */}
                <div className={`w-20 h-20 bg-gradient-to-r ${step.gradient} rounded-2xl flex items-center justify-center mb-6 mx-auto group-hover:scale-110 transition-transform duration-300 shadow-lg`}>
                  <step.icon className="w-10 h-10 text-white" />
                </div>

                {/* Content */}
                <h3 className="text-2xl font-bold text-white text-center mb-4 group-hover:text-cyan-400 transition-colors">
                  {step.title}
                </h3>

                <p className="text-slate-300 text-center mb-6 leading-relaxed">
                  {step.description}
                </p>

                {/* Features List */}
                <div className="space-y-2">
                  {step.features.map((feature, featureIndex) => (
                    <motion.div
                      key={featureIndex}
                      initial={{ opacity: 0, x: -20 }}
                      whileInView={{ opacity: 1, x: 0 }}
                      transition={{ duration: 0.4, delay: 0.6 + (index * 0.1) + (featureIndex * 0.05) }}
                      viewport={{ once: true }}
                      className="flex items-center space-x-2 text-slate-400 text-sm"
                    >
                      <div className="w-1.5 h-1.5 bg-cyan-400 rounded-full" />
                      <span>{feature}</span>
                    </motion.div>
                  ))}
                </div>

                {/* Connector Line (for desktop) */}
                {index < steps.length - 1 && (
                  <div className="hidden xl:block absolute top-1/2 -right-4 w-8 h-0.5 bg-gradient-to-r from-cyan-500 to-blue-500 transform translate-x-full">
                    <motion.div
                      animate={{ 
                        scale: [1, 1.2, 1],
                        opacity: [0.5, 1, 0.5]
                      }}
                      transition={{ 
                        duration: 2, 
                        repeat: Infinity,
                        delay: index * 0.5
                      }}
                      className="w-2 h-2 bg-cyan-400 rounded-full absolute -right-1 -top-1"
                    />
                  </div>
                )}
              </div>
            </motion.div>
          ))}
        </div>

        {/* Enhanced Progress Visualization */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.6 }}
          viewport={{ once: true }}
          className="mt-16 max-w-4xl mx-auto"
        >
          <div className="bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700 p-8">
            <div className="flex items-center justify-between mb-6">
              {steps.map((step, index) => (
                <div key={index} className="text-center flex-1">
                  <div className={`text-sm font-semibold text-${step.color}-400 mb-2`}>
                    Step {index + 1}
                  </div>
                  <div className="text-xs text-slate-400">{step.title.split(' ')[0]}</div>
                </div>
              ))}
            </div>
            
            {/* Animated Progress Bar */}
            <div className="h-3 bg-slate-700 rounded-full overflow-hidden relative">
              <motion.div
                initial={{ width: "0%" }}
                whileInView={{ width: "100%" }}
                transition={{ duration: 2, ease: "easeOut", delay: 0.8 }}
                className="h-full bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 relative"
              >
                {/* Moving Shine */}
                <motion.div
                  animate={{ x: ["0%", "100%", "0%"] }}
                  transition={{ duration: 3, repeat: Infinity, ease: "easeInOut" }}
                  className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -skew-x-12"
                />
              </motion.div>
            </div>

            {/* Stats Footer */}
            <div className="flex justify-center mt-8 pt-6 border-t border-slate-700">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-6 text-center">
                {[
                  { icon: Shield, value: "100%", label: "Secure" },
                  { icon: Coins, value: "$100", label: "Minimum" },
                  { icon: Zap, value: "Instant", label: "Settlement" },
                  { icon: Sparkles, value: "2,500+", label: "Investors" }
                ].map((stat, index) => (
                  <div key={index} className="flex items-center space-x-2 text-slate-400">
                    <stat.icon className="w-4 h-4 text-cyan-400" />
                    <div>
                      <div className="text-white font-semibold text-sm">{stat.value}</div>
                      <div className="text-xs">{stat.label}</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </motion.div>

        {/* CTA Section */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.8 }}
          viewport={{ once: true }}
          className="text-center mt-16"
        >
          <div className="bg-gradient-to-r from-cyan-500/10 to-blue-500/10 backdrop-blur-sm rounded-2xl border border-cyan-500/20 p-8 max-w-2xl mx-auto">
            <h3 className="text-2xl font-bold text-white mb-4">
              Ready to Start Your Investment Journey?
            </h3>
            <p className="text-slate-300 mb-6">
              Join thousands of investors already building wealth through real-world assets
            </p>
            <motion.button
              whileHover={{ scale: 1.05, y: -2 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => window.location.href = '/marketplace'}
              className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white px-8 py-4 rounded-xl font-semibold transition-all duration-300 flex items-center space-x-3 mx-auto shadow-lg hover:shadow-xl"
            >
              <Wallet className="w-5 h-5" />
              <span>Explore Investment Opportunities</span>
              <Sparkles className="w-4 h-4" />
            </motion.button>
          </div>
        </motion.div>
      </div>
    </section>
  );
};

export default HowItWorksSection;
--- END: src/components/sections/HowItWorksSection.tsx ---

=== FILE: src/components/sections/OurJourneySection.tsx ===

// src/components/sections/ModernJourneySection.tsx - PREMIUM ENHANCED VERSION
"use client";

import React, { useState, useRef, useEffect } from 'react';
import { 
  Lock, Target, Zap, Users, Gem, Rocket, Shield, DollarSign,
  ArrowRight, Sparkles, TrendingUp, Globe, Building2, Crown,
  Award, BarChart3, Cpu, Eye, Play, Pause, ChevronLeft, ChevronRight,
  CheckCircle, Star, Heart, Share2, Download, Maximize2
} from 'lucide-react';
import { useRouter } from 'next/navigation';
import { motion, AnimatePresence, useInView } from 'framer-motion';
import { useNotification } from '@/contexts/NotificationContext';

export default function ModernJourneySection() {
  const router = useRouter();
  const { showNotification, showPremium } = useNotification();
  const [hoveredCard, setHoveredCard] = useState<number | null>(null);
  const [activePhase, setActivePhase] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [scrollProgress, setScrollProgress] = useState(0);
  const sectionRef = useRef<HTMLDivElement>(null);
  const timelineRef = useRef<HTMLDivElement>(null);

  const isInView = useInView(sectionRef, { once: true, amount: 0.3 });

  useEffect(() => {
    const handleScroll = () => {
      if (timelineRef.current) {
        const element = timelineRef.current;
        const windowHeight = window.innerHeight;
        const elementTop = element.getBoundingClientRect().top;
        const elementHeight = element.offsetHeight;
        
        const progress = Math.max(0, Math.min(1, 
          (windowHeight - elementTop) / (windowHeight + elementHeight)
        ));
        setScrollProgress(progress);
        setActivePhase(Math.floor(progress * storyTimeline.length));
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const storyTimeline = [
    {
      phase: "01",
      title: "The Wall Street Barrier",
      description: "$50M luxury assets were exclusively available to institutions and ultra-wealthy individuals. 99.9% of global investors were systematically locked out of premium real estate and thoroughbred opportunities.",
      icon: Lock,
      stats: "0.1% Access Rate",
      gradient: "from-blue-500 to-cyan-500",
      color: "blue",
      metrics: [
        { label: "Minimum Investment", value: "$5M+" },
        { label: "Accessible To", value: "0.1%" },
        { label: "Annual Returns", value: "22-46%" }
      ],
      image: "/images/wall-street-barrier.png",
      year: "Pre-2020"
    },
    {
      phase: "02",
      title: "Blockchain Breakthrough", 
      description: "We pioneered Real World Asset (RWA) tokenization technology - transforming physical assets into secure, transparent digital tokens with verifiable ownership rights and institutional-grade security.",
      icon: Zap,
      stats: "Tokenization Tech",
      gradient: "from-emerald-500 to-green-500",
      color: "emerald",
      metrics: [
        { label: "Assets Tokenized", value: "$150M+" },
        { label: "Blockchain Security", value: "256-bit" },
        { label: "Transaction Speed", value: "<2s" }
      ],
      image: "/images/blockchain-breakthrough.png",
      year: "2022"
    },
    {
      phase: "03", 
      title: "Fractional Revolution",
      description: "Democratizing elite investment access by splitting $50M premium assets into affordable fractions. Real ownership starting at $100 with full legal rights and transparent blockchain verification.",
      icon: Gem,
      stats: "$100 Entry Point",
      gradient: "from-amber-500 to-orange-500", 
      color: "amber",
      metrics: [
        { label: "Minimum Investment", value: "$100" },
        { label: "Ownership Rights", value: "100%" },
        { label: "Assets Available", value: "7+" }
      ],
      image: "/images/fractional-revolution.png",
      year: "2023"
    },
    {
      phase: "04",
      title: "New Wealth Era",
      description: "2,470+ visionary investors are now building generational wealth through elite assets previously reserved for the 1%. Join the movement reshaping global investment accessibility.",
      icon: Users,
      stats: "2.4K+ Investors",
      gradient: "from-purple-500 to-pink-500",
      color: "purple",
      metrics: [
        { label: "Total Investors", value: "2,470+" },
        { label: "Portfolio Value", value: "$7.2M+" },
        { label: "Success Rate", value: "98%" }
      ],
      image: "/images/new-wealth-era.png",
      year: "2024"
    }
  ];

  const valueProps = [
    {
      icon: Shield,
      title: "Asset-Backed Security",
      description: "Every token backed by real-world assets with institutional-grade due diligence and blockchain verification",
      gradient: "from-blue-500 to-cyan-500",
      features: ["Legal Ownership", "Insurance Coverage", "Regular Audits"]
    },
    {
      icon: TrendingUp, 
      title: "Proven Performance",
      description: "Consistent 22-46% historical returns from income-generating real estate and premium thoroughbred assets",
      gradient: "from-emerald-500 to-green-500",
      features: ["22-46% ROI", "Monthly Returns", "Track Record"]
    },
    {
      icon: Globe,
      title: "Global Access",
      description: "Invest in international premium assets from anywhere with 24/7 blockchain-powered liquidity and transparency",
      gradient: "from-amber-500 to-orange-500",
      features: ["Anywhere Access", "24/7 Trading", "Global Assets"]
    },
    {
      icon: Building2,
      title: "Institutional Quality",
      description: "Same premium assets trusted by billion-dollar funds and family offices, now democratically accessible",
      gradient: "from-purple-500 to-pink-500",
      features: ["Premium Assets", "Institutional Grade", "Expert Vetting"]
    }
  ];

  const achievements = [
    { number: "$150M+", label: "Assets Tokenized", icon: DollarSign },
    { number: "2,470+", label: "Active Investors", icon: Users },
    { number: "98%", label: "Success Rate", icon: Award },
    { number: "7", label: "Premium Assets", icon: Gem },
    { number: "22-46%", label: "Projected ROI", icon: TrendingUp },
    { number: "24/7", label: "Global Access", icon: Globe }
  ];

  const handleJoinRevolution = () => {
    showPremium(
      'Welcome to the Revolution! 🚀',
      'Join 2,470+ investors building generational wealth through elite real-world assets. Start your journey with just $100.',
      {
        label: 'Explore Opportunities',
        onClick: () => router.push('/marketplace')
      }
    );
  };

  const handleLearnMore = () => {
    router.push('/how-it-works');
  };

  const handleWatchDemo = () => {
    showNotification({
      type: 'info',
      title: 'Platform Demo',
      message: 'Launching interactive platform tour...',
      duration: 3000
    });
  };

  return (
    <div ref={sectionRef} className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 py-20 relative overflow-hidden">
      {/* Animated Background Elements */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute top-10 left-10 w-4 h-4 bg-cyan-400 rounded-full opacity-20 animate-pulse" />
        <div className="absolute top-1/4 right-20 w-3 h-3 bg-blue-400 rounded-full opacity-30 animate-bounce" />
        <div className="absolute bottom-1/4 left-1/4 w-3 h-3 bg-purple-400 rounded-full opacity-40 animate-ping" />
        <div className="absolute top-1/2 right-1/3 w-2 h-2 bg-emerald-400 rounded-full opacity-50 animate-pulse" />
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
        
        {/* Premium Header */}
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8, ease: "easeOut" }}
          className="text-center mb-20"
        >
          <motion.div
            initial={{ scale: 0.9, opacity: 0 }}
            animate={isInView ? { scale: 1, opacity: 1 } : {}}
            transition={{ delay: 0.2, duration: 0.6 }}
            className="inline-flex items-center gap-3 px-6 py-3 bg-white/5 backdrop-blur-xl border border-white/10 rounded-2xl mb-8 group cursor-pointer hover:border-cyan-500/30 transition-all duration-500"
          >
            <Sparkles className="w-5 h-5 text-cyan-400 group-hover:rotate-180 transition-transform duration-500" />
            <span className="text-cyan-400 font-semibold text-sm tracking-wide uppercase">
              THE RWA REVOLUTION
            </span>
            <Rocket className="w-5 h-5 text-cyan-400 group-hover:scale-110 transition-transform" />
          </motion.div>
          
          <motion.h1
            initial={{ opacity: 0, y: 30 }}
            animate={isInView ? { opacity: 1, y: 0 } : {}}
            transition={{ delay: 0.3, duration: 0.8 }}
            className="text-5xl md:text-7xl lg:text-8xl font-bold text-white mb-6 leading-tight"
          >
            Democratizing{' '}
            <span className="bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-600 bg-clip-text text-transparent animate-gradient">
              Elite Assets
            </span>
          </motion.h1>
          
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={isInView ? { opacity: 1, y: 0 } : {}}
            transition={{ delay: 0.5, duration: 0.6 }}
            className="text-xl md:text-2xl text-slate-300 max-w-4xl mx-auto leading-relaxed mb-8"
          >
            Transforming $50M institutional investments into accessible opportunities through{' '}
            <span className="text-cyan-400 font-semibold bg-cyan-400/10 px-2 py-1 rounded-lg">
              blockchain-powered fractional ownership
            </span>
            . Join the movement reshaping global wealth distribution.
          </motion.p>

          {/* Header CTA Buttons */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={isInView ? { opacity: 1, y: 0 } : {}}
            transition={{ delay: 0.7, duration: 0.6 }}
            className="flex flex-col sm:flex-row gap-4 justify-center items-center"
          >
            <motion.button
              onClick={handleJoinRevolution}
              className="group inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-bold rounded-2xl shadow-2xl shadow-cyan-500/25 hover:shadow-cyan-500/40 transition-all duration-300 hover:scale-105 relative overflow-hidden"
              whileHover={{ y: -2 }}
              whileTap={{ scale: 0.98 }}
            >
              <Crown className="w-5 h-5" />
              <span className="text-lg">Start Investing Today</span>
              <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform" />
              <div className="absolute inset-0 -skew-x-12 bg-gradient-to-r from-transparent via-white/20 to-transparent translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000" />
            </motion.button>

            <motion.button
              onClick={handleWatchDemo}
              className="group inline-flex items-center gap-3 px-6 py-4 bg-transparent border-2 border-slate-600 text-slate-300 hover:border-cyan-500 hover:text-cyan-400 font-semibold rounded-2xl transition-all duration-300"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.98 }}
            >
              <Play className="w-5 h-5" />
              <span>Watch Platform Demo</span>
            </motion.button>
          </motion.div>
        </motion.div>

        {/* Achievement Metrics */}
        <motion.div
          initial={{ opacity: 0, y: 40 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ delay: 0.9, duration: 0.6 }}
          className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6 mb-20"
        >
          {achievements.map((achievement, index) => (
            <motion.div
              key={achievement.label}
              initial={{ opacity: 0, scale: 0.8 }}
              animate={isInView ? { opacity: 1, scale: 1 } : {}}
              transition={{ delay: 1 + index * 0.1, duration: 0.5 }}
              className="text-center p-4 bg-slate-800/30 backdrop-blur-sm rounded-2xl border border-slate-700/50 hover:border-cyan-500/30 transition-all duration-300 group cursor-pointer"
            >
              <achievement.icon className="w-8 h-8 text-cyan-400 mx-auto mb-3 group-hover:scale-110 transition-transform" />
              <div className="text-2xl font-bold text-white group-hover:text-cyan-400 transition-colors">
                {achievement.number}
              </div>
              <div className="text-sm text-slate-400 mt-1">{achievement.label}</div>
            </motion.div>
          ))}
        </motion.div>

        {/* Enhanced Timeline */}
        <div ref={timelineRef} className="relative mb-20">
          {/* Progress Line */}
          <div className="absolute left-8 top-0 bottom-0 w-1 bg-slate-700/50 rounded-full hidden lg:block">
            <motion.div 
              className="absolute top-0 left-0 w-1 bg-gradient-to-b from-cyan-500 to-blue-500 rounded-full"
              initial={{ height: 0 }}
              animate={{ height: `${scrollProgress * 100}%` }}
              transition={{ duration: 0.5 }}
            />
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 lg:gap-16">
            {storyTimeline.map((chapter, index) => (
              <motion.div
                key={chapter.phase}
                initial={{ opacity: 0, x: index % 2 === 0 ? -50 : 50 }}
                animate={isInView ? { opacity: 1, x: 0 } : {}}
                transition={{ delay: index * 0.2, duration: 0.7 }}
                className={`group cursor-pointer relative ${
                  index % 2 === 0 ? 'lg:pr-8' : 'lg:pl-8 lg:mt-20'
                }`}
                onMouseEnter={() => setHoveredCard(index)}
                onMouseLeave={() => setHoveredCard(null)}
              >
                {/* Timeline Dot */}
                <div className={`
                  absolute left-8 -translate-x-1/2 w-4 h-4 rounded-full border-4 border-slate-900 z-10 hidden lg:block
                  ${activePhase >= index ? 'bg-cyan-500 border-cyan-500 shadow-lg shadow-cyan-500/50' : 'bg-slate-700 border-slate-900'}
                  transition-all duration-500
                `} />

                <div className={`
                  relative p-8 rounded-3xl border-2 transition-all duration-500 overflow-hidden backdrop-blur-sm
                  ${hoveredCard === index 
                    ? 'bg-white/10 border-cyan-400/50 scale-105 shadow-2xl shadow-cyan-500/20' 
                    : 'bg-white/5 border-white/10 hover:border-white/20'
                  }
                  ${activePhase >= index ? 'border-cyan-400/30' : ''}
                `}>
                  
                  {/* Animated Gradient Background */}
                  <div className={`
                    absolute inset-0 opacity-0 group-hover:opacity-10 transition-opacity duration-500
                    bg-gradient-to-r ${chapter.gradient}
                  `}></div>

                  {/* Year Badge */}
                  <div className="absolute top-4 right-4">
                    <span className="px-3 py-1 bg-slate-800/80 backdrop-blur-sm rounded-full text-slate-400 text-sm font-semibold border border-slate-700/50">
                      {chapter.year}
                    </span>
                  </div>

                  {/* Phase Header */}
                  <div className="flex items-center gap-4 mb-6">
                    <div className={`
                      w-16 h-16 rounded-2xl flex items-center justify-center text-white font-bold text-xl
                      bg-gradient-to-r ${chapter.gradient} shadow-lg group-hover:scale-110 transition-transform duration-300
                    `}>
                      {chapter.phase}
                    </div>
                    <div className="flex-1">
                      <h3 className="text-2xl font-bold text-white mb-2">
                        {chapter.title}
                      </h3>
                      <div className="inline-flex items-center px-3 py-1 bg-white/10 rounded-full border border-white/20">
                        <span className="text-cyan-400 text-sm font-semibold">{chapter.stats}</span>
                      </div>
                    </div>
                  </div>

                  {/* Description */}
                  <p className="text-slate-300 leading-relaxed mb-6 text-lg">
                    {chapter.description}
                  </p>

                  {/* Metrics */}
                  <div className="grid grid-cols-3 gap-3 mb-6">
                    {chapter.metrics.map((metric, metricIndex) => (
                      <div key={metricIndex} className="text-center p-3 bg-slate-800/30 rounded-xl border border-slate-700/50">
                        <div className="text-sm text-slate-400 mb-1">{metric.label}</div>
                        <div className="text-white font-bold">{metric.value}</div>
                      </div>
                    ))}
                  </div>

                  {/* Hover Actions */}
                  <AnimatePresence>
                    {hoveredCard === index && (
                      <motion.div
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        exit={{ opacity: 0, y: 10 }}
                        className="flex gap-2"
                      >
                        <button className="flex-1 py-2 px-3 bg-cyan-500/20 text-cyan-400 rounded-xl border border-cyan-500/30 text-sm font-semibold hover:bg-cyan-500/30 transition-all duration-300">
                          Learn More
                        </button>
                        <button className="p-2 bg-slate-700/50 rounded-xl border border-slate-600 hover:border-slate-500 transition-all duration-300">
                          <Share2 className="w-4 h-4 text-slate-400" />
                        </button>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </div>
              </motion.div>
            ))}
          </div>
        </div>

        {/* Enhanced Value Propositions */}
        <motion.div
          initial={{ opacity: 0, y: 40 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ delay: 1.2, duration: 0.6 }}
          className="mb-20"
        >
          <div className="text-center mb-12">
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-4">
              Why <span className="text-cyan-400">Choose ASRD</span>?
            </h2>
            <p className="text-xl text-slate-300 max-w-2xl mx-auto">
              Institutional-grade investment opportunities with democratic accessibility and blockchain transparency
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {valueProps.map((prop, index) => (
              <motion.div
                key={prop.title}
                initial={{ opacity: 0, y: 20 }}
                animate={isInView ? { opacity: 1, y: 0 } : {}}
                transition={{ delay: 1.4 + index * 0.1, duration: 0.5 }}
                className="group p-6 rounded-2xl bg-slate-800/30 backdrop-blur-sm border border-slate-700/50 hover:border-cyan-400/30 transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-cyan-500/10"
              >
                <div className={`
                  w-14 h-14 rounded-2xl mb-4 flex items-center justify-center shadow-lg
                  bg-gradient-to-r ${prop.gradient} group-hover:scale-110 transition-transform duration-300
                `}>
                  <prop.icon className="w-6 h-6 text-white" />
                </div>
                
                <h3 className="text-xl font-bold text-white mb-3">
                  {prop.title}
                </h3>
                
                <p className="text-slate-400 leading-relaxed mb-4">
                  {prop.description}
                </p>

                <div className="space-y-2">
                  {prop.features.map((feature, featureIndex) => (
                    <div key={featureIndex} className="flex items-center gap-2 text-sm text-slate-300">
                      <CheckCircle className="w-4 h-4 text-cyan-400" />
                      <span>{feature}</span>
                    </div>
                  ))}
                </div>
              </motion.div>
            ))}
          </div>
        </motion.div>

        {/* Premium CTA Section */}
        <motion.div
          initial={{ opacity: 0, y: 40 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ delay: 1.6, duration: 0.6 }}
          className="text-center"
        >
          <div className="max-w-4xl mx-auto p-8 md:p-12 rounded-3xl bg-gradient-to-r from-cyan-500/10 via-blue-500/10 to-purple-500/10 border-2 border-cyan-400/20 backdrop-blur-xl relative overflow-hidden">
            
            {/* Background Pattern */}
            <div className="absolute inset-0 opacity-5">
              <div className="absolute top-4 left-4 w-8 h-8 border-2 border-cyan-400 rounded-lg" />
              <div className="absolute bottom-4 right-4 w-6 h-6 border-2 border-blue-400 rounded-lg" />
              <div className="absolute top-1/2 left-1/4 w-4 h-4 border-2 border-purple-400 rounded-full" />
            </div>

            <Rocket className="w-16 h-16 text-cyan-400 mx-auto mb-6" />
            
            <h2 className="text-4xl md:text-5xl font-bold text-white mb-4">
              Join the <span className="bg-gradient-to-r from-cyan-400 to-blue-500 bg-clip-text text-transparent">Financial Revolution</span>
            </h2>
            
            <p className="text-slate-300 text-xl mb-8 leading-relaxed max-w-2xl mx-auto">
              What institutions spend millions to access is now available starting at $100. 
              This isn't just investing - it's building generational wealth through elite real-world assets.
            </p>

            <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
              <motion.button
                onClick={handleJoinRevolution}
                className="group inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-cyan-500 to-blue-600 text-white font-bold rounded-2xl shadow-2xl shadow-cyan-500/25 hover:shadow-cyan-500/40 transition-all duration-300 hover:scale-105 relative overflow-hidden"
                whileHover={{ y: -2 }}
                whileTap={{ scale: 0.98 }}
              >
                <Target className="w-5 h-5" />
                <span className="text-lg">Start Your Journey</span>
                <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform" />
                <div className="absolute inset-0 -skew-x-12 bg-gradient-to-r from-transparent via-white/20 to-transparent translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000" />
              </motion.button>

              <motion.button
                onClick={handleLearnMore}
                className="group inline-flex items-center gap-3 px-6 py-4 bg-transparent border-2 border-slate-600 text-slate-300 hover:border-cyan-500 hover:text-cyan-400 font-semibold rounded-2xl transition-all duration-300"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.98 }}
              >
                <Eye className="w-5 h-5" />
                <span>Learn How It Works</span>
              </motion.button>
            </div>

            {/* Trust Indicators */}
            <div className="flex flex-wrap justify-center gap-6 mt-8 text-sm text-slate-400">
              <div className="flex items-center gap-2">
                <Shield className="w-4 h-4 text-emerald-400" />
                <span>Bank-Grade Security</span>
              </div>
              <div className="flex items-center gap-2">
                <Award className="w-4 h-4 text-amber-400" />
                <span>98% Success Rate</span>
              </div>
              <div className="flex items-center gap-2">
                <Users className="w-4 h-4 text-blue-400" />
                <span>2,470+ Investors</span>
              </div>
            </div>
          </div>
        </motion.div>
      </div>

      {/* Custom Styles */}
      <style jsx>{`
        @keyframes gradient {
          0% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
          100% { background-position: 0% 50%; }
        }
        .animate-gradient {
          background-size: 200% 200%;
          animation: gradient 6s ease infinite;
        }
      `}</style>
    </div>
  );
}
--- END: src/components/sections/OurJourneySection.tsx ---

=== FILE: src/components/sections/PlatformStats.tsx ===

"use client";

import React from 'react';
import { Shield, Users, TrendingUp, DollarSign, Target, Zap } from 'lucide-react';
import { platformStats } from '@/data/mockData';
import { useUniversal } from '@/lib/universal';
import { motion } from 'framer-motion';

const PlatformStats = () => {
  const { universalAttributes } = useUniversal();

  const stats = [
    {
      icon: DollarSign,
      value: `$${(platformStats.totalInvestments / 1000000).toFixed(0)}M+`,
      label: "Assets Under Management",
      description: "Total platform investments",
      color: "blue"
    },
    {
      icon: Users,
      value: `${platformStats.totalUsers.toLocaleString()}+`,
      label: "Total Investors",
      description: "Growing community",
      color: "emerald"
    },
    {
      icon: TrendingUp,
      value: `${platformStats.averageROI}%`,
      label: "Average ROI",
      description: "Historical platform returns",
      color: "amber"
    },
    {
      icon: Shield,
      value: `$${(platformStats.totalReturns / 1000000).toFixed(1)}M+`,
      label: "Total Returns",
      description: "Generated for investors",
      color: "cyan"
    }
  ];

  const getColorClasses = (color: string) => {
    const colorMap = {
      emerald: 'from-emerald-500 to-green-500',
      amber: 'from-amber-500 to-orange-500',
      blue: 'from-blue-500 to-cyan-500',
      cyan: 'from-cyan-500 to-blue-500'
    };
    return colorMap[color as keyof typeof colorMap] || 'from-cyan-500 to-blue-500';
  };

  return (
    <section 
      className="py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900"
      {...universalAttributes}
    >
      <div className="max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl md:text-5xl font-bold text-white mb-6">
            Platform <span className="text-cyan-400">Performance</span>
          </h2>
          <p className="text-xl text-slate-300 max-w-3xl mx-auto">
            Trusted by thousands of investors with proven track record and transparent reporting
          </p>
        </motion.div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
          {stats.map((stat, index) => (
            <motion.div
              key={stat.label}
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              className="text-center group"
            >
              <div className={`inline-flex items-center justify-center w-20 h-20 rounded-2xl bg-gradient-to-r ${getColorClasses(stat.color)} mb-6 group-hover:scale-110 transition-transform duration-300`}>
                <stat.icon className="w-8 h-8 text-white" />
              </div>
              <h3 className="text-3xl font-bold text-white mb-2">{stat.value}</h3>
              <h4 className="text-lg font-semibold text-cyan-400 mb-2">{stat.label}</h4>
              <p className="text-slate-400">{stat.description}</p>
            </motion.div>
          ))}
        </div>

        {/* Growth Metric */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
          className="text-center mt-12"
        >
          <div className="inline-flex items-center gap-2 bg-slate-800/50 backdrop-blur-sm border border-slate-700 rounded-full px-6 py-3">
            <Zap className="w-5 h-5 text-amber-400" />
            <span className="text-amber-400 font-semibold">Platform Growth: +{platformStats.platformGrowth}%</span>
            <Target className="w-5 h-5 text-emerald-400" />
          </div>
        </motion.div>
      </div>
    </section>
  );
};

export default PlatformStats;
--- END: src/components/sections/PlatformStats.tsx ---

=== FILE: src/components/sections/ProblemSection.tsx ===

"use client";

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Lock, X, Check, ArrowRight, Users, Building2, TrendingUp, Zap, Gem, Crown, Shield, Coins, Sparkles } from 'lucide-react';

const ProblemSection = () => {
  const [hoveredBarrier, setHoveredBarrier] = useState<number | null>(null);
  const [activeComparison, setActiveComparison] = useState<'wealthy' | 'individual'>('wealthy');

  const barriers = [
    {
      id: 1,
      icon: Lock,
      title: "High Minimum Investments",
      description: "Traditional real estate and private equity require $50,000 - $1,000,000+ minimums, excluding 95% of potential investors.",
      stat: "Average Entry: $250,000+",
      color: "red",
      gradient: "from-red-500 to-pink-500",
      impact: "95% Excluded"
    },
    {
      id: 2,
      icon: Building2,
      title: "Exclusive Networks",
      description: "The best deals flow through private networks and family offices, completely inaccessible to the general public.",
      stat: "Limited to 1% of Investors",
      color: "amber",
      gradient: "from-amber-500 to-orange-500",
      impact: "1% Access"
    },
    {
      id: 3,
      icon: TrendingUp,
      title: "Complex Processes",
      description: "Months of due diligence, legal paperwork, and complex structures create insurmountable barriers for most investors.",
      stat: "3-6 Month Process",
      color: "blue",
      gradient: "from-blue-500 to-cyan-500",
      impact: "90 Days+"
    }
  ];

  const wealthyAssets = [
    { name: 'Commercial Real Estate', return: '8-12%', premium: true, trend: 'up' },
    { name: 'Private Equity', return: '15-25%', premium: true, trend: 'up' },
    { name: 'Venture Capital', return: '20-40%', premium: true, trend: 'up' },
    { name: 'Infrastructure Funds', return: '9-14%', premium: true, trend: 'up' }
  ];

  const individualAssets = [
    { name: 'Public Stocks', return: '7-10%', premium: false, trend: 'volatile' },
    { name: 'Bonds & Treasuries', return: '2-4%', premium: false, trend: 'down' },
    { name: 'ETFs & Mutual Funds', return: '6-9%', premium: false, trend: 'neutral' },
    { name: 'Savings Accounts', return: '0-1%', premium: false, trend: 'down' }
  ];

  return (
    <section className="relative py-24 md:py-32 bg-gradient-to-br from-slate-50 via-white to-slate-100 overflow-hidden">
      {/* Background Elements */}
      <div className="absolute inset-0">
        <div className="absolute top-0 right-0 w-96 h-96 bg-cyan-500/5 rounded-full blur-3xl" />
        <div className="absolute bottom-0 left-0 w-96 h-96 bg-blue-500/5 rounded-full blur-3xl" />
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-full h-48 bg-gradient-to-r from-transparent via-cyan-500/10 to-transparent" />
      </div>

      <div className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Enhanced Header */}
        <motion.div
          initial={{ opacity: 0, y: 40 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          viewport={{ once: true }}
          className="text-center mb-20"
        >
          {/* Premium Badge */}
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            whileInView={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            viewport={{ once: true }}
            className="inline-flex items-center space-x-3 bg-gradient-to-r from-red-500/20 to-amber-500/20 backdrop-blur-lg border border-red-400/40 rounded-2xl px-6 py-4 mb-8 shadow-2xl shadow-red-500/20"
          >
            <Zap className="w-5 h-5 text-red-400" />
            <span className="text-red-300 font-bold text-sm tracking-wider">
              THE $70 TRILLION PROBLEM
            </span>
          </motion.div>

          <motion.h2
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.3 }}
            viewport={{ once: true }}
            className="text-4xl md:text-6xl lg:text-7xl font-bold text-slate-900 mb-6 leading-tight"
          >
            The{' '}
            <span className="bg-gradient-to-r from-red-500 via-amber-500 to-orange-500 bg-clip-text text-transparent">
              Wealth Gap
            </span>
            <br />
            <span className="text-slate-700 text-3xl md:text-4xl lg:text-5xl">
              That's Been Engineered
            </span>
          </motion.h2>

          <motion.p
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.4 }}
            viewport={{ once: true }}
            className="text-xl md:text-2xl text-slate-600 max-w-4xl mx-auto leading-relaxed"
          >
            For decades, the most lucrative investment opportunities were systematically reserved for institutions 
            and ultra-wealthy individuals. <span className="text-red-500 font-semibold">We're dismantling these barriers.</span>
          </motion.p>
        </motion.div>

        {/* Enhanced Problem Grid */}
        <div className="grid grid-cols-1 xl:grid-cols-2 gap-12 items-start mb-20">
          {/* Left Side - The Barriers with Enhanced Visuals */}
          <motion.div
            initial={{ opacity: 0, x: -50 }}
            whileInView={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="space-y-6"
          >
            {barriers.map((barrier, index) => (
              <motion.div
                key={barrier.id}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                whileHover={{ y: -5, scale: 1.02 }}
                transition={{ 
                  duration: 0.6, 
                  delay: index * 0.15,
                  type: "spring",
                  stiffness: 100
                }}
                viewport={{ once: true }}
                className="relative group cursor-pointer"
                onMouseEnter={() => setHoveredBarrier(barrier.id)}
                onMouseLeave={() => setHoveredBarrier(null)}
              >
                {/* Glow Effect */}
                <div className={`absolute inset-0 bg-gradient-to-br ${barrier.gradient} rounded-3xl blur-xl opacity-0 group-hover:opacity-20 transition-opacity duration-500`} />
                
                {/* Main Card */}
                <div className="relative bg-white/80 backdrop-blur-sm rounded-3xl border border-slate-200 group-hover:border-red-300/50 p-8 transition-all duration-500 overflow-hidden shadow-lg hover:shadow-xl">
                  
                  {/* Shine Overlay */}
                  <motion.div
                    animate={{ x: hoveredBarrier === barrier.id ? '100%' : '-100%' }}
                    transition={{ duration: 0.8 }}
                    className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent transform -skew-x-12"
                  />

                  <div className="flex items-start space-x-6">
                    {/* Icon Container */}
                    <div className={`relative w-16 h-16 bg-gradient-to-br ${barrier.gradient} rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300 shadow-lg`}>
                      <barrier.icon className="w-8 h-8 text-white" />
                      <div className="absolute -top-2 -right-2 w-6 h-6 bg-white rounded-full border-2 border-slate-900 flex items-center justify-center">
                        <span className="text-xs font-bold text-slate-900">{barrier.id}</span>
                      </div>
                    </div>

                    {/* Content */}
                    <div className="flex-1 min-w-0">
                      <h3 className="text-2xl font-bold text-slate-900 mb-3 group-hover:text-red-600 transition-colors">
                        {barrier.title}
                      </h3>
                      <p className="text-slate-600 leading-relaxed mb-4">
                        {barrier.description}
                      </p>
                      
                      {/* Stats Row */}
                      <div className="flex items-center justify-between">
                        <div className={`px-4 py-2 bg-${barrier.color}-100 rounded-full border border-${barrier.color}-200`}>
                          <span className={`text-${barrier.color}-700 font-semibold text-sm`}>
                            {barrier.stat}
                          </span>
                        </div>
                        <div className="text-right">
                          <div className="text-lg font-bold text-red-600">{barrier.impact}</div>
                          <div className="text-xs text-slate-500">Impact</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </motion.div>
            ))}
          </motion.div>

          {/* Right Side - Enhanced Wealth Comparison */}
          <motion.div
            initial={{ opacity: 0, x: 50 }}
            whileInView={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="space-y-8"
          >
            {/* Comparison Toggle */}
            <div className="flex bg-slate-200 rounded-2xl p-2 max-w-md mx-auto">
              {[
                { id: 'wealthy', label: 'The 1%', icon: Crown },
                { id: 'individual', label: 'The 99%', icon: Users }
              ].map((option) => {
                const OptionIcon = option.icon;
                return (
                  <button
                    key={option.id}
                    onClick={() => setActiveComparison(option.id as any)}
                    className={`flex-1 flex items-center justify-center space-x-2 py-3 px-6 rounded-xl font-semibold transition-all duration-300 ${
                      activeComparison === option.id
                        ? 'bg-white text-slate-900 shadow-lg'
                        : 'text-slate-600 hover:text-slate-900'
                    }`}
                  >
                    <OptionIcon className="w-4 h-4" />
                    <span>{option.label}</span>
                  </button>
                );
              })}
            </div>

            {/* Comparison Cards */}
            <AnimatePresence mode="wait">
              <motion.div
                key={activeComparison}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.5 }}
                className="space-y-6"
              >
                {/* The 1% - Premium Card */}
                {activeComparison === 'wealthy' && (
                  <div className="bg-gradient-to-br from-amber-500 via-orange-500 to-red-500 rounded-3xl p-8 text-white shadow-2xl">
                    {/* Header */}
                    <div className="text-center mb-8">
                      <div className="w-24 h-24 bg-white/20 rounded-full flex items-center justify-center mx-auto mb-4 border-2 border-white/30">
                        <Crown className="w-10 h-10 text-white" />
                      </div>
                      <h3 className="text-3xl font-bold mb-2">The 1%</h3>
                      <p className="text-amber-100 text-lg">Institutional & Ultra-Wealthy</p>
                      <div className="mt-2 text-amber-200 text-sm">
                        Exclusive Access • Premium Returns
                      </div>
                    </div>

                    {/* Assets List */}
                    <div className="space-y-4">
                      {wealthyAssets.map((asset, index) => (
                        <motion.div
                          key={asset.name}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ duration: 0.5, delay: index * 0.1 }}
                          className="flex items-center justify-between py-4 px-4 bg-white/10 rounded-2xl border border-white/20 backdrop-blur-sm"
                        >
                          <div className="flex items-center space-x-3">
                            <Gem className="w-5 h-5 text-amber-300" />
                            <span className="font-semibold">{asset.name}</span>
                          </div>
                          <div className="flex items-center space-x-3">
                            <span className="text-emerald-300 font-bold text-lg">{asset.return}</span>
                            <div className="w-8 h-8 bg-emerald-500/20 rounded-full flex items-center justify-center">
                              <Check className="w-4 h-4 text-emerald-300" />
                            </div>
                          </div>
                        </motion.div>
                      ))}
                    </div>

                    {/* Performance Indicator */}
                    <div className="mt-6 pt-6 border-t border-amber-400/30 text-center">
                      <div className="text-amber-200 text-sm">Average Portfolio Performance</div>
                      <div className="text-2xl font-bold text-white">18.5% ROI</div>
                    </div>
                  </div>
                )}

                {/* The 99% - Standard Card */}
                {activeComparison === 'individual' && (
                  <div className="bg-gradient-to-br from-slate-400 via-slate-500 to-slate-600 rounded-3xl p-8 text-white shadow-2xl">
                    {/* Header */}
                    <div className="text-center mb-8">
                      <div className="w-24 h-24 bg-white/10 rounded-full flex items-center justify-center mx-auto mb-4 border-2 border-white/20">
                        <Users className="w-10 h-10 text-white" />
                      </div>
                      <h3 className="text-3xl font-bold mb-2">The 99%</h3>
                      <p className="text-slate-200 text-lg">Individual Investors</p>
                      <div className="mt-2 text-slate-300 text-sm">
                        Limited Options • Average Returns
                      </div>
                    </div>

                    {/* Assets List */}
                    <div className="space-y-4">
                      {individualAssets.map((asset, index) => (
                        <motion.div
                          key={asset.name}
                          initial={{ opacity: 0, x: -20 }}
                          animate={{ opacity: 1, x: 0 }}
                          transition={{ duration: 0.5, delay: index * 0.1 }}
                          className="flex items-center justify-between py-4 px-4 bg-white/5 rounded-2xl border border-white/10 backdrop-blur-sm"
                        >
                          <div className="flex items-center space-x-3">
                            <Coins className="w-5 h-5 text-slate-300" />
                            <span className="font-semibold">{asset.name}</span>
                          </div>
                          <div className="flex items-center space-x-3">
                            <span className="text-slate-300 font-bold text-lg">{asset.return}</span>
                            <div className="w-8 h-8 bg-red-500/20 rounded-full flex items-center justify-center">
                              <X className="w-4 h-4 text-red-300" />
                            </div>
                          </div>
                        </motion.div>
                      ))}
                    </div>

                    {/* Performance Indicator */}
                    <div className="mt-6 pt-6 border-t border-slate-400/30 text-center">
                      <div className="text-slate-300 text-sm">Average Portfolio Performance</div>
                      <div className="text-2xl font-bold text-white">4.2% ROI</div>
                    </div>
                  </div>
                )}
              </motion.div>
            </AnimatePresence>

            {/* Gap Visualization */}
            <motion.div
              initial={{ opacity: 0 }}
              whileInView={{ opacity: 1 }}
              transition={{ duration: 0.8, delay: 0.6 }}
              viewport={{ once: true }}
              className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 border border-slate-200 shadow-lg"
            >
              <div className="text-center mb-4">
                <div className="text-slate-900 font-bold text-lg mb-2">The Performance Gap</div>
                <div className="text-3xl font-bold text-red-600">14.3%</div>
                <div className="text-slate-600 text-sm">Difference in Average Returns</div>
              </div>
              
              {/* Visual Gap Bar */}
              <div className="h-4 bg-slate-200 rounded-full overflow-hidden">
                <div className="h-full bg-gradient-to-r from-emerald-500 via-amber-500 to-red-500 relative">
                  <motion.div
                    initial={{ scaleX: 0 }}
                    whileInView={{ scaleX: 1 }}
                    transition={{ duration: 1.5, ease: "easeOut" }}
                    className="h-full bg-gradient-to-r from-emerald-500 to-amber-500 origin-left"
                    style={{ width: '75%' }}
                  />
                </div>
              </div>
              
              <div className="flex justify-between text-xs text-slate-600 mt-2">
                <span>The 99%</span>
                <span>The 1%</span>
              </div>
            </motion.div>
          </motion.div>
        </div>

        {/* Enhanced Call to Action */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.4 }}
          viewport={{ once: true }}
          className="text-center"
        >
          <div className="bg-gradient-to-r from-red-500/10 to-amber-500/10 backdrop-blur-sm rounded-2xl border border-red-500/20 p-8 max-w-2xl mx-auto">
            <h3 className="text-2xl font-bold text-slate-900 mb-4">
              This Inequality Ends Now
            </h3>
            <p className="text-slate-600 mb-6 text-lg">
              The wealth gap exists because the system was designed this way. 
              <span className="text-red-500 font-semibold"> We're building the bridge to close it.</span>
            </p>
            <motion.button
              whileHover={{ scale: 1.05, y: -2 }}
              whileTap={{ scale: 0.95 }}
              className="bg-gradient-to-r from-red-500 to-amber-500 hover:from-red-600 hover:to-amber-600 text-white px-8 py-4 rounded-xl font-bold text-lg transition-all duration-300 flex items-center space-x-3 mx-auto shadow-lg hover:shadow-xl"
              onClick={() => {
                document.getElementById('solution')?.scrollIntoView({ behavior: 'smooth' });
              }}
            >
              <Sparkles className="w-5 h-5" />
              <span>Discover The Solution</span>
              <ArrowRight className="w-5 h-5" />
            </motion.button>
          </div>
        </motion.div>
      </div>
    </section>
  );
};

export default ProblemSection;
--- END: src/components/sections/ProblemSection.tsx ---

=== FILE: src/components/sections/SolutionSection.tsx ===

// src/components/sections/SolutionSection.tsx - ENHANCED
"use client";

import React from 'react';
import { motion } from 'framer-motion';
import { Shield, Zap, Users, BarChart3, Coins, Globe } from 'lucide-react';

const SolutionSection = () => {
  const features = [
    {
      icon: Coins,
      title: "Fractional Ownership",
      description: "Start with as little as $100. Own a piece of institutional-grade assets previously requiring $250,000+.",
      stat: "From $100"
    },
    {
      icon: Shield,
      title: "Blockchain Security",
      description: "Every investment is tokenized and secured on blockchain with transparent ownership records.",
      stat: "100% Secure"
    },
    {
      icon: Zap,
      title: "Instant Liquidity",
      description: "Trade your asset tokens on our secondary market. No more waiting years for returns.",
      stat: "24/7 Trading"
    },
    {
      icon: BarChart3,
      title: "Professional Management",
      description: "Our team of experts manages the assets while you enjoy passive returns.",
      stat: "12.8% Avg ROI"
    },
    {
      icon: Users,
      title: "Community Governance",
      description: "Vote on platform decisions and asset acquisitions through our DAO structure.",
      stat: "1 Token = 1 Vote"
    },
    {
      icon: Globe,
      title: "Global Access",
      description: "Invest in assets worldwide from your phone. No geographic restrictions.",
      stat: "100+ Countries"
    }
  ];

  return (
    <section id="solution" className="py-20 bg-slate-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <h2 className="text-3xl md:text-4xl font-bold text-slate-900 mb-4">
            Democratizing <span className="text-emerald-600">Wealth Creation</span>
          </h2>
          <p className="text-lg text-slate-600 max-w-3xl mx-auto">
            We're breaking down the barriers that have kept 99% of investors from accessing 
            the world's best investment opportunities.
          </p>
        </motion.div>

        {/* Features Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {features.map((feature, index) => (
            <motion.div
              key={feature.title}
              initial={{ opacity: 0, y: 30 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: index * 0.1 }}
              className="bg-white rounded-2xl p-6 border border-slate-200 hover:border-emerald-300 transition-all duration-300 hover:shadow-lg group"
            >
              <div className="flex items-start justify-between mb-4">
                <div className="w-12 h-12 bg-emerald-100 rounded-xl flex items-center justify-center group-hover:bg-emerald-200 transition-colors">
                  <feature.icon className="w-6 h-6 text-emerald-600" />
                </div>
                <div className="text-right">
                  <div className="text-2xl font-bold text-slate-900">{feature.stat}</div>
                </div>
              </div>
              
              <h3 className="text-xl font-semibold text-slate-900 mb-3">
                {feature.title}
              </h3>
              <p className="text-slate-600 leading-relaxed">
                {feature.description}
              </p>
            </motion.div>
          ))}
        </div>

        {/* Bottom CTA */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, delay: 0.6 }}
          className="text-center mt-16"
        >
          <div className="bg-white rounded-2xl p-8 border border-slate-200 max-w-4xl mx-auto">
            <h3 className="text-2xl font-bold text-slate-900 mb-4">
              Ready to Start Your Investment Journey?
            </h3>
            <p className="text-slate-600 mb-6 max-w-2xl mx-auto">
              Join thousands of investors who are already building wealth through real-world assets.
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <button className="bg-emerald-600 hover:bg-emerald-700 text-white px-8 py-3 rounded-xl font-semibold transition-all duration-300">
                Browse Investment Opportunities
              </button>
              <button className="border-2 border-slate-300 text-slate-700 hover:border-emerald-400 hover:text-emerald-700 px-8 py-3 rounded-xl font-semibold transition-all duration-300">
                Learn More
              </button>
            </div>
          </div>
        </motion.div>
      </div>
    </section>
  );
};

export default SolutionSection;
--- END: src/components/sections/SolutionSection.tsx ---

=== FILE: src/components/sections/TestimonialsSection.tsx ===

"use client";

import React, { useState } from "react";
import { Quote, Star, ChevronLeft, ChevronRight, BadgeCheck } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

// ==================== TESTIMONIAL DATA ====================
const testimonialData = [
  {
    id: 1,
    name: "Sarah Chen",
    role: "Real Estate Investor",
    company: "Global Properties Ltd",
    content:
      "The detailed analytics and transparent reporting gave me confidence to invest $2.5M across three Dubai properties. My portfolio has delivered consistent 34% returns.",
    rating: 5,
    avatar: "/avatars/sarah-chen.jpg",
    investment: "$2.5M",
    returns: "34% avg ROI",
  },
  {
    id: 2,
    name: "Marcus Rodriguez",
    role: "Portfolio Manager",
    company: "WealthBuild Capital",
    content:
      "The 3D property tours and comprehensive due diligence materials helped our firm allocate $15M to ASRD platforms. Exceptional investor experience.",
    rating: 5,
    avatar: "/avatars/marcus-rodriguez.jpg",
    investment: "$15M",
    returns: "31% avg ROI",
  },
  {
    id: 3,
    name: "Emily Watson",
    role: "Family Office Director",
    company: "Watson Family Office",
    content:
      "Finally, a platform that combines traditional asset security with modern technology. Our thoroughbred investments have outperformed all expectations.",
    rating: 5,
    avatar: "/avatars/emily-watson.jpg",
    investment: "$8.2M",
    returns: "42% avg ROI",
  },
];

// ==================== COMPONENT ====================
export default function TestimonialsSection() {
  const [currentTestimonial, setCurrentTestimonial] = useState(0);

  const nextTestimonial = () => {
    setCurrentTestimonial((prev) => (prev + 1) % testimonialData.length);
  };

  const prevTestimonial = () => {
    setCurrentTestimonial((prev) => (prev - 1 + testimonialData.length) % testimonialData.length);
  };

  const current = testimonialData[currentTestimonial];

  return (
    <section className="py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
          className="text-center mb-16"
        >
          <h2 className="text-4xl md:text-5xl font-bold text-white mb-6">
            Trusted by <span className="text-cyan-400">Elite Investors</span>
          </h2>
          <p className="text-xl text-slate-300 max-w-3xl mx-auto">
            Hear from our community of sophisticated investors who have achieved exceptional returns
          </p>
        </motion.div>

        {/* Testimonial Carousel */}
        <div className="relative">
          <AnimatePresence mode="wait">
            <motion.div
              key={currentTestimonial}
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -50 }}
              transition={{ duration: 0.5 }}
              className="bg-slate-800/50 backdrop-blur-sm rounded-3xl border border-slate-700 p-8 md:p-12"
            >
              {/* Quote Icon */}
              <div className="text-cyan-400 mb-6">
                <Quote className="w-12 h-12" />
              </div>

              {/* Testimonial Content */}
              <p className="text-xl text-slate-300 mb-8 leading-relaxed">"{current.content}"</p>

              {/* Investor Info */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-4">
                  {/* Avatar */}
                  <div className="w-16 h-16 rounded-full overflow-hidden border-2 border-cyan-400">
                    <img src={current.avatar} alt={current.name} className="w-full h-full object-cover" />
                  </div>
                  <div>
                    <div className="flex items-center gap-2 mb-1">
                      <h4 className="text-white font-semibold text-lg">{current.name}</h4>
                      <BadgeCheck className="w-5 h-5 text-cyan-400" />
                    </div>
                    <p className="text-slate-400">{current.role}</p>
                    <p className="text-slate-500 text-sm">{current.company}</p>
                  </div>
                </div>

                {/* Investment Stats */}
                <div className="text-right">
                  <div className="flex items-center gap-4 mb-2">
                    <div className="text-cyan-400 font-semibold">{current.investment}</div>
                    <div className="text-emerald-400 font-semibold">{current.returns}</div>
                  </div>
                  <div className="flex items-center gap-1">
                    {[...Array(5)].map((_, i) => (
                      <Star
                        key={i}
                        className={`w-4 h-4 ${i < current.rating ? "text-amber-400 fill-amber-400" : "text-slate-600"}`}
                      />
                    ))}
                  </div>
                </div>
              </div>
            </motion.div>
          </AnimatePresence>

          {/* Navigation */}
          <div className="flex items-center justify-center gap-4 mt-8">
            <button
              onClick={prevTestimonial}
              className="p-3 rounded-full bg-slate-800/50 border border-slate-700 text-slate-400 hover:text-white hover:border-cyan-500 transition-all duration-300"
            >
              <ChevronLeft className="w-5 h-5" />
            </button>

            {/* Dots Indicator */}
            <div className="flex gap-2">
              {testimonialData.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentTestimonial(index)}
                  className={`w-3 h-3 rounded-full transition-all duration-300 ${
                    index === currentTestimonial ? "bg-cyan-400" : "bg-slate-600 hover:bg-slate-500"
                  }`}
                />
              ))}
            </div>

            <button
              onClick={nextTestimonial}
              className="p-3 rounded-full bg-slate-800/50 border border-slate-700 text-slate-400 hover:text-white hover:border-cyan-500 transition-all duration-300"
            >
              <ChevronRight className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>
    </section>
  );
}

--- END: src/components/sections/TestimonialsSection.tsx ---

=== FILE: src/components/ui/AssetDetailsModal.tsx ===

// src/components/ui/AssetDetailsModal.tsx - PREMIUM ENHANCED VERSION
"use client";

import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, MapPin, Calendar, TrendingUp, Users, Shield, Star, 
  Building, Zap, Cpu, Eye, ArrowRight, DollarSign, Heart,
  Share2, Download, Play, Pause, Maximize2, ChevronLeft, ChevronRight,
  Target, Award, Clock, BarChart3, Crown, Sparkles, Rocket
} from 'lucide-react';
import { useUniversal } from '@/lib/universal';
import { Asset } from '@/types';
import RealAssetImage from '@/components/ui/RealAssetImage';
import { useAuth } from '@/contexts/AuthContext';
import { useNotification } from '@/contexts/NotificationContext';

interface AssetDetailsModalProps {
  isOpen: boolean;
  onClose: () => void;
  asset: Asset | null;
  onInvest?: (asset: Asset) => void;
}

const AssetDetailsModal: React.FC<AssetDetailsModalProps> = ({
  isOpen,
  onClose,
  asset,
  onInvest
}) => {
  const { deviceInfo, universalAttributes } = useUniversal();
  const { user, login } = useAuth();
  const { showNotification, showSuccess } = useNotification();
  
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isLiked, setIsLiked] = useState(false);
  const [activeTab, setActiveTab] = useState<'overview' | 'financials' | 'gallery' | 'documents'>('overview');

  if (!asset) return null;

  // Enhanced features with premium icons
  const features = [
    { icon: MapPin, label: 'Prime Location', value: `${asset.location.city}, ${asset.location.country}`, color: 'text-blue-400' },
    { icon: Calendar, label: 'Investment Term', value: `${asset.term} months`, color: 'text-purple-400' },
    { icon: TrendingUp, label: 'Projected ROI', value: `${asset.projectedROI}%`, color: 'text-emerald-400' },
    { icon: Users, label: 'Active Investors', value: asset.investorCount.toLocaleString(), color: 'text-cyan-400' },
    { icon: Shield, label: 'Risk Level', value: asset.riskLevel, color: 'text-amber-400' },
    { icon: Star, label: 'Platform Rating', value: asset.rating.toString(), color: 'text-yellow-400' },
    { icon: Target, label: 'Minimum Investment', value: `$${asset.minimumInvestment.toLocaleString()}`, color: 'text-green-400' },
    { icon: Award, label: 'Success Rate', value: '98%', color: 'text-pink-400' },
  ];

  // Enhanced financial details
  const financialDetails = asset.financials ? [
    { label: 'Current Valuation', value: `$${(asset.financials.currentValuation / 1000000).toFixed(1)}M`, change: '+12.5%' },
    { label: 'Total Invested', value: `$${(asset.financials.totalInvested / 1000000).toFixed(1)}M`, change: '+8.2%' },
    { label: 'Total Returns', value: `$${(asset.financials.totalReturns / 1000000).toFixed(1)}M`, change: '+15.3%' },
    { label: 'Annualized Return', value: `${asset.financials.annualizedReturn}%`, change: '+2.1%' },
    { label: 'Current ROI', value: `${asset.financials.currentROI}%`, change: '+3.4%' },
    { label: 'Volatility', value: `${asset.financials.volatility}%`, change: '-1.2%' },
  ] : [
    { label: 'Total Funding', value: `$${(asset.totalFunding / 1000000).toFixed(1)}M`, change: '+5.8%' },
    { label: 'Funded Amount', value: `$${(asset.fundedAmount / 1000000).toFixed(1)}M`, change: '+12.3%' },
    { label: 'Funding Progress', value: `${asset.fundingProgress}%`, change: '+3.1%' },
    { label: 'Projected ROI', value: `${asset.projectedROI}%`, change: '+1.5%' },
  ];

  // Enhanced 3D Experience Features
  const threeDFeatures = asset._3dConfig ? [
    { icon: Zap, label: '3D Particles', value: `${asset._3dConfig.particles.toLocaleString()} particles`, color: 'text-purple-400' },
    { icon: Cpu, label: 'Animations', value: asset._3dConfig.animations, color: 'text-cyan-400' },
    { icon: Eye, label: 'Shadow Quality', value: asset._3dConfig.shadows ? 'Ultra' : 'Standard', color: 'text-orange-400' },
    { icon: Rocket, label: 'Performance', value: 'Optimized', color: 'text-green-400' },
  ] : [];

  // Image gallery navigation
  const nextImage = () => {
    setCurrentImageIndex((prev) => (prev + 1) % (asset.images?.length || 1));
  };

  const prevImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + (asset.images?.length || 1)) % (asset.images?.length || 1));
  };

  const handleInvestClick = () => {
    if (!user) {
      login('/marketplace');
      showNotification({
        title: 'Connect Your Wallet',
        message: 'Please connect your wallet to explore investment opportunities',
        type: 'warning',
        duration: 4000
      });
      return;
    }
    if (onInvest) {
      onInvest(asset);
      onClose();
    }
  };

  const handleLike = () => {
    setIsLiked(!isLiked);
    showSuccess(
      isLiked ? 'Removed from Favorites' : 'Added to Favorites',
      isLiked 
        ? 'Asset removed from your favorites list'
        : 'Asset added to your favorites for quick access',
      {
        label: 'View Favorites',
        onClick: () => window.location.href = '/dashboard'
      }
    );
  };

  const handleShare = () => {
    showSuccess(
      'Share Asset',
      'Investment opportunity link copied to clipboard',
      {
        label: 'Share Now',
        onClick: () => navigator.clipboard.writeText(window.location.href)
      }
    );
  };

  const getRiskColor = (riskLevel: string) => {
    switch (riskLevel.toLowerCase()) {
      case 'low': return 'text-emerald-400 bg-emerald-400/10 border-emerald-400/20 shadow-emerald-500/10';
      case 'medium': return 'text-amber-400 bg-amber-400/10 border-amber-400/20 shadow-amber-500/10';
      case 'high': return 'text-rose-400 bg-rose-400/10 border-rose-400/20 shadow-rose-500/10';
      default: return 'text-slate-400 bg-slate-400/10 border-slate-400/20';
    }
  };

  const getROIColor = (roi: number) => {
    if (roi >= 40) return 'from-amber-500 to-orange-500';
    if (roi >= 30) return 'from-emerald-500 to-green-500';
    if (roi >= 20) return 'from-cyan-500 to-blue-500';
    return 'from-slate-500 to-slate-600';
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/90 backdrop-blur-xl z-50 flex items-center justify-center p-4 overflow-y-auto"
          onClick={onClose}
        >
          {/* Premium Background Effects */}
          <div className="absolute inset-0 pointer-events-none">
            <div className="absolute top-1/4 left-1/4 w-4 h-4 bg-cyan-400 rounded-full opacity-20 animate-pulse blur-sm" />
            <div className="absolute top-1/3 right-1/4 w-3 h-3 bg-blue-400 rounded-full opacity-30 animate-bounce blur-sm" />
            <div className="absolute bottom-1/4 left-1/3 w-3 h-3 bg-purple-400 rounded-full opacity-40 animate-ping blur-sm" />
          </div>

          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            className="bg-gradient-to-br from-slate-800 via-slate-800 to-slate-900 rounded-3xl border-2 border-slate-700/50 w-full max-w-6xl max-h-[95vh] overflow-hidden shadow-2xl backdrop-blur-sm"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Premium Header */}
            <div className="relative p-8 border-b border-slate-700/50 bg-gradient-to-r from-slate-800/50 to-slate-900/50">
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-6 flex-1">
                  {/* Asset Icon */}
                  <div className="relative">
                    <div className="w-16 h-16 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
                      <Building className="w-8 h-8 text-white" />
                    </div>
                    <div className="absolute -inset-1 bg-cyan-500 rounded-2xl blur opacity-30"></div>
                  </div>
                  
                  {/* Asset Info */}
                  <div className="flex-1">
                    <div className="flex items-center gap-4 mb-2">
                      <h2 className="text-3xl font-bold text-white">{asset.name}</h2>
                      <div className="flex items-center gap-2">
                        <span className={`px-3 py-1.5 rounded-full text-sm font-bold backdrop-blur-md border shadow-lg ${getRiskColor(asset.riskLevel)}`}>
                          {asset.riskLevel} Risk
                        </span>
                        <span className="px-3 py-1.5 rounded-full text-sm font-bold bg-cyan-500/20 text-cyan-300 border border-cyan-500/30 shadow-cyan-500/10">
                          {asset.type.replace('-', ' ').toUpperCase()}
                        </span>
                      </div>
                    </div>
                    <p className="text-xl text-slate-300 mb-3">{asset.title}</p>
                    <div className="flex items-center gap-4 text-slate-400">
                      <div className="flex items-center gap-2">
                        <MapPin className="w-4 h-4" />
                        <span>{asset.location.city}, {asset.location.country}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Star className="w-4 h-4 text-amber-400" />
                        <span>{asset.rating} Rating</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Users className="w-4 h-4" />
                        <span>{asset.investorCount.toLocaleString()} investors</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex items-center gap-3">
                  <motion.button
                    onClick={handleLike}
                    className="p-3 bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700/50 hover:border-rose-500/50 transition-all duration-300 group"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Heart 
                      className={`w-5 h-5 transition-all duration-300 ${
                        isLiked 
                          ? 'fill-rose-500 text-rose-500 scale-110' 
                          : 'text-slate-400 group-hover:text-rose-400'
                      }`}
                    />
                  </motion.button>
                  
                  <motion.button
                    onClick={handleShare}
                    className="p-3 bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700/50 hover:border-cyan-500/50 transition-all duration-300 group"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Share2 className="w-5 h-5 text-slate-400 group-hover:text-cyan-400" />
                  </motion.button>
                  
                  <motion.button
                    onClick={onClose}
                    className="p-3 bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700/50 hover:border-slate-500 transition-all duration-300 group"
                    whileHover={{ scale: 1.05, rotate: 90 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <X className="w-5 h-5 text-slate-400 group-hover:text-white" />
                  </motion.button>
                </div>
              </div>

              {/* Navigation Tabs */}
              <div className="flex space-x-1 mt-6">
                {[
                  { id: 'overview', label: 'Overview', icon: Eye },
                  { id: 'financials', label: 'Financials', icon: BarChart3 },
                  { id: 'gallery', label: 'Gallery', icon: Maximize2 },
                  { id: 'documents', label: 'Documents', icon: Download }
                ].map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id as any)}
                    className={`flex items-center gap-2 px-4 py-2 rounded-xl font-semibold transition-all duration-300 ${
                      activeTab === tab.id
                        ? 'bg-cyan-500 text-white shadow-lg shadow-cyan-500/25'
                        : 'text-slate-400 hover:text-cyan-400 hover:bg-slate-700/50'
                    }`}
                  >
                    <tab.icon className="w-4 h-4" />
                    {tab.label}
                  </button>
                ))}
              </div>
            </div>

            {/* Content Area */}
            <div className="overflow-y-auto max-h-[calc(95vh-180px)]">
              {activeTab === 'overview' && (
                <div className="p-8 space-y-8">
                  {/* Hero Image Gallery */}
                  <div className="relative rounded-2xl overflow-hidden bg-slate-800/30 border border-slate-700/50">
                    <RealAssetImage
                      asset={asset}
                      size="hero"
                      className="w-full h-80 object-cover"
                    />
                    
                    {/* Gallery Controls */}
                    {asset.images && asset.images.length > 1 && (
                      <>
                        <button
                          onClick={prevImage}
                          className="absolute left-4 top-1/2 transform -translate-y-1/2 p-3 bg-slate-900/80 backdrop-blur-sm rounded-xl border border-slate-700/50 hover:border-cyan-500/50 transition-all duration-300"
                        >
                          <ChevronLeft className="w-5 h-5 text-white" />
                        </button>
                        <button
                          onClick={nextImage}
                          className="absolute right-4 top-1/2 transform -translate-y-1/2 p-3 bg-slate-900/80 backdrop-blur-sm rounded-xl border border-slate-700/50 hover:border-cyan-500/50 transition-all duration-300"
                        >
                          <ChevronRight className="w-5 h-5 text-white" />
                        </button>
                        
                        {/* Image Counter */}
                        <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 px-3 py-1 bg-slate-900/80 backdrop-blur-sm rounded-full border border-slate-700/50 text-white text-sm">
                          {currentImageIndex + 1} / {asset.images.length}
                        </div>
                      </>
                    )}

                    {/* Play/Pause for Virtual Tour */}
                    {asset.virtualTour && (
                      <button
                        onClick={() => setIsPlaying(!isPlaying)}
                        className="absolute top-4 right-4 p-3 bg-slate-900/80 backdrop-blur-sm rounded-xl border border-slate-700/50 hover:border-cyan-500/50 transition-all duration-300"
                      >
                        {isPlaying ? (
                          <Pause className="w-5 h-5 text-white" />
                        ) : (
                          <Play className="w-5 h-5 text-white" />
                        )}
                      </button>
                    )}
                  </div>

                  {/* Description */}
                  <div className="bg-slate-800/30 rounded-2xl p-6 border border-slate-700/50">
                    <h3 className="text-2xl font-bold text-white mb-4 flex items-center gap-3">
                      <Crown className="w-6 h-6 text-amber-400" />
                      Premium Asset Overview
                    </h3>
                    <p className="text-slate-300 leading-relaxed text-lg">{asset.description}</p>
                  </div>

                  {/* Key Features Grid */}
                  <div>
                    <h3 className="text-2xl font-bold text-white mb-6 flex items-center gap-3">
                      <Sparkles className="w-6 h-6 text-cyan-400" />
                      Key Investment Features
                    </h3>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      {features.map((feature, index) => (
                        <motion.div
                          key={feature.label}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: index * 0.1 }}
                          className="bg-slate-800/30 rounded-2xl p-4 border border-slate-700/50 hover:border-cyan-500/30 transition-all duration-300 group cursor-pointer"
                        >
                          <feature.icon className={`w-8 h-8 mx-auto mb-3 ${feature.color} group-hover:scale-110 transition-transform`} />
                          <div className="text-sm text-slate-400 mb-1 text-center">{feature.label}</div>
                          <div className="text-white font-bold text-lg text-center group-hover:text-cyan-400 transition-colors">
                            {feature.value}
                          </div>
                        </motion.div>
                      ))}
                    </div>
                  </div>

                  {/* Asset Features */}
                  {asset.features && asset.features.length > 0 && (
                    <div className="bg-slate-800/30 rounded-2xl p-6 border border-slate-700/50">
                      <h3 className="text-2xl font-bold text-white mb-4">Premium Features</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {asset.features.map((feature, index) => (
                          <motion.div
                            key={index}
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: index * 0.05 }}
                            className="flex items-center gap-3 p-3 rounded-xl bg-slate-700/30 hover:bg-slate-700/50 transition-all duration-300 group"
                          >
                            <div className="w-2 h-2 bg-cyan-400 rounded-full group-hover:scale-150 transition-transform" />
                            <span className="text-slate-300 group-hover:text-white transition-colors">{feature}</span>
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* 3D Experience */}
                  {threeDFeatures.length > 0 && (
                    <div className="bg-gradient-to-r from-purple-500/10 to-cyan-500/10 rounded-2xl p-6 border border-purple-500/20">
                      <h3 className="text-2xl font-bold text-white mb-4 flex items-center gap-3">
                        <Zap className="w-6 h-6 text-purple-400" />
                        Immersive 3D Experience
                      </h3>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        {threeDFeatures.map((feature, index) => (
                          <div key={feature.label} className="text-center p-3">
                            <feature.icon className={`w-6 h-6 mx-auto mb-2 ${feature.color}`} />
                            <div className="text-xs text-slate-400 mb-1">{feature.label}</div>
                            <div className="text-white font-semibold text-sm">{feature.value}</div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              )}

              {activeTab === 'financials' && (
                <div className="p-8 space-y-6">
                  <h3 className="text-2xl font-bold text-white mb-6">Financial Performance</h3>
                  
                  {/* Financial Metrics Grid */}
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    {financialDetails.map((detail, index) => (
                      <motion.div
                        key={detail.label}
                        initial={{ opacity: 0, scale: 0.9 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ delay: index * 0.1 }}
                        className="bg-slate-800/30 rounded-2xl p-4 border border-slate-700/50 hover:border-cyan-500/30 transition-all duration-300"
                      >
                        <div className="text-sm text-slate-400 mb-1">{detail.label}</div>
                        <div className="text-white font-bold text-lg mb-1">{detail.value}</div>
                        <div className="text-emerald-400 text-sm font-semibold">{detail.change}</div>
                      </motion.div>
                    ))}
                  </div>

                  {/* Progress Bars */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="bg-slate-800/30 rounded-2xl p-6 border border-slate-700/50">
                      <div className="flex justify-between text-slate-400 mb-3">
                        <span>Funding Progress</span>
                        <span className="text-cyan-400 font-semibold">{asset.fundingProgress}%</span>
                      </div>
                      <div className="w-full bg-slate-700 rounded-full h-3">
                        <motion.div 
                          className="bg-gradient-to-r from-cyan-500 to-blue-500 h-3 rounded-full relative overflow-hidden"
                          initial={{ width: 0 }}
                          animate={{ width: `${asset.fundingProgress}%` }}
                          transition={{ duration: 1.5, ease: "easeOut" }}
                        >
                          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent -skew-x-12 animate-shimmer" />
                        </motion.div>
                      </div>
                    </div>

                    <div className="bg-slate-800/30 rounded-2xl p-6 border border-slate-700/50">
                      <div className="flex justify-between text-slate-400 mb-3">
                        <span>ROI Performance</span>
                        <span className="text-emerald-400 font-semibold">{asset.projectedROI}%</span>
                      </div>
                      <div className="w-full bg-slate-700 rounded-full h-3">
                        <div 
                          className={`bg-gradient-to-r ${getROIColor(asset.projectedROI)} h-3 rounded-full`}
                          style={{ width: `${Math.min(asset.projectedROI, 100)}%` }}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {activeTab === 'gallery' && (
                <div className="p-8">
                  <h3 className="text-2xl font-bold text-white mb-6">Asset Gallery</h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {asset.images?.map((image, index) => (
                      <motion.div
                        key={index}
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ delay: index * 0.1 }}
                        className="relative aspect-square rounded-2xl overflow-hidden cursor-pointer group"
                        onClick={() => setCurrentImageIndex(index)}
                      >
                        <RealAssetImage
                          src={image}
                          alt={`${asset.name} - Image ${index + 1}`}
                          className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                        />
                        <div className="absolute inset-0 bg-black/0 group-hover:bg-black/30 transition-all duration-300" />
                      </motion.div>
                    ))}
                  </div>
                </div>
              )}

              {/* Investment CTA */}
              <div className="p-8 border-t border-slate-700/50 bg-gradient-to-r from-slate-800/50 to-slate-900/50">
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="bg-gradient-to-r from-cyan-500/10 via-blue-500/10 to-purple-500/10 rounded-2xl p-8 border-2 border-cyan-500/30 text-center relative overflow-hidden"
                >
                  {/* Background Pattern */}
                  <div className="absolute inset-0 opacity-5">
                    <div className="absolute top-4 left-4 w-8 h-8 border-2 border-cyan-400 rounded-lg" />
                    <div className="absolute bottom-4 right-4 w-6 h-6 border-2 border-blue-400 rounded-lg" />
                  </div>

                  <h3 className="text-3xl font-bold text-white mb-3">Ready to Invest in Premium Real Estate?</h3>
                  <p className="text-slate-300 text-lg mb-6 max-w-2xl mx-auto">
                    <span className="text-cyan-400 font-semibold"> {asset.projectedROI}% projected returns</span> with this exclusive opportunity.
                  </p>
                  
                  <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
                    <motion.button
                      onClick={handleInvestClick}
                      className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white font-bold py-4 px-8 rounded-2xl transition-all duration-300 flex items-center gap-3 group relative overflow-hidden"
                      whileHover={{ scale: 1.05, y: -2 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <DollarSign className="w-5 h-5" />
                      <span>Invest from ${asset.minimumInvestment.toLocaleString()}</span>
                      <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform" />
                      <div className="absolute inset-0 -skew-x-12 bg-gradient-to-r from-transparent via-white/10 to-transparent translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000" />
                    </motion.button>
                    
                    <motion.button
                      onClick={onClose}
                      className="bg-transparent border-2 border-slate-600 text-slate-300 hover:border-slate-500 hover:text-white py-4 px-6 rounded-2xl font-semibold transition-all duration-300"
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      Learn More First
                    </motion.button>
                  </div>

                  <div className="flex items-center justify-center gap-6 mt-6 text-sm text-slate-400">
                    <div className="flex items-center gap-2">
                      <Shield className="w-4 h-4 text-emerald-400" />
                      <span>Blockchain Verified</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Clock className="w-4 h-4 text-amber-400" />
                      <span>24/7 Support</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Award className="w-4 h-4 text-cyan-400" />
                      <span>98% Success Rate</span>
                    </div>
                  </div>
                </motion.div>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default AssetDetailsModal;
--- END: src/components/ui/AssetDetailsModal.tsx ---

=== FILE: src/components/ui/EnhancedAssetCard.tsx ===

'use client';

import React from 'react';
import { motion, useMotionValue, useTransform } from 'framer-motion';
import { Asset } from '@/types';
import { useUniversal } from '@/lib/universal';

interface Props {
  asset: Asset;
  onViewDetails: (asset: Asset) => void;
  onInvest: (asset: Asset) => void;
  onLike?: (assetId: string) => void;
  isLiked?: boolean;
  viewMode?: 'grid' | 'list';
  enhanced?: boolean;
}

export default function EnhancedAssetCard({
  asset,
  onViewDetails,
  onInvest,
  viewMode = 'grid',
  enhanced = false,
}: Props) {
  const { deviceInfo } = useUniversal();

  const x = useMotionValue(0);
  const y = useMotionValue(0);
  const rotateX = useTransform(y, [-50, 50], [10, -10]);
  const rotateY = useTransform(x, [-50, 50], [-10, 10]);

  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {
    if (deviceInfo.isMobile) return;
    const rect = e.currentTarget.getBoundingClientRect();
    const offsetX = e.clientX - rect.left - rect.width / 2;
    const offsetY = e.clientY - rect.top - rect.height / 2;
    x.set(offsetX);
    y.set(offsetY);
  };

  const handleMouseLeave = () => {
    x.set(0);
    y.set(0);
  };

  const fundingProgress =
    asset.fundedAmount && asset.totalFunding
      ? (asset.fundedAmount / asset.totalFunding) * 100
      : 0;

  const displayImage = asset.images?.[0] || asset.image || '/placeholder-asset.jpg';

  return (
    <motion.div
      className={`relative rounded-2xl overflow-hidden shadow-xl border border-white/20 bg-gradient-to-br from-white/5 to-white/10 backdrop-blur-md cursor-pointer ${
        viewMode === 'list' ? 'flex flex-row gap-4' : ''
      } ${enhanced ? 'ring-2 ring-amber-500 shadow-2xl' : ''}`}
      style={{ rotateX, rotateY }}
      onMouseMove={handleMouseMove}
      onMouseLeave={handleMouseLeave}
      whileHover={{ scale: enhanced && !deviceInfo.isMobile ? 1.08 : 1.05 }}
    >
      <div className={`${viewMode === 'list' ? 'w-1/3' : 'w-full'} relative`}>
        <img
          src={displayImage}
          alt={asset.name}
          className="w-full h-48 object-cover rounded-t-2xl md:rounded-2xl"
          loading="lazy"
        />
        <motion.div
          className="absolute inset-0 pointer-events-none bg-gradient-to-r from-white/20 via-white/0 to-white/20 opacity-0 rounded-2xl"
          whileHover={{ opacity: deviceInfo.isMobile ? 0 : 0.25 }}
          transition={{ duration: 0.5 }}
        />
      </div>

      <div className={`p-4 ${viewMode === 'list' ? 'w-2/3 flex flex-col justify-between' : ''}`}>
        <h3 className="text-lg font-bold text-white">{asset.name}</h3>
        <p className="text-sm text-gray-300">
          {asset.location?.city}, {asset.location?.country}
        </p>
        <p className="text-sm text-gray-400 mt-1">{asset.type}</p>

        <div className="mt-3">
          <div className="h-2 w-full bg-gray-700 rounded-full overflow-hidden">
            <motion.div
              className="h-2 bg-gradient-to-r from-green-400 to-blue-500 rounded-full"
              initial={{ width: 0 }}
              animate={{ width: `${fundingProgress}%` }}
              transition={{ duration: 1.2 }}
            />
          </div>
          <div className="text-xs text-gray-400 mt-1">
            ${asset.fundedAmount?.toLocaleString() || 0} raised of $
            {asset.totalFunding?.toLocaleString() || 0}
          </div>
        </div>

        <div className="flex justify-between items-center mt-4 gap-2">
          <div>
            <span className="text-green-400 font-bold text-lg">
              {asset.projectedROI || 'N/A'}%
            </span>
            <span className="text-gray-400 text-sm ml-1">EST. ROI</span>
          </div>

          <div className="flex gap-2 w-full max-w-[180px]">
            <button
              onClick={() => onViewDetails(asset)}
              className="flex-1 bg-gray-700 text-white py-1.5 rounded-lg text-xs font-medium hover:bg-gray-600 transition"
            >
              Details
            </button>
            <button
              onClick={() => onInvest(asset)}
              className="flex-1 bg-gradient-to-r from-blue-500 to-purple-600 text-white py-1.5 rounded-lg text-xs font-medium hover:from-blue-600 hover:to-purple-700 hover:shadow-lg transition"
            >
              Invest
            </button>
          </div>
        </div>

        <div className="flex flex-wrap gap-2 mt-3">
          {asset.tags?.slice(0, 3).map((tag, idx) => (
            <span key={idx} className="bg-gray-700 text-gray-200 px-2 py-1 rounded text-xs">
              {tag}
            </span>
          ))}
        </div>
      </div>
    </motion.div>
  );
}

--- END: src/components/ui/EnhancedAssetCard.tsx ---

=== FILE: src/components/ui/InvestmentModal.tsx ===

// src/components/ui/InvestmentModal.tsx - PREMIUM ENHANCED VERSION
"use client";

import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, DollarSign, Calendar, Shield, TrendingUp, CheckCircle, 
  AlertCircle, Hand, MousePointer, Zap, Lock, Globe, Target,
  BarChart3, Clock, Users, Crown, Sparkles, Rocket
} from 'lucide-react';
import { useUniversal } from '@/lib/universal';
import { Asset } from '@/types';

interface InvestmentModalProps {
  isOpen: boolean;
  onClose: () => void;
  asset: Asset | null;
  onInvest: (amount: number) => void;
  userBalance: number;
}

const InvestmentModal: React.FC<InvestmentModalProps> = ({
  isOpen,
  onClose,
  asset,
  onInvest,
  userBalance
}) => {
  const { deviceInfo, universalAttributes } = useUniversal();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [gestureActive, setGestureActive] = useState(false);
  const [investmentAmount, setInvestmentAmount] = useState(100);
  const [investmentDuration, setInvestmentDuration] = useState(36);
  const [agreement, setAgreement] = useState(false);
  const [amountError, setAmountError] = useState('');
  const [currentStep, setCurrentStep] = useState(1);
  const [showConfetti, setShowConfetti] = useState(false);
  const modalRef = useRef<HTMLDivElement>(null);

  // Enhanced gesture handling with touch/mouse support
  const handleGesture = (delta: number) => {
    if (!asset) return;
    
    const sensitivity = deviceInfo.input === 'touch' ? 2 : 1;
    const step = sensitivity * 100;
    const newAmount = Math.max(
      asset.minimumInvestment,
      Math.min(1000000, investmentAmount + delta * step)
    );
    handleAmountChange(newAmount);
    setGestureActive(true);
    setTimeout(() => setGestureActive(false), 200);
  };

  // Enhanced form submission with multi-step validation
  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!asset) return;

    // Multi-step validation
    if (currentStep === 1) {
      if (investmentAmount < asset.minimumInvestment) {
        setAmountError(`Minimum investment is $${asset.minimumInvestment.toLocaleString()}`);
        return;
      }

      if (investmentAmount > 1000000) {
        setAmountError('Maximum investment is $1,000,000');
        return;
      }

      if (investmentAmount > userBalance * 0.8) {
        setAmountError('Investment exceeds 80% of your balance. Consider a smaller amount.');
        return;
      }

      setCurrentStep(2);
      return;
    }

    if (currentStep === 2 && !agreement) {
      setAmountError('Please agree to the investment terms');
      return;
    }

    setAmountError('');
    setIsSubmitting(true);

    try {
      // Enhanced API simulation with progress steps
      await new Promise(resolve => setTimeout(resolve, 1500));
      setCurrentStep(3); // Success step
      setShowConfetti(true);
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      onInvest(investmentAmount);
      console.log(`Successfully invested $${investmentAmount} in ${asset.name}`);
      
      // Reset and close
      setTimeout(() => {
        setCurrentStep(1);
        setShowConfetti(false);
        onClose();
      }, 1000);
      
    } catch (err) {
      console.error('Investment failed:', err);
      setAmountError('Investment failed. Please try again.');
      setCurrentStep(1);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleAmountChange = (amount: number) => {
    setInvestmentAmount(amount);
    if (amountError) setAmountError('');
  };

  // Quick investment amounts
  const quickAmounts = [100, 500, 1000, 5000, 10000];

  // Enhanced investment metrics
  const getInvestmentMetrics = () => {
    if (!asset) return null;
    
    const projectedReturn = investmentAmount * (asset.projectedROI / 100);
    const monthlyReturn = projectedReturn / asset.term;
    const totalValue = investmentAmount + projectedReturn;
    
    return {
      projectedReturn,
      monthlyReturn,
      totalValue,
      annualizedROI: (asset.projectedROI / (asset.term / 12)).toFixed(1)
    };
  };

  const metrics = getInvestmentMetrics();

  if (!asset) return null;

  // Enhanced investment details with premium styling
  const investmentDetails = [
    {
      label: 'Minimum Investment',
      value: `$${asset.minimumInvestment.toLocaleString()}`,
      icon: DollarSign,
      color: 'text-blue-400',
      bg: 'from-blue-500/10 to-blue-600/10'
    },
    {
      label: 'Projected ROI',
      value: `${asset.projectedROI}%`,
      icon: TrendingUp,
      color: 'text-emerald-400',
      bg: 'from-emerald-500/10 to-emerald-600/10'
    },
    {
      label: 'Investment Term',
      value: `${asset.term} months`,
      icon: Calendar,
      color: 'text-purple-400',
      bg: 'from-purple-500/10 to-purple-600/10'
    },
    {
      label: 'Risk Level',
      value: asset.riskLevel,
      icon: Shield,
      color: asset.riskLevel === 'Low' ? 'text-emerald-400' :
             asset.riskLevel === 'Medium' ? 'text-amber-400' : 'text-rose-400',
      bg: asset.riskLevel === 'Low' ? 'from-emerald-500/10 to-emerald-600/10' :
          asset.riskLevel === 'Medium' ? 'from-amber-500/10 to-amber-600/10' : 'from-rose-500/10 to-rose-600/10'
    }
  ];

  // Performance-adaptive effects
  const showAdvancedEffects = deviceInfo.performance === 'high';

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/90 backdrop-blur-xl z-50 flex items-center justify-center p-4 overflow-y-auto"
          onClick={onClose}
        >
          {/* Premium Background Effects */}
          {showAdvancedEffects && (
            <>
              <div className="absolute inset-0 pointer-events-none">
                {/* Animated gradient orbs */}
                <div className="absolute top-1/4 left-1/4 w-4 h-4 bg-cyan-400 rounded-full opacity-60 animate-pulse blur-sm" />
                <div className="absolute top-1/3 right-1/4 w-3 h-3 bg-blue-400 rounded-full opacity-40 animate-bounce blur-sm" />
                <div className="absolute bottom-1/4 left-1/3 w-3 h-3 bg-purple-400 rounded-full opacity-50 animate-ping blur-sm" />
                <div className="absolute top-1/2 right-1/3 w-2 h-2 bg-emerald-400 rounded-full opacity-70 animate-pulse blur-sm" />
              </div>
              
              {/* Floating particles */}
              <div className="absolute inset-0 overflow-hidden pointer-events-none">
                {[...Array(8)].map((_, i) => (
                  <motion.div
                    key={i}
                    className="absolute w-1 h-1 bg-white rounded-full opacity-20"
                    initial={{ 
                      x: Math.random() * window.innerWidth,
                      y: Math.random() * window.innerHeight 
                    }}
                    animate={{
                      y: [0, -30, 0],
                      opacity: [0.2, 0.5, 0.2],
                    }}
                    transition={{
                      duration: 3 + Math.random() * 2,
                      repeat: Infinity,
                      delay: i * 0.5,
                    }}
                  />
                ))}
              </div>
            </>
          )}

          {/* Confetti Effect */}
          {showConfetti && (
            <div className="absolute inset-0 pointer-events-none">
              {[...Array(50)].map((_, i) => (
                <motion.div
                  key={i}
                  className="absolute w-2 h-2"
                  style={{
                    left: `${Math.random() * 100}%`,
                    background: ['#f59e0b', '#ef4444', '#10b981', '#3b82f6', '#8b5cf6'][i % 5],
                  }}
                  initial={{ y: -100, opacity: 1, rotate: 0 }}
                  animate={{ 
                    y: window.innerHeight,
                    opacity: 0,
                    rotate: 360,
                    x: Math.random() * 100 - 50,
                  }}
                  transition={{ 
                    duration: 2 + Math.random() * 1,
                    ease: "easeOut"
                  }}
                />
              ))}
            </div>
          )}

          <motion.div
            ref={modalRef}
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            className="bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 rounded-3xl border border-slate-700/50 w-full max-w-2xl relative overflow-hidden shadow-2xl my-8"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Premium Header with Glow Effect */}
            <motion.div
              className="relative p-8 border-b border-slate-700/50 bg-gradient-to-r from-slate-800/50 to-slate-900/50"
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4 }}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="relative">
                    <div className="w-12 h-12 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
                      <Rocket className="w-6 h-6 text-white" />
                    </div>
                    <div className="absolute -inset-1 bg-cyan-500 rounded-2xl blur opacity-30"></div>
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-white">
                      {currentStep === 3 ? 'Investment Successful! 🎉' : `Invest in ${asset.name}`}
                    </h2>
                    <p className="text-slate-400 mt-1 flex items-center">
                      <Globe className="w-4 h-4 mr-2" />
                      {asset.location.city}, {asset.location.country}
                    </p>
                  </div>
                </div>
                
                <motion.button
                  onClick={onClose}
                  className="p-3 hover:bg-slate-700/50 rounded-2xl transition-all duration-300 group"
                  whileHover={{ scale: 1.1, rotate: 90 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <X className="w-6 h-6 text-slate-400 group-hover:text-white transition-colors" />
                </motion.button>
              </div>

              {/* Progress Steps */}
              {currentStep < 3 && (
                <div className="flex items-center justify-center space-x-4 mt-6">
                  {[1, 2, 3].map((step) => (
                    <div key={step} className="flex items-center">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold transition-all duration-300 ${
                        step === currentStep 
                          ? 'bg-cyan-500 text-white shadow-lg shadow-cyan-500/25' 
                          : step < currentStep
                          ? 'bg-emerald-500 text-white'
                          : 'bg-slate-700 text-slate-400'
                      }`}>
                        {step < currentStep ? <CheckCircle className="w-4 h-4" /> : step}
                      </div>
                      {step < 3 && (
                        <div className={`w-12 h-1 mx-2 rounded-full transition-all duration-300 ${
                          step < currentStep ? 'bg-emerald-500' : 'bg-slate-700'
                        }`} />
                      )}
                    </div>
                  ))}
                </div>
              )}
            </motion.div>

            {/* Investment Content - Multi Step */}
            <div className="p-8">
              {currentStep === 1 && (
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="space-y-8"
                >
                  {/* Premium Investment Metrics */}
                  <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
                    {investmentDetails.map((detail, index) => (
                      <motion.div
                        key={index}
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ duration: 0.4, delay: index * 0.1 }}
                        className={`bg-gradient-to-br ${detail.bg} border border-slate-700/50 rounded-2xl p-4 text-center backdrop-blur-sm hover:scale-105 transition-transform duration-300 cursor-help group`}
                        title={detail.label}
                      >
                        <detail.icon className={`w-6 h-6 mx-auto mb-3 ${detail.color} group-hover:scale-110 transition-transform`} />
                        <div className="text-xs text-slate-400 mb-1 uppercase tracking-wide">{detail.label}</div>
                        <div className={`text-sm font-bold ${detail.color}`}>{detail.value}</div>
                      </motion.div>
                    ))}
                  </div>

                  {/* Quick Investment Amounts */}
                  <div className="space-y-4">
                    <label className="block text-sm font-semibold text-slate-300 uppercase tracking-wide">
                      Quick Select Amount
                    </label>
                    <div className="grid grid-cols-2 sm:grid-cols-5 gap-3">
                      {quickAmounts.map((amount) => (
                        <motion.button
                          key={amount}
                          type="button"
                          onClick={() => handleAmountChange(amount)}
                          className={`p-3 rounded-xl border transition-all duration-300 text-sm font-semibold ${
                            investmentAmount === amount
                              ? 'bg-cyan-500 border-cyan-500 text-white shadow-lg shadow-cyan-500/25'
                              : 'bg-slate-800/50 border-slate-600 text-slate-300 hover:border-cyan-500 hover:text-cyan-400'
                          }`}
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          ${amount.toLocaleString()}
                        </motion.button>
                      ))}
                    </div>
                  </div>

                  {/* Enhanced Amount Input */}
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <label className="block text-sm font-semibold text-slate-300 uppercase tracking-wide">
                        Custom Investment Amount
                      </label>
                      <div className="flex items-center gap-2 text-xs text-slate-400">
                        {deviceInfo.input === 'touch' ? (
                          <Hand className="w-4 h-4" />
                        ) : (
                          <MousePointer className="w-4 h-4" />
                        )}
                        <span>Drag or type to adjust</span>
                      </div>
                    </div>

                    <div className="relative">
                      <DollarSign className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400" />
                      <input
                        type="number"
                        value={investmentAmount}
                        onChange={(e) => handleAmountChange(Number(e.target.value))}
                        className={`w-full bg-slate-800/50 border-2 ${
                          gestureActive ? 'border-cyan-500 shadow-lg shadow-cyan-500/25' : 'border-slate-600'
                        } rounded-xl pl-12 pr-20 py-4 text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-2 focus:ring-cyan-500/20 transition-all duration-300 text-lg font-semibold ${
                          gestureActive ? 'scale-105' : ''
                        }`}
                        placeholder="Enter amount"
                        min={asset.minimumInvestment}
                        max={1000000}
                        step="100"
                      />
                      <div className="absolute right-4 top-1/2 transform -translate-y-1/2 flex items-center space-x-2">
                        <span className="text-slate-400 text-sm">USD</span>
                        <motion.div
                          className="w-2 h-8 bg-cyan-500 rounded-full opacity-60"
                          animate={{ scaleY: gestureActive ? 1.3 : 1 }}
                          transition={{ duration: 0.2 }}
                        />
                      </div>
                    </div>

                    {/* Amount Slider */}
                    <input
                      type="range"
                      min={asset.minimumInvestment}
                      max={1000000}
                      step="100"
                      value={investmentAmount}
                      onChange={(e) => handleAmountChange(Number(e.target.value))}
                      className="w-full h-2 bg-slate-700 rounded-lg appearance-none cursor-pointer slider-thumb"
                    />

                    {amountError && (
                      <motion.p
                        className="text-rose-400 text-sm flex items-center bg-rose-500/10 border border-rose-500/20 rounded-lg p-3"
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                      >
                        <AlertCircle className="w-4 h-4 mr-2" />
                        {amountError}
                      </motion.p>
                    )}
                  </div>

                  {/* Enhanced Balance Display */}
                  <motion.div
                    className="bg-gradient-to-r from-amber-500/10 to-orange-500/10 border border-amber-500/20 rounded-2xl p-4"
                    whileHover={{ scale: 1.02 }}
                    transition={{ type: "spring", stiffness: 400 }}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-amber-500/20 rounded-xl flex items-center justify-center">
                          <Zap className="w-5 h-5 text-amber-400" />
                        </div>
                        <div>
                          <div className="text-amber-400 font-semibold">Your ASRD Balance</div>
                          <div className="text-white text-lg font-bold">{userBalance.toLocaleString()} ASRD</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-slate-400 text-sm">Available</div>
                        <div className="text-emerald-400 font-semibold">
                          ${(userBalance - investmentAmount).toLocaleString()}
                        </div>
                      </div>
                    </div>
                  </motion.div>
                </motion.div>
              )}

              {currentStep === 2 && (
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="space-y-6"
                >
                  {/* Investment Summary */}
                  <div className="bg-gradient-to-br from-slate-800/50 to-slate-900/50 border border-slate-700/50 rounded-2xl p-6">
                    <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
                      <Target className="w-5 h-5 mr-2 text-cyan-400" />
                      Investment Summary
                    </h3>
                    
                    <div className="space-y-3">
                      <div className="flex justify-between items-center py-2 border-b border-slate-700/50">
                        <span className="text-slate-400">Investment Amount</span>
                        <span className="text-white font-semibold">${investmentAmount.toLocaleString()}</span>
                      </div>
                      
                      <div className="flex justify-between items-center py-2 border-b border-slate-700/50">
                        <span className="text-slate-400">Projected ROI ({asset.projectedROI}%)</span>
                        <span className="text-emerald-400 font-semibold">
                          +${metrics?.projectedReturn.toLocaleString()}
                        </span>
                      </div>
                      
                      <div className="flex justify-between items-center py-2 border-b border-slate-700/50">
                        <span className="text-slate-400">Monthly Returns</span>
                        <span className="text-blue-400 font-semibold">
                          ~${metrics?.monthlyReturn.toLocaleString()}
                        </span>
                      </div>
                      
                      <div className="flex justify-between items-center py-2">
                        <span className="text-slate-300 font-semibold">Total Projected Value</span>
                        <span className="text-cyan-400 font-bold text-lg">
                          ${metrics?.totalValue.toLocaleString()}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Agreement Checkbox */}
                  <motion.div
                    className="flex items-start space-x-4 p-4 bg-slate-800/30 rounded-2xl border border-slate-700/50"
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.2 }}
                  >
                    <input
                      type="checkbox"
                      checked={agreement}
                      onChange={(e) => setAgreement(e.target.checked)}
                      className="mt-1 w-5 h-5 bg-slate-700 border-slate-600 rounded focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 text-cyan-500"
                    />
                    <label className="text-slate-300 leading-relaxed flex-1">
                      <span className="font-semibold text-white">I agree to the investment terms and conditions</span>
                      <br />
                      <span className="text-sm text-slate-400">
                        I understand the risks involved in this investment and confirm that I have read and agree to the 
                        platform's terms of service, privacy policy, and investment agreement. I am aware that returns are 
                        projected and not guaranteed.
                      </span>
                    </label>
                  </motion.div>

                  {amountError && (
                    <motion.p
                      className="text-rose-400 text-sm flex items-center bg-rose-500/10 border border-rose-500/20 rounded-xl p-4"
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                    >
                      <AlertCircle className="w-5 h-5 mr-3" />
                      {amountError}
                    </motion.p>
                  )}
                </motion.div>
              )}

              {currentStep === 3 && (
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  className="text-center space-y-6 py-8"
                >
                  <div className="w-20 h-20 bg-emerald-500 rounded-full flex items-center justify-center mx-auto shadow-lg shadow-emerald-500/25">
                    <CheckCircle className="w-10 h-10 text-white" />
                  </div>
                  
                  <div>
                    <h3 className="text-2xl font-bold text-white mb-2">Investment Confirmed! 🎉</h3>
                    <p className="text-slate-300 text-lg">
                      You've successfully invested <span className="text-cyan-400 font-semibold">${investmentAmount.toLocaleString()}</span> in {asset.name}
                    </p>
                  </div>

                  <div className="bg-gradient-to-br from-emerald-500/10 to-cyan-500/10 border border-emerald-500/20 rounded-2xl p-6 max-w-md mx-auto">
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-slate-400">Transaction ID:</span>
                        <span className="text-white font-mono">TX_{Date.now().toString(36).toUpperCase()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-slate-400">Date & Time:</span>
                        <span className="text-white">{new Date().toLocaleString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-slate-400">Status:</span>
                        <span className="text-emerald-400 font-semibold">Completed</span>
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}
            </div>

            {/* Enhanced Action Buttons */}
            {currentStep < 3 && (
              <motion.div
                className="p-8 border-t border-slate-700/50 bg-slate-900/50"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
              >
                <div className="flex gap-4">
                  {currentStep > 1 && (
                    <motion.button
                      type="button"
                      onClick={() => setCurrentStep(currentStep - 1)}
                      className="flex-1 bg-transparent border-2 border-slate-600 text-slate-300 hover:border-slate-500 hover:text-white py-4 px-6 rounded-xl font-semibold transition-all duration-300 flex items-center justify-center space-x-2"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <X className="w-5 h-5" />
                      <span>Back</span>
                    </motion.button>
                  )}
                  
                  <motion.button
                    type="submit"
                    onClick={handleFormSubmit}
                    disabled={isSubmitting || (currentStep === 2 && !agreement)}
                    className={`flex-1 bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 disabled:from-slate-600 disabled:to-slate-700 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-300 flex items-center justify-center space-x-3 relative overflow-hidden group ${
                      currentStep === 1 ? 'flex-1' : 'flex-[2]'
                    }`}
                    whileHover={!isSubmitting ? { scale: 1.02, y: -2 } : {}}
                    whileTap={!isSubmitting ? { scale: 0.98 } : {}}
                  >
                    {isSubmitting ? (
                      <>
                        <div className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin" />
                        <span className="text-lg">Processing...</span>
                      </>
                    ) : (
                      <>
                        {currentStep === 1 ? (
                          <>
                            <Lock className="w-5 h-5" />
                            <span className="text-lg">Continue to Review</span>
                          </>
                        ) : (
                          <>
                            <CheckCircle className="w-5 h-5" />
                            <span className="text-lg">Confirm Investment</span>
                          </>
                        )}
                      </>
                    )}

                    {/* Premium Button Effects */}
                    <div className="absolute inset-0 -skew-x-12 bg-gradient-to-r from-transparent via-white/20 to-transparent translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000" />
                    <div className="absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-300/10 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                  </motion.button>
                </div>

                {/* Security Badge */}
                <div className="flex items-center justify-center space-x-2 mt-4 text-xs text-slate-500">
                  <Shield className="w-4 h-4" />
                  <span>256-bit SSL Encrypted • Bank-Level Security</span>
                </div>
              </motion.div>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default InvestmentModal;
--- END: src/components/ui/InvestmentModal.tsx ---

=== FILE: src/components/ui/PremiumBackground.tsx ===

"use client";

import React from 'react';
import { useScrollAnimation } from '@/hooks/useScrollAnimation';

export default function PremiumBackground() {
  const { getParallaxStyle, scrollProgress } = useScrollAnimation();

  const getGradient = () => {
    if (scrollProgress < 20) {
      return 'linear-gradient(135deg, #0f172a 0%, #1e293b 25%, #334155 50%, #475569 100%)';
    } else if (scrollProgress < 40) {
      return 'linear-gradient(135deg, #1e293b 0%, #334155 25%, #475569 50%, #64748b 100%)';
    } else if (scrollProgress < 60) {
      return 'linear-gradient(135deg, #334155 0%, #475569 25%, #64748b 50%, #94a3b8 100%)';
    } else {
      return 'linear-gradient(135deg, #475569 0%, #64748b 25%, #94a3b8 50%, #cbd5e1 100%)';
    }
  };

  return (
    <div className="fixed inset-0 -z-50 overflow-hidden">
      {/* Main Gradient Background */}
      <div
        className="absolute inset-0 transition-all duration-2000"
        style={{
          background: getGradient(),
        }}
      />

      {/* Futuristic Grid */}
      <div
        className="absolute inset-0 opacity-40"
        style={{
          backgroundImage: `
            linear-gradient(rgba(14, 165, 233, 0.1) 1px, transparent 1px),
            linear-gradient(90deg, rgba(14, 165, 233, 0.1) 1px, transparent 1px)
          `,
          backgroundSize: '60px 60px',
          ...getParallaxStyle(0.05)
        }}
      />

      {/* Animated Circuit Lines */}
      <div className="absolute inset-0">
        <div
          className="absolute top-1/4 left-0 w-full h-px bg-gradient-to-r from-transparent via-sky-400/30 to-transparent animate-pulse"
          style={getParallaxStyle(0.1)}
        />
        <div
          className="absolute top-3/4 left-0 w-full h-px bg-gradient-to-r from-transparent via-blue-400/30 to-transparent animate-pulse"
          style={{...getParallaxStyle(0.1), animationDelay: '1s'}}
        />
      </div>

      {/* Floating Holographic Elements */}
      <div className="absolute inset-0">
        {/* Main Hologram */}
        <div
          className="absolute top-1/3 left-1/4 w-64 h-64 bg-gradient-to-br from-sky-400/10 to-blue-500/10 rounded-full blur-3xl animate-float-hologram"
          style={{
            ...getParallaxStyle(0.2)
          }}
        />
        
        {/* Secondary Holograms */}
        <div
          className="absolute top-2/3 right-1/4 w-48 h-48 bg-gradient-to-br from-purple-400/10 to-pink-500/10 rounded-full blur-3xl animate-float-hologram"
          style={{
            ...getParallaxStyle(0.15),
            animationDelay: '2s'
          }}
        />
        
        <div
          className="absolute bottom-1/4 left-1/3 w-32 h-32 bg-gradient-to-br from-emerald-400/10 to-cyan-500/10 rounded-full blur-3xl animate-float-hologram"
          style={{
            ...getParallaxStyle(0.1),
            animationDelay: '4s'
          }}
        />
      </div>

      {/* Data Particles */}
      {[...Array(20)].map((_, i) => (
        <div
          key={i}
          className="absolute w-1 h-1 bg-cyan-400/40 rounded-full animate-float-data"
          style={{
            left: `${10 + (i * 4)}%`,
            top: `${20 + (i * 3)}%`,
            animationDelay: `${i * 0.3}s`,
            animationDuration: `${8 + i * 1}s`,
            ...getParallaxStyle(0.05 + i * 0.02)
          }}
        />
      ))}

      {/* Scan Lines */}
      <div
        className="absolute inset-0 opacity-20"
        style={{
          background: `repeating-linear-gradient(0deg, transparent, transparent 2px, rgba(14, 165, 233, 0.1) 2px, rgba(14, 165, 233, 0.1) 4px)`,
          ...getParallaxStyle(0.02)
        }}
      />
    </div>
  );
}

--- END: src/components/ui/PremiumBackground.tsx ---

=== FILE: src/components/ui/RealAssetImage.tsx ===

// src/components/ui/RealAssetImage.tsx
"use client";

import { motion } from 'framer-motion';
import React from 'react';
import Image from 'next/image';
import { getAssetImages } from '@/utils/assetImages';

interface RealAssetImageProps {
  asset: any; // Asset from mock data
  className?: string;
  size?: 'sm' | 'md' | 'lg' | 'xl';
  imageType?: 'featured' | 'gallery';
  imageIndex?: number;
  priority?: boolean;
}

const getSizeClasses = (size: 'sm' | 'md' | 'lg' | 'xl') => {
  switch (size) {
    case 'sm': return 'w-16 h-16';
    case 'md': return 'w-24 h-24';
    case 'lg': return 'w-32 h-32';
    case 'xl': return 'w-full h-48 md:h-64';
    default: return 'w-24 h-24';
  }
};

export default function RealAssetImage({ 
  asset, 
  className = '', 
  size = 'md', 
  imageType = 'featured',
  imageIndex = 0,
  priority = false 
}: RealAssetImageProps) {
  const [imgSrc, setImgSrc] = React.useState('');
  const [isLoading, setIsLoading] = React.useState(true);
  const [retryCount, setRetryCount] = React.useState(0);

  React.useEffect(() => {
    if (!asset) return;

    const assetImages = getAssetImages(asset.name);
    let initialSrc = '';

    if (imageType === 'featured') {
      initialSrc = asset.image ? asset.image : assetImages.featured;
    } else {
      initialSrc = asset.images && asset.images.length > imageIndex
        ? asset.images[imageIndex]
        : assetImages.gallery[0];
    }

    setImgSrc(initialSrc);
    setIsLoading(true);
  }, [asset, imageType, imageIndex]);

  const handleImageError = () => {
    console.warn(`Image failed to load: ${imgSrc}`);
    const assetImages = getAssetImages(asset.name);

    if (retryCount < (assetImages.gallery.length)) {
      // Try next gallery image
      const nextIndex = retryCount % assetImages.gallery.length;
      setImgSrc(assetImages.gallery[nextIndex]);
      setRetryCount(prev => prev + 1);
    } else {
      // Ultimate local fallback
      setImgSrc(assetImages.featured);
      setIsLoading(false);
    }
  };

  const sizeClasses = getSizeClasses(size);
  const altText = `${asset?.title || 'Asset'} - ${imageType} image`;

  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      className={`${sizeClasses} relative rounded-xl overflow-hidden border-2 border-cyan-500/30 bg-gray-800 ${className}`}
      data-device="universal"
      data-performance="high"
    >
      {/* Loading Skeleton */}
      {isLoading && (
        <div className="absolute inset-0 bg-gradient-to-br from-cyan-500/10 to-blue-500/10 animate-pulse rounded-lg z-10" />
      )}

      {/* Local Image */}
      {imgSrc && (
        <Image
          src={imgSrc}
          alt={altText}
          fill
          sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
          className={`object-cover transition-all duration-500 ${isLoading ? 'opacity-0' : 'opacity-100'}`}
          priority={priority}
          onLoad={() => setIsLoading(false)}
          onError={handleImageError}
        />
      )}

      {/* Gradient Overlay */}
      <div className="absolute inset-0 bg-gradient-to-t from-black/40 to-transparent pointer-events-none" />
    </motion.div>
  );
}

--- END: src/components/ui/RealAssetImage.tsx ---

=== CONTEXTS STRUCTURE ===
=== FILE: src/contexts/AppContext.tsx ===

"use client";

import React, { createContext, useContext, useState, ReactNode } from 'react';
import {
  mockProposals,
  mockAssets,
  ownedAssets,
  platformStats,
  howItWorksData,
  treasuryData,
  userPortfolioData,
  platformFeatures
} from '@/data/mockData';

// Define proper TypeScript interfaces for our data
interface TreasuryAsset {
  name: string;
  value: number;
  percentage: number;
  color: string;
}

interface TreasuryData {
  totalValue: number;
  availableFunds: number;
  allocatedFunds: number;
  monthlyIncome: number;
  monthlyExpenses: number;
  netCashFlow: number;
  assets: TreasuryAsset[];
  growth: {
    monthly: string;
    quarterly: string;
    yearly: string;
  };
  performance: {
    currentMonth: string;
    lastMonth: string;
    ytd: string;
  };
}

interface Proposal {
  id: number;
  title: string;
  description: string;
  votesFor: number;
  votesAgainst: number;
  status: string;
  endDate: string;
  type: string;
  impact: string;
  budget: string;
  timeline: string;
}

interface HowItWorksStep {
  step: number;
  title: string;
  description: string;
  icon: string;
}

interface PlatformFeature {
  title: string;
  description: string;
  icon: string;
}

interface UserPortfolio {
  totalValue: number;
  monthlyIncome: number;
  activeInvestments: number;
  totalReturns: number;
  averageROI: number;
  assets: Array<{
    id: number;
    name: string;
    value: number;
    shares: number;
    monthlyIncome: number;
    roi: number;
  }>;
}

interface AppContextType {
  // Core platform data
  proposals: Proposal[];
  assets: any[];
  ownedAssets: any[];
  platformStats: any;
  treasuryData: TreasuryData;

  // Marketing and educational data
  howItWorks: HowItWorksStep[];
  platformFeatures: PlatformFeature[];

  // User-specific data
  userPortfolio: UserPortfolio;

  // UI state
  isLoading: boolean;
  isMobile: boolean;

  // Methods
  refreshData: () => void;
  setIsMobile: (isMobile: boolean) => void;
  voteOnProposal: (proposalId: number, vote: 'for' | 'against') => void;
}

const AppContext = createContext<AppContextType | undefined>(undefined);

interface AppProviderProps {
  children: ReactNode;
}

export const AppProvider: React.FC<AppProviderProps> = ({ children }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [proposals, setProposals] = useState<Proposal[]>(mockProposals);

  const refreshData = () => {
    setIsLoading(true);
    // Simulate API call to refresh data
    setTimeout(() => {
      setIsLoading(false);
      console.log('Platform data refreshed');
    }, 1000);
  };

  const voteOnProposal = (proposalId: number, vote: 'for' | 'against') => {
    setProposals(prevProposals =>
      prevProposals.map(proposal =>
        proposal.id === proposalId
          ? {
              ...proposal,
              votesFor: vote === 'for' ? proposal.votesFor + 1 : proposal.votesFor,
              votesAgainst: vote === 'against' ? proposal.votesAgainst + 1 : proposal.votesAgainst
            }
          : proposal
      )
    );

    console.log(`Voted ${vote} on proposal ${proposalId}`);
  };

  const value: AppContextType = {
    // Core platform data
    proposals,
    assets: mockAssets,
    ownedAssets: ownedAssets,
    platformStats: platformStats,
    treasuryData: treasuryData,

    // Marketing and educational data
    howItWorks: howItWorksData,
    platformFeatures: platformFeatures,

    // User-specific data
    userPortfolio: userPortfolioData,

    // UI state
    isLoading,
    isMobile,

    // Methods
    refreshData,
    setIsMobile,
    voteOnProposal,
  };

  return (
    <AppContext.Provider value={value}>
      {children}
    </AppContext.Provider>
  );
};

export const useApp = () => {
  const context = useContext(AppContext);
  if (context === undefined) {
    throw new Error('useApp must be used within an AppProvider');
  }
  return context;
};
--- END: src/contexts/AppContext.tsx ---

=== FILE: src/contexts/AuthContext.tsx ===

// src/contexts/AuthContext.tsx - PREMIUM ENHANCED VERSION
"use client";

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { useNotification, useInvestmentNotifications } from './NotificationContext';

interface User {
  walletAddress: string;
  asrdBalance: number;
  portfolioValue: number;
  investments?: Array<{
    id: string;
    assetId: number;
    assetName: string;
    amount: number;
    date: string;
    tokensUsed: number;
    currentValue?: number;
  }>;
  achievements?: Array<{
    id: string;
    title: string;
    description: string;
    date: string;
    icon: string;
  }>;
}

interface AuthContextType {
  user: User | null;
  login: (redirectPath?: string) => void;
  logout: () => void;
  buyASRD: (amount: number) => void;
  invest: (amount: number, assetName: string, assetId: number) => boolean;
  claimRental: (assetId: number) => void;
  claimWinnings: (assetId: number) => void;
  getInvestmentHistory: () => Array<any>;
  isAuthenticated: boolean;
  isLoading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();
  const { showSuccess, showPremium } = useNotification();
  const { notifyInvestmentSuccess, notifyInvestmentError } = useInvestmentNotifications();

  useEffect(() => {
    // Check for existing session
    const savedUser = localStorage.getItem('assetRideUser');
    if (savedUser) {
      try {
        setUser(JSON.parse(savedUser));
        showSuccess(
          'Welcome Back!',
          'Your investment portfolio is ready. Continue growing your wealth with premium opportunities.',
          {
            label: 'View Portfolio',
            onClick: () => router.push('/dashboard')
          }
        );
      } catch (error) {
        console.error('Error parsing saved user:', error);
        localStorage.removeItem('assetRideUser');
      }
    }
    setIsLoading(false);
  }, []);

  const login = (redirectPath: string = '/dashboard') => {
    // Generate a mock wallet address for demo purposes
    const mockWalletAddress = `0x${Array.from({length: 40}, () =>
      Math.floor(Math.random() * 16).toString(16)
    ).join('')}`;

    const newUser: User = {
      walletAddress: mockWalletAddress,
      asrdBalance: 5000, // 5,000 ASRD tokens
      portfolioValue: 490000, // USD value of owned assets
      investments: [],
      achievements: [
        {
          id: 'welcome',
          title: 'Welcome Investor',
          description: 'Joined the ASRD investment platform',
          date: new Date().toISOString(),
          icon: '🎯'
        }
      ]
    };
    
    setUser(newUser);
    localStorage.setItem('assetRideUser', JSON.stringify(newUser));
    
    showPremium(
      'Wallet Connected Successfully! 🎉',
      'Welcome to ASRD Premium Investments. Start exploring exclusive real-world asset opportunities with 22-46% projected returns.',
      {
        label: 'Explore Opportunities',
        onClick: () => router.push('/marketplace')
      }
    );
    
    router.push(redirectPath);
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('assetRideUser');
    
    showSuccess(
      'Signed Out',
      'You have been successfully signed out. Your investment data is securely stored.',
      {
        label: 'Sign Back In',
        onClick: () => router.push('/')
      }
    );
    
    router.push('/');
  };

  const buyASRD = (amount: number) => {
    if (!user) return;

    const updatedUser = {
      ...user,
      asrdBalance: user.asrdBalance + amount
    };
    
    setUser(updatedUser);
    localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));
    
    showSuccess(
      'ASRD Tokens Purchased!',
      `You've successfully purchased ${amount.toLocaleString()} ASRD tokens. They are now available in your wallet.`,
      {
        label: 'View Wallet',
        onClick: () => router.push('/dashboard')
      }
    );
  };

  const invest = (amount: number, assetName: string, assetId: number): boolean => {
    if (!user) return false;

    if (user.asrdBalance < amount) {
      notifyInvestmentError(amount - user.asrdBalance);
      return false;
    }

    const newInvestment = {
      id: `inv-${Date.now()}`,
      assetId,
      assetName,
      amount,
      date: new Date().toISOString(),
      tokensUsed: amount,
      currentValue: amount * 1.02 // Simulate immediate growth
    };

    const updatedUser = {
      ...user,
      asrdBalance: user.asrdBalance - amount,
      portfolioValue: user.portfolioValue + amount,
      investments: [...(user.investments || []), newInvestment]
    };

    setUser(updatedUser);
    localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));
    
    notifyInvestmentSuccess(amount, assetName);
    
    // Check for achievements
    checkAchievements(updatedUser);
    
    return true;
  };

  const checkAchievements = (userData: User) => {
    const achievements = [...(userData.achievements || [])];
    const investmentCount = userData.investments?.length || 0;
    
    // First investment achievement
    if (investmentCount === 1 && !achievements.find(a => a.id === 'first-investment')) {
      achievements.push({
        id: 'first-investment',
        title: 'First Investment',
        description: 'Made your first investment on the platform',
        date: new Date().toISOString(),
        icon: '💰'
      });
      
      showPremium(
        'Achievement Unlocked! 🏆',
        'First Investment - Welcome to the world of smart investing!',
        {
          label: 'View Achievements',
          onClick: () => router.push('/dashboard')
        }
      );
    }
    
    // Portfolio milestone
    if (userData.portfolioValue >= 100000 && !achievements.find(a => a.id === '100k-portfolio')) {
      achievements.push({
        id: '100k-portfolio',
        title: '$100K Portfolio',
        description: 'Reached $100,000 in total portfolio value',
        date: new Date().toISOString(),
        icon: '📈'
      });
    }

    if (achievements.length > (userData.achievements?.length || 0)) {
      const updatedUser = { ...userData, achievements };
      setUser(updatedUser);
      localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));
    }
  };

  const claimRental = (assetId: number) => {
    if (!user) return;

    const rentalIncome = Math.floor(Math.random() * 1000) + 500;
    const updatedUser = {
      ...user,
      portfolioValue: user.portfolioValue + rentalIncome
    };
    
    setUser(updatedUser);
    localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));
    
    showSuccess(
      'Rental Income Claimed! 🏠',
      `You've received $${rentalIncome.toLocaleString()} in rental income from your investment.`,
      {
        label: 'View Investments',
        onClick: () => router.push('/dashboard')
      }
    );
  };

  const claimWinnings = (assetId: number) => {
    if (!user) return;

    const winnings = Math.floor(Math.random() * 5000) + 2000;
    const updatedUser = {
      ...user,
      portfolioValue: user.portfolioValue + winnings
    };
    
    setUser(updatedUser);
    localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));
    
    showSuccess(
      'Race Winnings Claimed! 🏇',
      `Congratulations! You've won $${winnings.toLocaleString()} from your thoroughbred investment.`,
      {
        label: 'View Performance',
        onClick: () => router.push('/dashboard')
      }
    );
  };

  const getInvestmentHistory = () => {
    return user?.investments || [];
  };

  const contextValue: AuthContextType = {
    user,
    login,
    logout,
    buyASRD,
    invest,
    claimRental,
    claimWinnings,
    getInvestmentHistory,
    isAuthenticated: !!user,
    isLoading
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
--- END: src/contexts/AuthContext.tsx ---

=== FILE: src/contexts/NotificationContext.tsx ===

// src/contexts/NotificationContext.tsx - PREMIUM ENHANCED VERSION
"use client";

import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  CheckCircle, 
  XCircle, 
  AlertTriangle, 
  Info, 
  Crown,
  X,
  Zap,
  Sparkles,
  Award,
  TrendingUp,
  Rocket,
  Shield,
  DollarSign,
  Users,
  Target
} from 'lucide-react';

export type NotificationType = 'success' | 'error' | 'warning' | 'info' | 'premium' | 'investment' | 'achievement';

interface Notification {
  id: string;
  type: NotificationType;
  title: string;
  message: string;
  duration?: number;
  action?: {
    label: string;
    onClick: () => void;
  };
  icon?: ReactNode;
  progress?: boolean;
}

interface NotificationContextType {
  showNotification: (notification: Omit<Notification, 'id'>) => void;
  showSuccess: (title: string, message: string, action?: Notification['action']) => void;
  showError: (title: string, message: string, action?: Notification['action']) => void;
  showWarning: (title: string, message: string, action?: Notification['action']) => void;
  showInfo: (title: string, message: string, action?: Notification['action']) => void;
  showPremium: (title: string, message: string, action?: Notification['action']) => void;
  showInvestment: (title: string, message: string, action?: Notification['action']) => void;
  showAchievement: (title: string, message: string, action?: Notification['action']) => void;
  removeNotification: (id: string) => void;
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

// Premium Notification Component
const PremiumNotification: React.FC<Notification & { onClose: () => void }> = ({
  type,
  title,
  message,
  duration = 5000,
  action,
  icon,
  progress = true,
  onClose
}) => {
  const [progressWidth, setProgressWidth] = useState(100);
  const [isPaused, setIsPaused] = useState(false);
  const [isVisible, setIsVisible] = useState(true);

  useEffect(() => {
    if (duration === 0) return;

    const interval = setInterval(() => {
      if (!isPaused && progress) {
        setProgressWidth(prev => Math.max(0, prev - (100 / (duration / 50))));
      }
    }, 50);

    return () => clearInterval(interval);
  }, [duration, isPaused, progress]);

  useEffect(() => {
    if (progressWidth <= 0 && progress) {
      handleClose();
    }
  }, [progressWidth, progress]);

  const handleClose = () => {
    setIsVisible(false);
    setTimeout(onClose, 300);
  };

  const handleAction = () => {
    if (action) {
      action.onClick();
      handleClose();
    }
  };

  const getNotificationConfig = () => {
    const baseConfig = {
      icon: null as ReactNode,
      gradient: '',
      border: '',
      iconBg: '',
      iconColor: '',
      progressColor: '',
      glow: ''
    };

    switch (type) {
      case 'success':
        return {
          ...baseConfig,
          icon: icon || <CheckCircle className="w-5 h-5" />,
          gradient: 'from-emerald-500/10 to-emerald-600/10',
          border: 'border-emerald-500/30',
          iconBg: 'bg-emerald-500',
          iconColor: 'text-emerald-400',
          progressColor: 'bg-emerald-500',
          glow: 'shadow-emerald-500/25'
        };
      case 'error':
        return {
          ...baseConfig,
          icon: icon || <XCircle className="w-5 h-5" />,
          gradient: 'from-rose-500/10 to-rose-600/10',
          border: 'border-rose-500/30',
          iconBg: 'bg-rose-500',
          iconColor: 'text-rose-400',
          progressColor: 'bg-rose-500',
          glow: 'shadow-rose-500/25'
        };
      case 'warning':
        return {
          ...baseConfig,
          icon: icon || <AlertTriangle className="w-5 h-5" />,
          gradient: 'from-amber-500/10 to-amber-600/10',
          border: 'border-amber-500/30',
          iconBg: 'bg-amber-500',
          iconColor: 'text-amber-400',
          progressColor: 'bg-amber-500',
          glow: 'shadow-amber-500/25'
        };
      case 'info':
        return {
          ...baseConfig,
          icon: icon || <Info className="w-5 h-5" />,
          gradient: 'from-blue-500/10 to-blue-600/10',
          border: 'border-blue-500/30',
          iconBg: 'bg-blue-500',
          iconColor: 'text-blue-400',
          progressColor: 'bg-blue-500',
          glow: 'shadow-blue-500/25'
        };
      case 'premium':
        return {
          ...baseConfig,
          icon: icon || <Crown className="w-5 h-5" />,
          gradient: 'from-amber-500/10 via-purple-500/10 to-cyan-500/10',
          border: 'border-amber-500/30',
          iconBg: 'bg-gradient-to-r from-amber-500 to-purple-500',
          iconColor: 'text-amber-400',
          progressColor: 'bg-gradient-to-r from-amber-500 to-purple-500',
          glow: 'shadow-amber-500/25'
        };
      case 'investment':
        return {
          ...baseConfig,
          icon: icon || <TrendingUp className="w-5 h-5" />,
          gradient: 'from-cyan-500/10 to-blue-600/10',
          border: 'border-cyan-500/30',
          iconBg: 'bg-cyan-500',
          iconColor: 'text-cyan-400',
          progressColor: 'bg-cyan-500',
          glow: 'shadow-cyan-500/25'
        };
      case 'achievement':
        return {
          ...baseConfig,
          icon: icon || <Award className="w-5 h-5" />,
          gradient: 'from-purple-500/10 to-pink-500/10',
          border: 'border-purple-500/30',
          iconBg: 'bg-purple-500',
          iconColor: 'text-purple-400',
          progressColor: 'bg-purple-500',
          glow: 'shadow-purple-500/25'
        };
      default:
        return baseConfig;
    }
  };

  const config = getNotificationConfig();

  return (
    <motion.div
      initial={{ opacity: 0, x: 300, scale: 0.9 }}
      animate={{ opacity: 1, x: 0, scale: 1 }}
      exit={{ opacity: 0, x: 300, scale: 0.9 }}
      className={`relative bg-gradient-to-r ${config.gradient} backdrop-blur-xl rounded-2xl border ${config.border} p-4 w-80 shadow-2xl ${config.glow} mb-4`}
      onMouseEnter={() => setIsPaused(true)}
      onMouseLeave={() => setIsPaused(false)}
    >
      {/* Header */}
      <div className="flex items-start gap-3">
        {/* Icon */}
        <div className={`w-10 h-10 ${config.iconBg} rounded-xl flex items-center justify-center flex-shrink-0 shadow-lg`}>
          {config.icon}
        </div>

        {/* Content */}
        <div className="flex-1 min-w-0">
          <h4 className="font-bold text-white text-sm leading-tight mb-1">{title}</h4>
          <p className="text-slate-300 text-xs leading-relaxed">{message}</p>
        </div>

        {/* Close Button */}
        <button
          onClick={handleClose}
          className="flex-shrink-0 w-6 h-6 rounded-lg hover:bg-white/10 flex items-center justify-center transition-colors group"
        >
          <X className="w-3 h-3 text-slate-400 group-hover:text-white" />
        </button>
      </div>

      {/* Action Button */}
      {action && (
        <div className="mt-3">
          <button
            onClick={handleAction}
            className="w-full py-2 px-3 bg-white/10 hover:bg-white/20 border border-white/20 rounded-xl text-white text-xs font-semibold transition-all duration-300 hover:scale-105"
          >
            {action.label}
          </button>
        </div>
      )}

      {/* Progress Bar */}
      {progress && duration > 0 && (
        <div className="mt-3 w-full bg-black/20 rounded-full h-1 overflow-hidden">
          <motion.div
            className={`h-1 rounded-full ${config.progressColor}`}
            initial={{ width: '100%' }}
            animate={{ width: `${progressWidth}%` }}
            transition={{ duration: 0.1 }}
          />
        </div>
      )}

      {/* Decorative Elements */}
      <div className="absolute top-2 right-2 opacity-20">
        <Sparkles className="w-3 h-3 text-white" />
      </div>
    </motion.div>
  );
};

export function NotificationProvider({ children }: { children: ReactNode }) {
  const [notifications, setNotifications] = useState<Notification[]>([]);

  const showNotification = (notification: Omit<Notification, 'id'>) => {
    const id = Math.random().toString(36).substr(2, 9);
    setNotifications(prev => [...prev, { ...notification, id }]);
  };

  const removeNotification = (id: string) => {
    setNotifications(prev => prev.filter(notification => notification.id !== id));
  };

  // Helper methods for common notification types
  const showSuccess = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'success',
      title,
      message,
      duration: 4000,
      action,
      icon: <CheckCircle className="w-5 h-5" />
    });
  };

  const showError = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'error',
      title,
      message,
      duration: 5000,
      action,
      icon: <XCircle className="w-5 h-5" />
    });
  };

  const showWarning = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'warning',
      title,
      message,
      duration: 4000,
      action,
      icon: <AlertTriangle className="w-5 h-5" />
    });
  };

  const showInfo = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'info',
      title,
      message,
      duration: 3000,
      action,
      icon: <Info className="w-5 h-5" />
    });
  };

  const showPremium = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'premium',
      title,
      message,
      duration: 6000,
      action,
      icon: <Crown className="w-5 h-5" />
    });
  };

  const showInvestment = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'investment',
      title,
      message,
      duration: 5000,
      action,
      icon: <TrendingUp className="w-5 h-5" />
    });
  };

  const showAchievement = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'achievement',
      title,
      message,
      duration: 5000,
      action,
      icon: <Award className="w-5 h-5" />
    });
  };

  const contextValue: NotificationContextType = {
    showNotification,
    showSuccess,
    showError,
    showWarning,
    showInfo,
    showPremium,
    showInvestment,
    showAchievement,
    removeNotification
  };

  return (
    <NotificationContext.Provider value={contextValue}>
      {children}
      
      {/* Notification Container */}
      <div className="fixed top-4 right-4 z-50 pointer-events-none">
        <div className="flex flex-col items-end">
          <AnimatePresence mode="popLayout">
            {notifications.map((notification) => (
              <div key={notification.id} className="pointer-events-auto">
                <PremiumNotification
                  {...notification}
                  onClose={() => removeNotification(notification.id)}
                />
              </div>
            ))}
          </AnimatePresence>
        </div>
      </div>
    </NotificationContext.Provider>
  );
}

export function useNotification() {
  const context = useContext(NotificationContext);
  if (context === undefined) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
}

// Hook for investment-specific notifications
export function useInvestmentNotifications() {
  const { showInvestment, showSuccess, showError, showPremium } = useNotification();

  const notifyInvestmentSuccess = (amount: number, assetName: string) => {
    showSuccess(
      'Investment Successful! 🎉',
      `You've invested $${amount.toLocaleString()} in ${assetName}. Welcome to the investor community!`,
      {
        label: 'View Portfolio',
        onClick: () => window.location.href = '/dashboard'
      }
    );
  };

  const notifyInvestmentError = (requiredAmount?: number) => {
    showError(
      'Insufficient Balance',
      requiredAmount 
        ? `You need $${requiredAmount.toLocaleString()} more ASRD tokens to complete this investment.`
        : 'Insufficient ASRD balance. Please purchase more tokens.',
      {
        label: 'Buy ASRD',
        onClick: () => window.location.href = '/treasury'
      }
    );
  };

  const notifyPremiumOpportunity = (assetName: string, roi: number) => {
    showPremium(
      'Premium Investment Opportunity',
      `${assetName} offers exceptional ${roi}% projected returns! Limited spots available.`,
      {
        label: 'Invest Now',
        onClick: () => window.location.href = '/marketplace'
      }
    );
  };

  const notifyLoginRequired = () => {
    showPremium(
      'Connect Your Wallet',
      'Join our premium investor community to access exclusive investment opportunities with 22-46% projected returns.',
      {
        label: 'Connect Now',
        onClick: () => window.location.href = '/login'
      }
    );
  };

  return {
    notifyInvestmentSuccess,
    notifyInvestmentError,
    notifyPremiumOpportunity,
    notifyLoginRequired
  };
}

// Hook for achievement notifications
export function useAchievementNotifications() {
  const { showAchievement, showSuccess } = useNotification();

  const notifyMilestone = (milestone: string, description: string) => {
    showAchievement(
      `Milestone Unlocked: ${milestone}`,
      description,
      {
        label: 'View Achievements',
        onClick: () => window.location.href = '/dashboard'
      }
    );
  };

  const notifyPortfolioGrowth = (growth: number) => {
    showSuccess(
      'Portfolio Growing! 📈',
      `Your portfolio has grown by ${growth}% this month. Keep up the great work!`,
      {
        label: 'View Performance',
        onClick: () => window.location.href = '/dashboard'
      }
    );
  };

  return {
    notifyMilestone,
    notifyPortfolioGrowth
  };
}
--- END: src/contexts/NotificationContext.tsx ---

=== LIB & UTILS STRUCTURE ===
=== FILE: src/lib/universal.ts ===

'use client';

import { useState, useEffect } from 'react';

export type DeviceType = 'mobile' | 'tablet' | 'desktop';

export interface DeviceInfo {
  type: DeviceType;
  os: string;
  browser: string;
  isRetina: boolean;
  screenWidth: number;
  screenHeight: number;
  isMobile: boolean;
  input: 'mouse' | 'touch';
  performance: 'high'; // ALWAYS HIGH FOR DEMO QUALITY
}

export interface UniversalAttributes {
  [key: string]: any;
}

export interface UniversalConfig {
  deviceInfo: DeviceInfo;
  universalAttributes: UniversalAttributes;
}

export function useUniversal(): UniversalConfig {
  const isClient = typeof window !== 'undefined';

  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo>({
    type: 'desktop',
    os: isClient ? navigator.platform : '',
    browser: isClient ? navigator.userAgent : '',
    isRetina: isClient ? window.devicePixelRatio > 1 : false,
    screenWidth: isClient ? window.innerWidth : 0,
    screenHeight: isClient ? window.innerHeight : 0,
    isMobile: isClient ? window.innerWidth < 768 : false,
    input: isClient ? (window.matchMedia('(pointer: coarse)').matches ? 'touch' : 'mouse') : 'mouse',
    performance: 'high', // ALWAYS HIGH QUALITY
  });

  const universalAttributes: UniversalAttributes = {
    'data-device-type': deviceInfo.type,
    'data-os': deviceInfo.os,
    'data-browser': deviceInfo.browser,
    'data-mobile': deviceInfo.isMobile,
    'data-input': deviceInfo.input,
    'data-performance': deviceInfo.performance,
  };

  useEffect(() => {
    if (!isClient) return;

    const handleResize = () => {
      const width = window.innerWidth;
      setDeviceInfo(prev => ({
        ...prev,
        screenWidth: width,
        screenHeight: window.innerHeight,
        type: width < 768 ? 'mobile' : 'desktop',
        isMobile: width < 768,
        input: window.matchMedia('(pointer: coarse)').matches ? 'touch' : 'mouse',
        performance: 'high', // ALWAYS HIGH QUALITY
      }));
    };

    let timeout: NodeJS.Timeout | null = null;
    const throttledResize = () => {
      if (!timeout) {
        timeout = setTimeout(() => {
          handleResize();
          timeout = null;
        }, 100);
      }
    };

    window.addEventListener('resize', throttledResize);
    return () => window.removeEventListener('resize', throttledResize);
  }, [isClient]);

  return { deviceInfo, universalAttributes };
}
--- END: src/lib/universal.ts ---

=== FILE: src/utils/assetImages.ts ===

// src/utils/assetImages.ts

// 🎯 All local images only - guaranteed to work
export const ASSET_IMAGES = {
  // Dubai Real Estate
  'dubai-marina-sky-towers': {
    featured: "/images/dubai-marina-1.png",
    gallery: [
      "/images/dubai-marina-2.png",
      "/images/dubai-marina-3.png"
    ]
  },

  'mayfair-heritage-collection': {
    featured: "/images/mayfair-1.png",
    gallery: [
      "/images/mayfair-2.png",
      "/images/mayfair-3.png"
    ]
  },

  'collins-street-premium-tower': {
    featured: "/images/collins-street-1.png",
    gallery: [
      "/images/collins-street-2.png",
      "/images/collins-street-3.png"
    ]
  },

  'blue-diamond': {
    featured: "/images/horse1.png",
    gallery: [
      "/images/horse2.png",
      "/images/horse3.png"
    ]
  },

  'royal-ascot': {
    featured: "/images/horse2.png",
    gallery: [
      "/images/horse1.png",
      "/images/horse3.png"
    ]
  },

  'burj-vista': {
    featured: "/images/burj-vista-1.png",
    gallery: [
      "/images/burj-vista-2.png",
      "/images/burj-vista-3.png"
    ]
  },

  'sydney-harbour-prime': {
    featured: "/images/collins-street-2.png",
    gallery: [
      "/images/collins-street-1.png",
      "/images/collins-street-3.png"
    ]
  }
} as const;

// 🎯 Fallback image (local)
const FALLBACK_IMAGE = "/images/horse1.png"; // safe default

// 🎯 Resolve image for mockAssets
export const resolveAssetImage = (imagePath: string, assetType?: string): string => {
  const pathMap: Record<string, string> = {
    // Real Estate Dubai
    '/assets/dubai-marina-1.jpg': ASSET_IMAGES['dubai-marina-sky-towers'].featured,
    '/assets/dubai-marina-2.jpg': ASSET_IMAGES['dubai-marina-sky-towers'].gallery[0],
    '/assets/dubai-marina-3.jpg': ASSET_IMAGES['dubai-marina-sky-towers'].gallery[1],

    // Dubai Ultra
    '/assets/burj-vista-1.jpg': ASSET_IMAGES['burj-vista'].featured,
    '/assets/burj-vista-2.jpg': ASSET_IMAGES['burj-vista'].gallery[0],
    '/assets/burj-vista-3.jpg': ASSET_IMAGES['burj-vista'].gallery[1],

    // UK
    '/assets/mayfair-1.jpg': ASSET_IMAGES['mayfair-heritage-collection'].featured,
    '/assets/mayfair-2.jpg': ASSET_IMAGES['mayfair-heritage-collection'].gallery[0],
    '/assets/mayfair-3.jpg': ASSET_IMAGES['mayfair-heritage-collection'].gallery[1],

    // Australia
    '/assets/collins-street-1.jpg': ASSET_IMAGES['collins-street-premium-tower'].featured,
    '/assets/collins-street-2.jpg': ASSET_IMAGES['collins-street-premium-tower'].gallery[0],
    '/assets/collins-street-3.jpg': ASSET_IMAGES['collins-street-premium-tower'].gallery[1],

    // Horse Racing Australia
    '/assets/blue-diamond-1.jpg': ASSET_IMAGES['blue-diamond'].featured,
    '/assets/blue-diamond-2.jpg': ASSET_IMAGES['blue-diamond'].gallery[0],
    '/assets/blue-diamond-3.jpg': ASSET_IMAGES['blue-diamond'].gallery[1],

    // Horse Racing UK
    '/assets/royal-ascot-1.jpg': ASSET_IMAGES['royal-ascot'].featured,
    '/assets/royal-ascot-2.jpg': ASSET_IMAGES['royal-ascot'].gallery[0],
    '/assets/royal-ascot-3.jpg': ASSET_IMAGES['royal-ascot'].gallery[1]
  };

  return pathMap[imagePath] || FALLBACK_IMAGE;
};

// 🎯 Get asset images by asset name
export const getAssetImages = (assetName: string) => {
  const key = assetName.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
  return ASSET_IMAGES[key as keyof typeof ASSET_IMAGES] || ASSET_IMAGES['dubai-marina-sky-towers'];
};
--- END: src/utils/assetImages.ts ---

=== TYPES & DATA STRUCTURE ===
=== FILE: src/types/asset.ts ===

// Re-export everything from the unified types
export type { Asset, Portfolio, Transaction, InvestmentModalProps, AssetDetailsModalProps } from './index';

// Import Asset type for use in interfaces
import type { Asset } from './index';

// Legacy types for backward compatibility
export interface OwnedAsset {
  id: number;
  asset: Asset;
  investedAmount: number;
  currentValue: number;
  purchaseDate: string;
  returns: number;
  roi: number;
  // Add missing properties from mock data
  shares?: number;
  value?: number;
  payoutAmount?: number;
  payoutFrequency?: string;
  nextPayout?: string;
  status?: string;
  badges?: Array<{ label: string; color: string }>;
  // Legacy name properties for compatibility
  name?: string;
  title?: string;
  type?: string;
  location?: string;
}

export interface PlatformStats {
  totalUsers: number;
  activeInvestors: number;
  totalInvestments: number;
  totalReturns: number;
  platformGrowth: number;
  averageROI: number;
  // Additional properties from mock data
  totalValue?: number;
  successRate?: number;
  monthlyGrowth?: number;
}
--- END: src/types/asset.ts ---

=== FILE: src/types/index.ts ===

// ==================== ASSET DETAILS DISCRIMINATED UNIONS ====================
export interface RealEstateDetails {
  bedrooms?: number;
  bathrooms?: number;
  area?: number;
  units?: number;
  yearBuilt?: number;
  floors?: number;
  parking?: number;
}

export interface HorseRacingDetails {
  age: number;
  gender: string;
  breed: string;
  trainer: string;
  careerStarts: number;
  careerWins: number;
  totalEarnings: number;
  prizeMoney?: number;
}

export type AssetDetails = 
  | { type: 'real-estate' } & RealEstateDetails
  | { type: 'horse-racing' } & HorseRacingDetails;

// ==================== UNIFIED ASSET TYPE ====================
export interface Asset {
  // Core Identification
  id: string | number;
  name: string;
  title: string;
  description: string;
  
  // Classification
  type: 'real-estate' | 'horse-racing' | string;
  category: string;
  
  // Location (Unified structure)
  location: {
    country: string;
    city: string;
    address?: string;
    coordinates?: { lat: number; lng: number };
    _3dModel?: string;
    panorama?: string;
  };
  
  // Financial Information (Unified property names)
  currency: string;
  minimumInvestment: number;
  minInvestment: number; // Legacy alias
  totalFunding: number;
  fundedAmount: number;
  fundingProgress: number;
  projectedROI: number;
  expectedReturn: number; // Legacy alias
  roi: number;
  term: number;
  riskLevel: string;
  
  // Platform Metrics
  investorCount: number;
  rating: number;
  
  // Enhanced Media & Presentation
  images: string[];
  image: string;
  featuredImage?: string;
  gallery?: string[];
  virtualTour?: string;
  floorPlans?: string[];
  features: string[];
  tags: string[];
  badges: Array<{ label: string; color: string }>;
  
  // Financial Details
  financials?: {
    currentValuation: number;
    totalInvested: number;
    totalReturns: number;
    annualizedReturn: number;
    currentROI: number;
    projectedROI: number;
    volatility: number;
  };
  
  // 3D Experience Features
  _3dConfig?: {
    particles: number;
    animations: string;
    shadows: boolean;
  };
  
  // Enhanced details with discriminated unions
  details?: AssetDetails;
}

// ==================== OWNED ASSET TYPE ====================
export interface OwnedAsset {
  id: number;
  asset: Asset;
  investedAmount: number;
  currentValue: number;
  purchaseDate: string;
  returns: number;
  roi: number;
  // Additional properties from mock data
  shares?: number;
  value?: number;
  payoutAmount?: number;
  payoutFrequency?: string;
  nextPayout?: string;
  status?: string;
  badges?: Array<{ label: string; color: string }>;
  // Legacy flat structure compatibility
  name?: string;
  title?: string;
  type?: string;
  location?: string;
}

// ==================== SUPPORTING TYPES ====================
export interface Portfolio {
  id: string;
  name: string;
  value: number;
  return: number;
  assets: Asset[];
}

export interface Transaction {
  id: string;
  assetId: string;
  type: 'investment' | 'withdrawal';
  amount: number;
  date: string;
  status: 'completed' | 'pending' | 'failed';
}

export interface InvestmentModalProps {
  asset: Asset;
  onClose: () => void;
  onInvest: (amount: number) => void;
}

export interface AssetDetailsModalProps {
  asset: Asset;
  onClose: () => void;
  onInvest: () => void;
}

export interface PlatformStats {
  totalUsers: number;
  activeInvestors: number;
  totalInvestments: number;
  totalReturns: number;
  platformGrowth: number;
  averageROI: number;
  // Additional properties from mock data
  totalValue?: number;
  successRate?: number;
  activeAssets?: number;
}

// ==================== COMPATIBILITY EXPORTS ====================
// Re-export everything from asset.ts for backward compatibility
export type { Asset as AssetLegacy } from './asset';
--- END: src/types/index.ts ---

=== FILE: src/data/mockData.ts ===

// ULTIMATE INVESTOR EXPERIENCE MOCK DATA
// Australia/UK/Dubai Focus | Real Estate & Horse Racing Only | 22-46% Returns
import { Asset, OwnedAsset, PlatformStats } from '@/types';

// ==================== PREMIUM ASSET DATA ====================
export const mockAssets: Asset[] = [
  // 🏢 DUBAI REAL ESTATE - Premium Waterfront
  {
    id: 1,
    name: "Dubai Marina Sky Towers",
    title: "Luxury Waterfront Apartments with Marina Views",
    description: "Exclusive collection of 3 luxury towers in the heart of Dubai Marina featuring 1-4 bedroom apartments with private balconies overlooking the marina. Each unit includes premium German kitchen appliances, Italian marble flooring, and smart home automation. The development features a state-of-the-art gym, infinity pool, private beach access, and 24/7 concierge services.",
    type: "real-estate",
    category: "Luxury Residential",
    location: {
      country: "UAE",
      city: "Dubai",
      address: "Marina Walk, Dubai Marina",
      coordinates: { lat: 25.0801, lng: 55.1422 }
    },
    currency: "AED",
    minimumInvestment: 100,
    minInvestment: 100,
    totalFunding: 85000000,
    fundedAmount: 72350000,
    fundingProgress: 85,
    projectedROI: 34,
    expectedReturn: 34,
    roi: 34,
    term: 48,
    riskLevel: "Medium",
    investorCount: 287,
    rating: 4.9,
    images: [
      "/images/dubai-marina-1.png",
      "/images/dubai-marina-2.png",
      "/images/dubai-marina-3.png"
    ],
    image: "/images/dubai-marina-1.png",
    features: [
      "Panoramic Marina Views",
      "Private Beach Access",
      "Infinity Pool",
      "Smart Home Automation",
      "24/7 Concierge",
      "German Appliances",
      "Italian Marble Flooring",
      "Underground Parking"
    ],
    tags: ["Luxury", "Waterfront", "High-Yield", "Prime Location", "Dubai"],
    badges: [
      { label: "Premium", color: "amber" },
      { label: "85% Funded", color: "emerald" },
      { label: "Fast Filling", color: "blue" }
    ],
    financials: {
      currentValuation: 89250000,
      totalInvested: 72350000,
      totalReturns: 11560000,
      annualizedReturn: 31.2,
      currentROI: 34,
      projectedROI: 34,
      volatility: 12.8
    },
    details: {
      type: 'real-estate',
      bedrooms: 3,
      bathrooms: 3,
      area: 1850,
      units: 45,
      yearBuilt: 2023
    }
  },

  // 🏛️ UK REAL ESTATE - Historic Luxury
  {
    id: 2,
    name: "Mayfair Heritage Collection",
    title: "Grade II Listed Georgian Townhouses",
    description: "Exquisite collection of 8 Grade II listed Georgian townhouses in Mayfair's most prestigious square. Meticulously restored to preserve original features including marble fireplaces, cornicing, and sash windows while incorporating modern luxury amenities. Each property features private gardens, wine cellars, and secure underground parking. Current tenants include diplomatic missions and ultra-high-net-worth individuals with average lease terms of 5+ years.",
    type: "real-estate",
    category: "Historic Luxury",
    location: {
      country: "UK",
      city: "London",
      address: "Grosvenor Square, Mayfair",
      coordinates: { lat: 51.5136, lng: -0.1503 }
    },
    currency: "GBP",
    minimumInvestment: 100,
    minInvestment: 100,
    totalFunding: 65000000,
    fundedAmount: 55250000,
    fundingProgress: 85,
    projectedROI: 28,
    expectedReturn: 28,
    roi: 28,
    term: 60,
    riskLevel: "Low",
    investorCount: 234,
    rating: 4.8,
    images: [
      "/images/mayfair-1.png",
      "/images/mayfair-2.png",
      "/images/mayfair-3.png"
    ],
    image: "/images/mayfair-1.png",
    features: [
      "Grade II Listed",
      "Private Gardens",
      "Original Features",
      "Wine Cellars",
      "Secure Parking",
      "Diplomatic Tenants",
      "5+ Year Leases",
      "Heritage Restoration"
    ],
    tags: ["Historic", "Ultra-Luxury", "Stable", "Prime", "London"],
    badges: [
      { label: "Historic", color: "purple" },
      { label: "85% Funded", color: "emerald" },
      { label: "Low Risk", color: "blue" }
    ],
    financials: {
      currentValuation: 71500000,
      totalInvested: 55250000,
      totalReturns: 8840000,
      annualizedReturn: 25.4,
      currentROI: 28,
      projectedROI: 28,
      volatility: 8.2
    },
    details: {
      type: 'real-estate',
      bedrooms: 6,
      bathrooms: 5,
      area: 4200,
      units: 8,
      yearBuilt: 1785
    }
  },

  // 🏢 AUSTRALIA REAL ESTATE - Premium Commercial
  {
    id: 3,
    name: "Collins Street Premium Tower",
    title: "A-Grade CBD Office Development",
    description: "New 45-story premium office tower in Melbourne's financial district featuring 6-star NABERS energy rating and WELL Platinum certification. Anchor tenants include two major international banks and a top-tier law firm with weighted average lease expiry of 8.2 years. Features include end-of-trip facilities, premium dining precinct, advanced building management systems, and direct access to Parliament Station.",
    type: "real-estate",
    category: "Premium Commercial",
    location: {
      country: "Australia",
      city: "Melbourne",
      address: "525 Collins Street, CBD",
      coordinates: { lat: -37.8185, lng: 144.9537 }
    },
    currency: "AUD",
    minimumInvestment: 100,
    minInvestment: 100,
    totalFunding: 95000000,
    fundedAmount: 80750000,
    fundingProgress: 85,
    projectedROI: 26,
    expectedReturn: 26,
    roi: 26,
    term: 84,
    riskLevel: "Low",
    investorCount: 415,
    rating: 4.7,
    images: [
      "/images/collins-street-1.png",
      "/images/collins-street-2.png",
      "/images/collins-street-3.png"
    ],
    image: "/images/collins-street-1.png",
    features: [
      "6-Star NABERS Rating",
      "WELL Platinum Certified",
      "Anchor Tenants Secured",
      "8.2 Year WALE",
      "End-of-Trip Facilities",
      "Direct Station Access",
      "Premium Dining",
      "Advanced BMS"
    ],
    tags: ["Commercial", "Sustainable", "Prime CBD", "Long Lease", "Melbourne"],
    badges: [
      { label: "Sustainable", color: "emerald" },
      { label: "85% Funded", color: "blue" },
      { label: "Low Volatility", color: "green" }
    ],
    financials: {
      currentValuation: 104500000,
      totalInvested: 80750000,
      totalReturns: 12920000,
      annualizedReturn: 23.8,
      currentROI: 26,
      projectedROI: 26,
      volatility: 7.5
    },
    details: {
      type: 'real-estate',
      floors: 45,
      area: 65000,
      parking: 285,
      yearBuilt: 2025
    }
  },

  // 🐎 HORSE RACING - Australian Champion
  {
    id: 4,
    name: "Blue Diamond",
    title: "Elite Australian Racehorse Syndicate",
    description: "Champion thoroughbred with proven track record, competing in premium Australian racing events including the Blue Diamond Stakes. Managed by leading trainers with state-of-the-art facilities. Exceptional pedigree with proven performance in Group 1 races across Australia.",
    type: "horse-racing",
    category: "Thoroughbred Racing",
    location: {
      country: "Australia",
      city: "Melbourne",
      address: "Flemington Racecourse",
      coordinates: { lat: -37.7886, lng: 144.9087 }
    },
    currency: "AUD",
    minimumInvestment: 100,
    minInvestment: 100,
    totalFunding: 12000000,
    fundedAmount: 10200000,
    fundingProgress: 85,
    projectedROI: 42,
    expectedReturn: 42,
    roi: 42,
    term: 36,
    riskLevel: "High",
    investorCount: 128,
    rating: 4.6,
    images: [
      "/images/horse1.png",
      "/images/horse2.png",
      "/images/horse3.png"
    ],
    image: "/images/horse1.png",
    features: [
      "Proven Champion",
      "Premium Bloodline",
      "Expert Training",
      "Race Ready",
      "Insurance Covered",
      "Veterinary Care",
      "Breeding Rights",
      "Race Schedule"
    ],
    tags: ["Thoroughbred", "Racing", "High Risk", "High Reward", "Champion"],
    badges: [
      { label: "High ROI", color: "amber" },
      { label: "85% Funded", color: "emerald" },
      { label: "Champion", color: "red" }
    ],
    financials: {
      currentValuation: 13800000,
      totalInvested: 10200000,
      totalReturns: 4284000,
      annualizedReturn: 42.0,
      currentROI: 42,
      projectedROI: 42,
      volatility: 25.3
    },
    details: {
      type: 'horse-racing',
      age: 3,
      gender: "Colt",
      breed: "Thoroughbred",
      trainer: "Chris Waller",
      careerStarts: 8,
      careerWins: 5,
      totalEarnings: 1850000
    }
  },

  // 🐎 HORSE RACING - UK Elite
  {
    id: 5,
    name: "Royal Ascot",
    title: "UK Champion Racehorse Investment",
    description: "Elite UK racehorse with multiple wins at Royal Ascot and other premium racing events. Exceptional pedigree with proven performance in Group 1 races across Europe. Managed by world-renowned trainers with access to premier training facilities.",
    type: "horse-racing",
    category: "Thoroughbred Racing",
    location: {
      country: "UK",
      city: "Ascot",
      address: "Ascot Racecourse",
      coordinates: { lat: 51.4108, lng: -0.6556 }
    },
    currency: "GBP",
    minimumInvestment: 100,
    minInvestment: 100,
    totalFunding: 15000000,
    fundedAmount: 12750000,
    fundingProgress: 85,
    projectedROI: 38,
    expectedReturn: 38,
    roi: 38,
    term: 24,
    riskLevel: "High",
    investorCount: 96,
    rating: 4.5,
    images: [
      "/images/horse2.png",
      "/images/horse1.png",
      "/images/horse3.png"
    ],
    image: "/images/horse2.png",
    features: [
      "Royal Ascot Winner",
      "International Pedigree",
      "Champion Trainer",
      "Full Insurance",
      "Proven Performance",
      "Breeding Potential",
      "European Campaign",
      "Group 1 Winner"
    ],
    tags: ["Champion", "UK Racing", "Premium", "Elite", "Group 1"],
    badges: [
      { label: "Elite", color: "purple" },
      { label: "85% Funded", color: "emerald" },
      { label: "Group 1", color: "gold" }
    ],
    financials: {
      currentValuation: 18000000,
      totalInvested: 12750000,
      totalReturns: 4845000,
      annualizedReturn: 38.0,
      currentROI: 38,
      projectedROI: 38,
      volatility: 22.7
    },
    details: {
      type: 'horse-racing',
      age: 4,
      gender: "Filly",
      breed: "Thoroughbred",
      trainer: "John Gosden",
      careerStarts: 12,
      careerWins: 7,
      totalEarnings: 2850000
    }
  },

  // 🏢 DUBAI ULTRA LUXURY
  {
    id: 6,
    name: "Burj Vista",
    title: "Ultra-Luxury Dubai Penthouses",
    description: "Exclusive penthouses with direct Burj Khalifa views and unparalleled luxury amenities. Featuring private elevators, infinity pools, and 24/7 butler service in the heart of Downtown Dubai. Each penthouse includes custom Italian marble, smart home automation, and panoramic views of the Dubai Fountain.",
    type: "real-estate",
    category: "Ultra Luxury",
    location: {
      country: "UAE",
      city: "Dubai",
      address: "Downtown Dubai",
      coordinates: { lat: 25.1972, lng: 55.2742 }
    },
    currency: "AED",
    minimumInvestment: 100,
    minInvestment: 100,
    totalFunding: 125000000,
    fundedAmount: 106250000,
    fundingProgress: 85,
    projectedROI: 32,
    expectedReturn: 32,
    roi: 32,
    term: 48,
    riskLevel: "Medium",
    investorCount: 215,
    rating: 4.8,
    images: [
      "/images/burj-vista-1.png",
      "/images/burj-vista-2.png",
      "/images/burj-vista-3.png"
    ],
    image: "/images/burj-vista-1.png",
    features: [
      "Burj Khalifa Views",
      "Private Elevators",
      "Infinity Pools",
      "Smart Home System",
      "24/7 Butler",
      "Helipad Access",
      "Wine Cellars",
      "Home Theater"
    ],
    tags: ["Ultra-Luxury", "Penthouse", "Burj Views", "Exclusive", "Downtown"],
    badges: [
      { label: "Ultra", color: "violet" },
      { label: "85% Funded", color: "emerald" },
      { label: "Iconic", color: "amber" }
    ],
    financials: {
      currentValuation: 143750000,
      totalInvested: 106250000,
      totalReturns: 34000000,
      annualizedReturn: 32.0,
      currentROI: 32,
      projectedROI: 32,
      volatility: 15.2
    },
    details: {
      type: 'real-estate',
      bedrooms: 5,
      bathrooms: 6,
      area: 8500,
      units: 12,
      yearBuilt: 2024
    }
  },

  // 🏢 SYDNEY HARBOUR
  {
    id: 7,
    name: "Sydney Harbour Prime",
    title: "Waterfront Luxury Residences",
    description: "Premium waterfront apartments with iconic Sydney Harbour views and luxury amenities. Located in the exclusive Point Piper area with private marina access and panoramic harbour views. Each residence features bespoke interiors, private balconies, and direct water access.",
    type: "real-estate",
    category: "Waterfront Luxury",
    location: {
      country: "Australia",
      city: "Sydney",
      address: "Point Piper, Sydney Harbour",
      coordinates: { lat: -33.8688, lng: 151.2093 }
    },
    currency: "AUD",
    minimumInvestment: 100,
    minInvestment: 100,
    totalFunding: 95000000,
    fundedAmount: 80750000,
    fundingProgress: 85,
    projectedROI: 29,
    expectedReturn: 29,
    roi: 29,
    term: 60,
    riskLevel: "Low",
    investorCount: 278,
    rating: 4.7,
    images: [
      "/images/collins-street-2.png",
      "/images/collins-street-1.png",
      "/images/collins-street-3.png"
    ],
    image: "/images/collins-street-2.png",
    features: [
      "Harbour Bridge Views",
      "Private Marina Access",
      "Infinity Pool",
      "Concierge Services",
      "Wine Storage",
      "Home Automation",
      "Secure Parking",
      "Waterfront Gardens"
    ],
    tags: ["Waterfront", "Harbour Views", "Luxury", "Sydney", "Exclusive"],
    badges: [
      { label: "Waterfront", color: "blue" },
      { label: "85% Funded", color: "emerald" },
      { label: "Prime", color: "amber" }
    ],
    financials: {
      currentValuation: 114000000,
      totalInvested: 80750000,
      totalReturns: 23417500,
      annualizedReturn: 29.0,
      currentROI: 29,
      projectedROI: 29,
      volatility: 9.8
    },
    details: {
      type: 'real-estate',
      bedrooms: 4,
      bathrooms: 4,
      area: 3200,
      units: 18,
      yearBuilt: 2023
    }
  }
];

// ==================== OWNED ASSETS ====================
export const ownedAssets: OwnedAsset[] = [
  {
    id: 1,
    asset: mockAssets[0],
    investedAmount: 750000,
    currentValue: 1020000,
    purchaseDate: "2025-01-15",
    returns: 270000,
    roi: 36,
    shares: 15,
    value: 1020000,
    payoutAmount: 8500,
    payoutFrequency: "monthly",
    nextPayout: "2025-12-01",
    status: "active",
    badges: [
      { label: "Active", color: "emerald" },
      { label: "Monthly Income", color: "blue" }
    ]
  }
];

// ==================== PLATFORM STATS ====================
export const platformStats: PlatformStats = {
  totalUsers: 4850,
  activeInvestors: 3247,
  totalInvestments: 485000000,
  totalReturns: 112000000,
  platformGrowth: 42.8,
  averageROI: 32.6
};

// ==================== INVESTOR EDUCATION ====================
export const treasuryData = {
  totalValue: 485000000,
  availableFunds: 85000000,
  allocatedFunds: 400000000,
  monthlyIncome: 3850000,
  monthlyExpenses: 1250000,
  netCashFlow: 2600000,
  assets: [
    { name: 'Premium Real Estate', value: 285000000, percentage: 58.8, color: 'emerald' },
    { name: 'Elite Horse Racing', value: 125000000, percentage: 25.8, color: 'amber' },
    { name: 'Commercial Properties', value: 75000000, percentage: 15.4, color: 'blue' }
  ],
  growth: { monthly: "+12.4%", quarterly: "+38.2%", yearly: "+156.7%" },
  performance: { currentMonth: "+12.4%", lastMonth: "+10.8%", ytd: "+86.3%" }
};

// ==================== PROPOSALS ====================
export const mockProposals = [
  {
    id: 1,
    title: "Dubai Palm Jumeirah Expansion",
    description: "Acquire 8 luxury villas on Palm Jumeirah to capitalize on 45% annual tourism growth and premium rental demand averaging 32% ROI.",
    votesFor: 2842,
    votesAgainst: 428,
    status: "active",
    endDate: "2025-03-15",
    type: "Real Estate",
    impact: "High",
    budget: "$42M",
    timeline: "8 months",
    expectedROI: 32,
    riskLevel: "Medium"
  },
  {
    id: 2,
    title: "Royal Ascot Breeding Program",
    description: "Establish new thoroughbred breeding program focused on Royal Ascot champions with John Gosden training and Newmarket facilities.",
    votesFor: 2156,
    votesAgainst: 289,
    status: "approved",
    endDate: "2025-12-30",
    type: "Horse Racing",
    impact: "High",
    budget: "$18M",
    timeline: "4 months",
    expectedROI: 45,
    riskLevel: "High"
  }
];

// ==================== HOW IT WORKS ====================
export const howItWorksData = [
  { step: 1, title: "Discover Premium Opportunities", description: "Browse curated real estate and horse racing investments in Australia, UK, and Dubai with detailed analytics and 3D visualizations.", icon: "search", duration: "Instant" },
  { step: 2, title: "Deep Due Diligence", description: "Access comprehensive investment memos, financial models, and live 3D property tours before making investment decisions.", icon: "shield", duration: "1-3 Days" },
  { step: 3, title: "Invest with Confidence", description: "Execute investments through our secure platform with blockchain verification and instant settlement.", icon: "dollar", duration: "Instant" },
  { step: 4, title: "Track & Optimize", description: "Monitor performance in real-time with advanced dashboards and receive regular income distributions.", icon: "chart", duration: "Ongoing" }
];

// ==================== USER PORTFOLIO ====================
export const userPortfolioData = {
  totalValue: 1020000,
  monthlyIncome: 8500,
  activeInvestments: 3,
  totalReturns: 270000,
  averageROI: 36,
  assets: [
    { id: 1, name: "Dubai Marina Sky Towers", value: 1020000, shares: 15, monthlyIncome: 8500, roi: 36 }
  ]
};

// ==================== PLATFORM FEATURES ====================
export const platformFeatures = [
  { title: "Immersive 3D Property Tours", description: "Walk through every investment property with photorealistic 3D tours and virtual reality compatibility", icon: "cube" },
  { title: "Blockchain Verification", description: "Every transaction and asset ownership recorded on immutable blockchain for maximum security", icon: "shield" },
  { title: "Advanced Analytics", description: "Real-time performance tracking, ROI forecasting, and comprehensive investment analytics", icon: "chart" },
  { title: "Universal Experience", description: "Seamless investment experience across all devices with adaptive performance optimization", icon: "devices" }
];
--- END: src/data/mockData.ts ---

=== PUBLIC ASSETS LIST ===
public/images/burj-vista-1.png
public/images/burj-vista-2.png
public/images/burj-vista-3.png
public/images/collins-street-1.png
public/images/collins-street-2.png
public/images/collins-street-3.png
public/images/dubai-marina-1.png
public/images/dubai-marina-2.png
public/images/dubai-marina-3.png
public/images/horse1.png
public/images/horse2.png
public/images/horse3.png
public/images/mayfair-1.png
public/images/mayfair-2.png
public/images/mayfair-3.png
=== DUMP COMPLETE ===
Total files dumped: 43
