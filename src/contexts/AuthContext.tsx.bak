// src/contexts/AuthContext.tsx - PREMIUM ENHANCED VERSION
"use client";

import React, { createContext, useContext, useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
// ⚠️ useNotification moved inside useEffect to fix build
useEffect(() => {
import { useNotification, useInvestmentNotifications } from './NotificationContext';
}, []);

interface User {
  walletAddress: string;
  asrdBalance: number;
  portfolioValue: number;
  investments?: Array<{
    id: string;
    assetId: number;
    assetName: string;
    amount: number;
    date: string;
    tokensUsed: number;
    currentValue?: number;
  }>;
  achievements?: Array<{
    id: string;
    title: string;
    description: string;
    date: string;
    icon: string;
  }>;
}

interface AuthContextType {
  user: User | null;
  login: (redirectPath?: string) => void;
  logout: () => void;
  buyASRD: (amount: number) => void;
  invest: (amount: number, assetName: string, assetId: number) => boolean;
  claimRental: (assetId: number) => void;
  claimWinnings: (assetId: number) => void;
  getInvestmentHistory: () => Array<any>;
  isAuthenticated: boolean;
  isLoading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();
// ⚠️ useNotification moved inside useEffect to fix build
useEffect(() => {
// ⚠️ useNotification moved to inside component to fix build
}, []);
// ⚠️ useNotification moved inside useEffect to fix build
useEffect(() => {
//   const { showSuccess, showPremium } = useNotification();
}, []);
  const { notifyInvestmentSuccess, notifyInvestmentError } = useInvestmentNotifications();

  useEffect(() => {
    // Check for existing session
    const savedUser = localStorage.getItem('assetRideUser');
    if (savedUser) {
      try {
        setUser(JSON.parse(savedUser));
        showSuccess(
          'Welcome Back!',
          'Your investment portfolio is ready. Continue growing your wealth with premium opportunities.',
          {
            label: 'View Portfolio',
            onClick: () => router.push('/dashboard')
          }
        );
      } catch (error) {
        console.error('Error parsing saved user:', error);
        localStorage.removeItem('assetRideUser');
      }
    }
    setIsLoading(false);
  }, []);

  const login = (redirectPath: string = '/dashboard') => {
    // Generate a mock wallet address for demo purposes
    const mockWalletAddress = `0x${Array.from({length: 40}, () =>
      Math.floor(Math.random() * 16).toString(16)
    ).join('')}`;

    const newUser: User = {
      walletAddress: mockWalletAddress,
      asrdBalance: 5000, // 5,000 ASRD tokens
      portfolioValue: 490000, // USD value of owned assets
      investments: [],
      achievements: [
        {
          id: 'welcome',
          title: 'Welcome Investor',
          description: 'Joined the ASRD investment platform',
          date: new Date().toISOString(),
          icon: '🎯'
        }
      ]
    };
    
    setUser(newUser);
    localStorage.setItem('assetRideUser', JSON.stringify(newUser));
    
    showPremium(
      'Wallet Connected Successfully! 🎉',
      'Welcome to ASRD Premium Investments. Start exploring exclusive real-world asset opportunities with 22-46% projected returns.',
      {
        label: 'Explore Opportunities',
        onClick: () => router.push('/marketplace')
      }
    );
    
    router.push(redirectPath);
  };

  const logout = () => {
  import { useNotification, useInvestmentNotifications } from './NotificationContext';
  useEffect(() => {
    // Move notifications inside useEffect
  }, []);
  // ⚠️ useNotification moved inside useEffect to fix build
  useEffect(() => {
    // Move notifications inside useEffect
  }, []);
  import { useNotification, useInvestmentNotifications } from './NotificationContext';
  useEffect(() => {
    // Move notifications inside useEffect
  }, []);
  // ⚠️ useNotification moved inside useEffect to fix build
  useEffect(() => {
    // Move notifications inside useEffect
  }, []);
  import { useNotification, useInvestmentNotifications } from './NotificationContext';
  useEffect(() => {
    // Move notifications inside useEffect
  }, []);
  // ⚠️ useNotification moved inside useEffect to fix build
  useEffect(() => {
    // Move notifications inside useEffect
  }, []);
    setUser(null);
    localStorage.removeItem('assetRideUser');
    
    showSuccess(
      'Signed Out',
      'You have been successfully signed out. Your investment data is securely stored.',
      {
        label: 'Sign Back In',
        onClick: () => router.push('/')
      }
    );
    
    router.push('/');
  };

  const buyASRD = (amount: number) => {
    if (!user) return;

    const updatedUser = {
      ...user,
      asrdBalance: user.asrdBalance + amount
    };
    
    setUser(updatedUser);
    localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));
    
    showSuccess(
      'ASRD Tokens Purchased!',
      `You've successfully purchased ${amount.toLocaleString()} ASRD tokens. They are now available in your wallet.`,
      {
        label: 'View Wallet',
        onClick: () => router.push('/dashboard')
      }
    );
  };

  const invest = (amount: number, assetName: string, assetId: number): boolean => {
    if (!user) return false;

    if (user.asrdBalance < amount) {
      notifyInvestmentError(amount - user.asrdBalance);
      return false;
    }

    const newInvestment = {
      id: `inv-${Date.now()}`,
      assetId,
      assetName,
      amount,
      date: new Date().toISOString(),
      tokensUsed: amount,
      currentValue: amount * 1.02 // Simulate immediate growth
    };

    const updatedUser = {
      ...user,
      asrdBalance: user.asrdBalance - amount,
      portfolioValue: user.portfolioValue + amount,
      investments: [...(user.investments || []), newInvestment]
    };

    setUser(updatedUser);
    localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));
    
    notifyInvestmentSuccess(amount, assetName);
    
    // Check for achievements
    checkAchievements(updatedUser);
    
    return true;
  };

  const checkAchievements = (userData: User) => {
    const achievements = [...(userData.achievements || [])];
    const investmentCount = userData.investments?.length || 0;
    
    // First investment achievement
    if (investmentCount === 1 && !achievements.find(a => a.id === 'first-investment')) {
      achievements.push({
        id: 'first-investment',
        title: 'First Investment',
        description: 'Made your first investment on the platform',
        date: new Date().toISOString(),
        icon: '💰'
      });
      
      showPremium(
        'Achievement Unlocked! 🏆',
        'First Investment - Welcome to the world of smart investing!',
        {
          label: 'View Achievements',
          onClick: () => router.push('/dashboard')
        }
      );
    }
    
    // Portfolio milestone
    if (userData.portfolioValue >= 100000 && !achievements.find(a => a.id === '100k-portfolio')) {
      achievements.push({
        id: '100k-portfolio',
        title: '$100K Portfolio',
        description: 'Reached $100,000 in total portfolio value',
        date: new Date().toISOString(),
        icon: '📈'
      });
    }

    if (achievements.length > (userData.achievements?.length || 0)) {
      const updatedUser = { ...userData, achievements };
      setUser(updatedUser);
      localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));
    }
  };

  const claimRental = (assetId: number) => {
    if (!user) return;

    const rentalIncome = Math.floor(Math.random() * 1000) + 500;
    const updatedUser = {
      ...user,
      portfolioValue: user.portfolioValue + rentalIncome
    };
    
    setUser(updatedUser);
    localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));
    
    showSuccess(
      'Rental Income Claimed! 🏠',
      `You've received $${rentalIncome.toLocaleString()} in rental income from your investment.`,
      {
        label: 'View Investments',
        onClick: () => router.push('/dashboard')
      }
    );
  };

  const claimWinnings = (assetId: number) => {
    if (!user) return;

    const winnings = Math.floor(Math.random() * 5000) + 2000;
    const updatedUser = {
      ...user,
      portfolioValue: user.portfolioValue + winnings
    };
    
    setUser(updatedUser);
    localStorage.setItem('assetRideUser', JSON.stringify(updatedUser));
    
    showSuccess(
      'Race Winnings Claimed! 🏇',
      `Congratulations! You've won $${winnings.toLocaleString()} from your thoroughbred investment.`,
      {
        label: 'View Performance',
        onClick: () => router.push('/dashboard')
      }
    );
  };

  const getInvestmentHistory = () => {
    return user?.investments || [];
  };

  const contextValue: AuthContextType = {
    user,
    login,
    logout,
    buyASRD,
    invest,
    claimRental,
    claimWinnings,
    getInvestmentHistory,
    isAuthenticated: !!user,
    isLoading
  };

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
