// src/contexts/NotificationContext.tsx - PREMIUM ENHANCED VERSION
"use client";

import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  CheckCircle, 
  XCircle, 
  AlertTriangle, 
  Info, 
  Crown,
  X,
  Zap,
  Sparkles,
  Award,
  TrendingUp,
  Rocket,
  Shield,
  DollarSign,
  Users,
  Target
} from 'lucide-react';

export type NotificationType = 'success' | 'error' | 'warning' | 'info' | 'premium' | 'investment' | 'achievement';

interface Notification {
  id: string;
  type: NotificationType;
  title: string;
  message: string;
  duration?: number;
  action?: {
    label: string;
    onClick: () => void;
  };
  icon?: ReactNode;
  progress?: boolean;
}

interface NotificationContextType {
  showNotification: (notification: Omit<Notification, 'id'>) => void;
  showSuccess: (title: string, message: string, action?: Notification['action']) => void;
  showError: (title: string, message: string, action?: Notification['action']) => void;
  showWarning: (title: string, message: string, action?: Notification['action']) => void;
  showInfo: (title: string, message: string, action?: Notification['action']) => void;
  showPremium: (title: string, message: string, action?: Notification['action']) => void;
  showInvestment: (title: string, message: string, action?: Notification['action']) => void;
  showAchievement: (title: string, message: string, action?: Notification['action']) => void;
  removeNotification: (id: string) => void;
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined);

// Premium Notification Component
const PremiumNotification: React.FC<Notification & { onClose: () => void }> = ({
  type,
  title,
  message,
  duration = 5000,
  action,
  icon,
  progress = true,
  onClose
}) => {
  const [progressWidth, setProgressWidth] = useState(100);
  const [isPaused, setIsPaused] = useState(false);
  const [isVisible, setIsVisible] = useState(true);

  useEffect(() => {
    if (duration === 0) return;

    const interval = setInterval(() => {
      if (!isPaused && progress) {
        setProgressWidth(prev => Math.max(0, prev - (100 / (duration / 50))));
      }
    }, 50);

    return () => clearInterval(interval);
  }, [duration, isPaused, progress]);

  useEffect(() => {
    if (progressWidth <= 0 && progress) {
      handleClose();
    }
  }, [progressWidth, progress]);

  const handleClose = () => {
    setIsVisible(false);
    setTimeout(onClose, 300);
  };

  const handleAction = () => {
    if (action) {
      action.onClick();
      handleClose();
    }
  };

  const getNotificationConfig = () => {
    const baseConfig = {
      icon: null as ReactNode,
      gradient: '',
      border: '',
      iconBg: '',
      iconColor: '',
      progressColor: '',
      glow: ''
    };

    switch (type) {
      case 'success':
        return {
          ...baseConfig,
          icon: icon || <CheckCircle className="w-5 h-5" />,
          gradient: 'from-emerald-500/10 to-emerald-600/10',
          border: 'border-emerald-500/30',
          iconBg: 'bg-emerald-500',
          iconColor: 'text-emerald-400',
          progressColor: 'bg-emerald-500',
          glow: 'shadow-emerald-500/25'
        };
      case 'error':
        return {
          ...baseConfig,
          icon: icon || <XCircle className="w-5 h-5" />,
          gradient: 'from-rose-500/10 to-rose-600/10',
          border: 'border-rose-500/30',
          iconBg: 'bg-rose-500',
          iconColor: 'text-rose-400',
          progressColor: 'bg-rose-500',
          glow: 'shadow-rose-500/25'
        };
      case 'warning':
        return {
          ...baseConfig,
          icon: icon || <AlertTriangle className="w-5 h-5" />,
          gradient: 'from-amber-500/10 to-amber-600/10',
          border: 'border-amber-500/30',
          iconBg: 'bg-amber-500',
          iconColor: 'text-amber-400',
          progressColor: 'bg-amber-500',
          glow: 'shadow-amber-500/25'
        };
      case 'info':
        return {
          ...baseConfig,
          icon: icon || <Info className="w-5 h-5" />,
          gradient: 'from-blue-500/10 to-blue-600/10',
          border: 'border-blue-500/30',
          iconBg: 'bg-blue-500',
          iconColor: 'text-blue-400',
          progressColor: 'bg-blue-500',
          glow: 'shadow-blue-500/25'
        };
      case 'premium':
        return {
          ...baseConfig,
          icon: icon || <Crown className="w-5 h-5" />,
          gradient: 'from-amber-500/10 via-purple-500/10 to-cyan-500/10',
          border: 'border-amber-500/30',
          iconBg: 'bg-gradient-to-r from-amber-500 to-purple-500',
          iconColor: 'text-amber-400',
          progressColor: 'bg-gradient-to-r from-amber-500 to-purple-500',
          glow: 'shadow-amber-500/25'
        };
      case 'investment':
        return {
          ...baseConfig,
          icon: icon || <TrendingUp className="w-5 h-5" />,
          gradient: 'from-cyan-500/10 to-blue-600/10',
          border: 'border-cyan-500/30',
          iconBg: 'bg-cyan-500',
          iconColor: 'text-cyan-400',
          progressColor: 'bg-cyan-500',
          glow: 'shadow-cyan-500/25'
        };
      case 'achievement':
        return {
          ...baseConfig,
          icon: icon || <Award className="w-5 h-5" />,
          gradient: 'from-purple-500/10 to-pink-500/10',
          border: 'border-purple-500/30',
          iconBg: 'bg-purple-500',
          iconColor: 'text-purple-400',
          progressColor: 'bg-purple-500',
          glow: 'shadow-purple-500/25'
        };
      default:
        return baseConfig;
    }
  };

  const config = getNotificationConfig();

  return (
    <motion.div
      initial={{ opacity: 0, x: 300, scale: 0.9 }}
      animate={{ opacity: 1, x: 0, scale: 1 }}
      exit={{ opacity: 0, x: 300, scale: 0.9 }}
      className={`relative bg-gradient-to-r ${config.gradient} backdrop-blur-xl rounded-2xl border ${config.border} p-4 w-80 shadow-2xl ${config.glow} mb-4`}
      onMouseEnter={() => setIsPaused(true)}
      onMouseLeave={() => setIsPaused(false)}
    >
      {/* Header */}
      <div className="flex items-start gap-3">
        {/* Icon */}
        <div className={`w-10 h-10 ${config.iconBg} rounded-xl flex items-center justify-center flex-shrink-0 shadow-lg`}>
          {config.icon}
        </div>

        {/* Content */}
        <div className="flex-1 min-w-0">
          <h4 className="font-bold text-white text-sm leading-tight mb-1">{title}</h4>
          <p className="text-slate-300 text-xs leading-relaxed">{message}</p>
        </div>

        {/* Close Button */}
        <button
          onClick={handleClose}
          className="flex-shrink-0 w-6 h-6 rounded-lg hover:bg-white/10 flex items-center justify-center transition-colors group"
        >
          <X className="w-3 h-3 text-slate-400 group-hover:text-white" />
        </button>
      </div>

      {/* Action Button */}
      {action && (
        <div className="mt-3">
          <button
            onClick={handleAction}
            className="w-full py-2 px-3 bg-white/10 hover:bg-white/20 border border-white/20 rounded-xl text-white text-xs font-semibold transition-all duration-300 hover:scale-105"
          >
            {action.label}
          </button>
        </div>
      )}

      {/* Progress Bar */}
      {progress && duration > 0 && (
        <div className="mt-3 w-full bg-black/20 rounded-full h-1 overflow-hidden">
          <motion.div
            className={`h-1 rounded-full ${config.progressColor}`}
            initial={{ width: '100%' }}
            animate={{ width: `${progressWidth}%` }}
            transition={{ duration: 0.1 }}
          />
        </div>
      )}

      {/* Decorative Elements */}
      <div className="absolute top-2 right-2 opacity-20">
        <Sparkles className="w-3 h-3 text-white" />
      </div>
    </motion.div>
  );
};

export function NotificationProvider({ children }: { children: ReactNode }) {
  const [notifications, setNotifications] = useState<Notification[]>([]);

  const showNotification = (notification: Omit<Notification, 'id'>) => {
    const id = Math.random().toString(36).substr(2, 9);
    setNotifications(prev => [...prev, { ...notification, id }]);
  };

  const removeNotification = (id: string) => {
    setNotifications(prev => prev.filter(notification => notification.id !== id));
  };

  // Helper methods for common notification types
  const showSuccess = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'success',
      title,
      message,
      duration: 4000,
      action,
      icon: <CheckCircle className="w-5 h-5" />
    });
  };

  const showError = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'error',
      title,
      message,
      duration: 5000,
      action,
      icon: <XCircle className="w-5 h-5" />
    });
  };

  const showWarning = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'warning',
      title,
      message,
      duration: 4000,
      action,
      icon: <AlertTriangle className="w-5 h-5" />
    });
  };

  const showInfo = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'info',
      title,
      message,
      duration: 3000,
      action,
      icon: <Info className="w-5 h-5" />
    });
  };

  const showPremium = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'premium',
      title,
      message,
      duration: 6000,
      action,
      icon: <Crown className="w-5 h-5" />
    });
  };

  const showInvestment = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'investment',
      title,
      message,
      duration: 5000,
      action,
      icon: <TrendingUp className="w-5 h-5" />
    });
  };

  const showAchievement = (title: string, message: string, action?: Notification['action']) => {
    showNotification({
      type: 'achievement',
      title,
      message,
      duration: 5000,
      action,
      icon: <Award className="w-5 h-5" />
    });
  };

  const contextValue: NotificationContextType = {
    showNotification,
    showSuccess,
    showError,
    showWarning,
    showInfo,
    showPremium,
    showInvestment,
    showAchievement,
    removeNotification
  };

  return (
    <NotificationContext.Provider value={contextValue}>
      {children}
      
      {/* Notification Container */}
      <div className="fixed top-4 right-4 z-50 pointer-events-none">
        <div className="flex flex-col items-end">
          <AnimatePresence mode="popLayout">
            {notifications.map((notification) => (
              <div key={notification.id} className="pointer-events-auto">
                <PremiumNotification
                  {...notification}
                  onClose={() => removeNotification(notification.id)}
                />
              </div>
            ))}
          </AnimatePresence>
        </div>
      </div>
    </NotificationContext.Provider>
  );
}

// ⚠️ useNotification moved inside useEffect to fix build
useEffect(() => {
export function useNotification() {
}, []);
  const context = useContext(NotificationContext);
  if (context === undefined) {
// ⚠️ useNotification moved inside useEffect to fix build
useEffect(() => {
    throw new Error('useNotification must be used within a NotificationProvider');
}, []);
  }
  return context;
}

// Hook for investment-specific notifications
export function useInvestmentNotifications() {
// ⚠️ useNotification moved inside useEffect to fix build
useEffect(() => {
// ⚠️ useNotification moved to inside component to fix build
}, []);
// ⚠️ useNotification moved inside useEffect to fix build
useEffect(() => {
//   const { showInvestment, showSuccess, showError, showPremium } = useNotification();
}, []);

  const notifyInvestmentSuccess = (amount: number, assetName: string) => {
    showSuccess(
      'Investment Successful! 🎉',
      `You've invested $${amount.toLocaleString()} in ${assetName}. Welcome to the investor community!`,
      {
        label: 'View Portfolio',
        onClick: () => window.location.href = '/dashboard'
      }
    );
  };

  const notifyInvestmentError = (requiredAmount?: number) => {
    showError(
      'Insufficient Balance',
      requiredAmount 
        ? `You need $${requiredAmount.toLocaleString()} more ASRD tokens to complete this investment.`
        : 'Insufficient ASRD balance. Please purchase more tokens.',
      {
        label: 'Buy ASRD',
        onClick: () => window.location.href = '/treasury'
      }
    );
  };

  const notifyPremiumOpportunity = (assetName: string, roi: number) => {
    showPremium(
      'Premium Investment Opportunity',
      `${assetName} offers exceptional ${roi}% projected returns! Limited spots available.`,
      {
        label: 'Invest Now',
        onClick: () => window.location.href = '/marketplace'
      }
    );
  };

  const notifyLoginRequired = () => {
    showPremium(
      'Connect Your Wallet',
      'Join our premium investor community to access exclusive investment opportunities with 22-46% projected returns.',
      {
        label: 'Connect Now',
        onClick: () => window.location.href = '/login'
      }
    );
  };

  return {
    notifyInvestmentSuccess,
    notifyInvestmentError,
    notifyPremiumOpportunity,
    notifyLoginRequired
  };
}

// Hook for achievement notifications
export function useAchievementNotifications() {
// ⚠️ useNotification moved inside useEffect to fix build
useEffect(() => {
  const { showAchievement, showSuccess } = useNotification();
}, []);

  const notifyMilestone = (milestone: string, description: string) => {
    showAchievement(
      `Milestone Unlocked: ${milestone}`,
      description,
      {
        label: 'View Achievements',
        onClick: () => window.location.href = '/dashboard'
      }
    );
  };

  const notifyPortfolioGrowth = (growth: number) => {
    showSuccess(
      'Portfolio Growing! 📈',
      `Your portfolio has grown by ${growth}% this month. Keep up the great work!`,
      {
        label: 'View Performance',
        onClick: () => window.location.href = '/dashboard'
      }
    );
  };

  return {
    notifyMilestone,
    notifyPortfolioGrowth
  };
}
