// src/components/ui/AssetDetailsModal.tsx - PREMIUM ENHANCED VERSION
"use client";

import Image from "next/image";
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, MapPin, Calendar, TrendingUp, Users, Shield, Star, 
  Building, Zap, Cpu, Eye, ArrowRight, DollarSign, Heart,
  Share2, Download, Play, Pause, Maximize2, ChevronLeft, ChevronRight,
  Target, Award, Clock, BarChart3, Crown, Sparkles, Rocket
} from 'lucide-react';
import { useUniversal } from '@/lib/universal';
import { Asset } from '@/types';
import RealAssetImage from '@/components/ui/RealAssetImage';
import { useAuth } from '@/contexts/AuthContext';
// ⚠️ useNotification moved inside useEffect to fix build
useEffect(() => {
import { useNotification } from '@/contexts/NotificationContext';
}, []);

interface AssetDetailsModalProps {
  isOpen: boolean;
  onClose: () => void;
  asset: Asset | null;
  onInvest?: (asset: Asset) => void;
}

const AssetDetailsModal: React.FC<AssetDetailsModalProps> = ({
  isOpen,
  onClose,
  asset,
  onInvest
}) => {
  const { deviceInfo, universalAttributes } = useUniversal();
  const { user, login } = useAuth();
// ⚠️ useNotification moved inside useEffect to fix build
useEffect(() => {
// ⚠️ useNotification moved to inside component to fix build
}, []);
// ⚠️ useNotification moved inside useEffect to fix build
useEffect(() => {
//   const { showNotification, showSuccess } = useNotification();
}, []);
  
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [isLiked, setIsLiked] = useState(false);
  const [activeTab, setActiveTab] = useState<'overview' | 'financials' | 'gallery' | 'documents'>('overview');

  if (!asset) return null;

  // Enhanced features with premium icons
  const features = [
    { icon: MapPin, label: 'Prime Location', value: `${asset.location.city}, ${asset.location.country}`, color: 'text-blue-400' },
    { icon: Calendar, label: 'Investment Term', value: `${asset.term} months`, color: 'text-purple-400' },
    { icon: TrendingUp, label: 'Projected ROI', value: `${asset.projectedROI}%`, color: 'text-emerald-400' },
    { icon: Users, label: 'Active Investors', value: asset.investorCount.toLocaleString(), color: 'text-cyan-400' },
    { icon: Shield, label: 'Risk Level', value: asset.riskLevel, color: 'text-amber-400' },
    { icon: Star, label: 'Platform Rating', value: asset.rating.toString(), color: 'text-yellow-400' },
    { icon: Target, label: 'Minimum Investment', value: `$${asset.minimumInvestment.toLocaleString()}`, color: 'text-green-400' },
    { icon: Award, label: 'Success Rate', value: '98%', color: 'text-pink-400' },
  ];

  // Enhanced financial details
  const financialDetails = asset.financials ? [
    { label: 'Current Valuation', value: `$${(asset.financials.currentValuation / 1000000).toFixed(1)}M`, change: '+12.5%' },
    { label: 'Total Invested', value: `$${(asset.financials.totalInvested / 1000000).toFixed(1)}M`, change: '+8.2%' },
    { label: 'Total Returns', value: `$${(asset.financials.totalReturns / 1000000).toFixed(1)}M`, change: '+15.3%' },
    { label: 'Annualized Return', value: `${asset.financials.annualizedReturn}%`, change: '+2.1%' },
    { label: 'Current ROI', value: `${asset.financials.currentROI}%`, change: '+3.4%' },
    { label: 'Volatility', value: `${asset.financials.volatility}%`, change: '-1.2%' },
  ] : [
    { label: 'Total Funding', value: `$${(asset.totalFunding / 1000000).toFixed(1)}M`, change: '+5.8%' },
    { label: 'Funded Amount', value: `$${(asset.fundedAmount / 1000000).toFixed(1)}M`, change: '+12.3%' },
    { label: 'Funding Progress', value: `${asset.fundingProgress}%`, change: '+3.1%' },
    { label: 'Projected ROI', value: `${asset.projectedROI}%`, change: '+1.5%' },
  ];

  // Enhanced 3D Experience Features
  const threeDFeatures = asset._3dConfig ? [
    { icon: Zap, label: '3D Particles', value: `${asset._3dConfig.particles.toLocaleString()} particles`, color: 'text-purple-400' },
    { icon: Cpu, label: 'Animations', value: asset._3dConfig.animations, color: 'text-cyan-400' },
    { icon: Eye, label: 'Shadow Quality', value: asset._3dConfig.shadows ? 'Ultra' : 'Standard', color: 'text-orange-400' },
    { icon: Rocket, label: 'Performance', value: 'Optimized', color: 'text-green-400' },
  ] : [];

  // Image gallery navigation
  const nextImage = () => {
  import { useNotification } from '@/contexts/NotificationContext';
  useEffect(() => {
    // Move notifications inside useEffect
  }, []);
  // ⚠️ useNotification moved inside useEffect to fix build
  useEffect(() => {
    // Move notifications inside useEffect
  }, []);
  import { useNotification } from '@/contexts/NotificationContext';
  useEffect(() => {
    // Move notifications inside useEffect
  }, []);
  // ⚠️ useNotification moved inside useEffect to fix build
  useEffect(() => {
    // Move notifications inside useEffect
  }, []);
  import { useNotification } from '@/contexts/NotificationContext';
  useEffect(() => {
    // Move notifications inside useEffect
  }, []);
  // ⚠️ useNotification moved inside useEffect to fix build
  useEffect(() => {
    // Move notifications inside useEffect
  }, []);
    setCurrentImageIndex((prev) => (prev + 1) % (asset.images?.length || 1));
  };

  const prevImage = () => {
    setCurrentImageIndex((prev) => (prev - 1 + (asset.images?.length || 1)) % (asset.images?.length || 1));
  };

  const handleInvestClick = () => {
    if (!user) {
      login('/marketplace');
      showNotification({
        title: 'Connect Your Wallet',
        message: 'Please connect your wallet to explore investment opportunities',
        type: 'warning',
        duration: 4000
      });
      return;
    }
    if (onInvest) {
      onInvest(asset);
      onClose();
    }
  };

  const handleLike = () => {
    setIsLiked(!isLiked);
    showSuccess(
      isLiked ? 'Removed from Favorites' : 'Added to Favorites',
      isLiked 
        ? 'Asset removed from your favorites list'
        : 'Asset added to your favorites for quick access',
      {
        label: 'View Favorites',
        onClick: () => window.location.href = '/dashboard'
      }
    );
  };

  const handleShare = () => {
    showSuccess(
      'Share Asset',
      'Investment opportunity link copied to clipboard',
      {
        label: 'Share Now',
        onClick: () => navigator.clipboard.writeText(window.location.href)
      }
    );
  };

  const getRiskColor = (riskLevel: string) => {
    switch (riskLevel.toLowerCase()) {
      case 'low': return 'text-emerald-400 bg-emerald-400/10 border-emerald-400/20 shadow-emerald-500/10';
      case 'medium': return 'text-amber-400 bg-amber-400/10 border-amber-400/20 shadow-amber-500/10';
      case 'high': return 'text-rose-400 bg-rose-400/10 border-rose-400/20 shadow-rose-500/10';
      default: return 'text-slate-400 bg-slate-400/10 border-slate-400/20';
    }
  };

  const getROIColor = (roi: number) => {
    if (roi >= 40) return 'from-amber-500 to-orange-500';
    if (roi >= 30) return 'from-emerald-500 to-green-500';
    if (roi >= 20) return 'from-cyan-500 to-blue-500';
    return 'from-slate-500 to-slate-600';
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/90 backdrop-blur-xl z-50 flex items-center justify-center p-4 overflow-y-auto"
          onClick={onClose}
        >
          {/* Premium Background Effects */}
          <div className="absolute inset-0 pointer-events-none">
            <div className="absolute top-1/4 left-1/4 w-4 h-4 bg-cyan-400 rounded-full opacity-20 animate-pulse blur-sm" />
            <div className="absolute top-1/3 right-1/4 w-3 h-3 bg-blue-400 rounded-full opacity-30 animate-bounce blur-sm" />
            <div className="absolute bottom-1/4 left-1/3 w-3 h-3 bg-purple-400 rounded-full opacity-40 animate-ping blur-sm" />
          </div>

          <motion.div
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            className="bg-gradient-to-br from-slate-800 via-slate-800 to-slate-900 rounded-3xl border-2 border-slate-700/50 w-full max-w-6xl max-h-[95vh] overflow-hidden shadow-2xl backdrop-blur-sm"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Premium Header */}
            <div className="relative p-8 border-b border-slate-700/50 bg-gradient-to-r from-slate-800/50 to-slate-900/50">
              <div className="flex items-start justify-between">
                <div className="flex items-start space-x-6 flex-1">
                  {/* Asset Icon */}
                  <div className="relative">
                    <div className="w-16 h-16 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
                      <Building className="w-8 h-8 text-white" />
                    </div>
                    <div className="absolute -inset-1 bg-cyan-500 rounded-2xl blur opacity-30"></div>
                  </div>
                  
                  {/* Asset Info */}
                  <div className="flex-1">
                    <div className="flex items-center gap-4 mb-2">
                      <h2 className="text-3xl font-bold text-white">{asset.name}</h2>
                      <div className="flex items-center gap-2">
                        <span className={`px-3 py-1.5 rounded-full text-sm font-bold backdrop-blur-md border shadow-lg ${getRiskColor(asset.riskLevel)}`}>
                          {asset.riskLevel} Risk
                        </span>
                        <span className="px-3 py-1.5 rounded-full text-sm font-bold bg-cyan-500/20 text-cyan-300 border border-cyan-500/30 shadow-cyan-500/10">
                          {asset.type.replace('-', ' ').toUpperCase()}
                        </span>
                      </div>
                    </div>
                    <p className="text-xl text-slate-300 mb-3">{asset.title}</p>
                    <div className="flex items-center gap-4 text-slate-400">
                      <div className="flex items-center gap-2">
                        <MapPin className="w-4 h-4" />
                        <span>{asset.location.city}, {asset.location.country}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Star className="w-4 h-4 text-amber-400" />
                        <span>{asset.rating} Rating</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Users className="w-4 h-4" />
                        <span>{asset.investorCount.toLocaleString()} investors</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Action Buttons */}
                <div className="flex items-center gap-3">
                  <motion.button
                    onClick={handleLike}
                    className="p-3 bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700/50 hover:border-rose-500/50 transition-all duration-300 group"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Heart 
                      className={`w-5 h-5 transition-all duration-300 ${
                        isLiked 
                          ? 'fill-rose-500 text-rose-500 scale-110' 
                          : 'text-slate-400 group-hover:text-rose-400'
                      }`}
                    />
                  </motion.button>
                  
                  <motion.button
                    onClick={handleShare}
                    className="p-3 bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700/50 hover:border-cyan-500/50 transition-all duration-300 group"
                    whileHover={{ scale: 1.05 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <Share2 className="w-5 h-5 text-slate-400 group-hover:text-cyan-400" />
                  </motion.button>
                  
                  <motion.button
                    onClick={onClose}
                    className="p-3 bg-slate-800/50 backdrop-blur-sm rounded-2xl border border-slate-700/50 hover:border-slate-500 transition-all duration-300 group"
                    whileHover={{ scale: 1.05, rotate: 90 }}
                    whileTap={{ scale: 0.95 }}
                  >
                    <X className="w-5 h-5 text-slate-400 group-hover:text-white" />
                  </motion.button>
                </div>
              </div>

              {/* Navigation Tabs */}
              <div className="flex space-x-1 mt-6">
                {[
                  { id: 'overview', label: 'Overview', icon: Eye },
                  { id: 'financials', label: 'Financials', icon: BarChart3 },
                  { id: 'gallery', label: 'Gallery', icon: Maximize2 },
                  { id: 'documents', label: 'Documents', icon: Download }
                ].map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id as any)}
                    className={`flex items-center gap-2 px-4 py-2 rounded-xl font-semibold transition-all duration-300 ${
                      activeTab === tab.id
                        ? 'bg-cyan-500 text-white shadow-lg shadow-cyan-500/25'
                        : 'text-slate-400 hover:text-cyan-400 hover:bg-slate-700/50'
                    }`}
                  >
                    <tab.icon className="w-4 h-4" />
                    {tab.label}
                  </button>
                ))}
              </div>
            </div>

            {/* Content Area */}
            <div className="overflow-y-auto max-h-[calc(95vh-180px)]">
              {activeTab === 'overview' && (
                <div className="p-8 space-y-8">
                  {/* Hero Image Gallery */}
                  <div className="relative rounded-2xl overflow-hidden bg-slate-800/30 border border-slate-700/50">
                    <RealAssetImage
                      asset={asset}
                      size="xl"
                      className="w-full h-80 object-cover"
                    />
                    
                    {/* Gallery Controls */}
                    {asset.images && asset.images.length > 1 && (
                      <>
                        <button
                          onClick={prevImage}
                          className="absolute left-4 top-1/2 transform -translate-y-1/2 p-3 bg-slate-900/80 backdrop-blur-sm rounded-xl border border-slate-700/50 hover:border-cyan-500/50 transition-all duration-300"
                        >
                          <ChevronLeft className="w-5 h-5 text-white" />
                        </button>
                        <button
                          onClick={nextImage}
                          className="absolute right-4 top-1/2 transform -translate-y-1/2 p-3 bg-slate-900/80 backdrop-blur-sm rounded-xl border border-slate-700/50 hover:border-cyan-500/50 transition-all duration-300"
                        >
                          <ChevronRight className="w-5 h-5 text-white" />
                        </button>
                        
                        {/* Image Counter */}
                        <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2 px-3 py-1 bg-slate-900/80 backdrop-blur-sm rounded-full border border-slate-700/50 text-white text-sm">
                          {currentImageIndex + 1} / {asset.images.length}
                        </div>
                      </>
                    )}

                    {/* Play/Pause for Virtual Tour */}
                    {asset.virtualTour && (
                      <button
                        onClick={() => setIsPlaying(!isPlaying)}
                        className="absolute top-4 right-4 p-3 bg-slate-900/80 backdrop-blur-sm rounded-xl border border-slate-700/50 hover:border-cyan-500/50 transition-all duration-300"
                      >
                        {isPlaying ? (
                          <Pause className="w-5 h-5 text-white" />
                        ) : (
                          <Play className="w-5 h-5 text-white" />
                        )}
                      </button>
                    )}
                  </div>

                  {/* Description */}
                  <div className="bg-slate-800/30 rounded-2xl p-6 border border-slate-700/50">
                    <h3 className="text-2xl font-bold text-white mb-4 flex items-center gap-3">
                      <Crown className="w-6 h-6 text-amber-400" />
                      Premium Asset Overview
                    </h3>
                    <p className="text-slate-300 leading-relaxed text-lg">{asset.description}</p>
                  </div>

                  {/* Key Features Grid */}
                  <div>
                    <h3 className="text-2xl font-bold text-white mb-6 flex items-center gap-3">
                      <Sparkles className="w-6 h-6 text-cyan-400" />
                      Key Investment Features
                    </h3>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      {features.map((feature, index) => (
                        <motion.div
                          key={feature.label}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: index * 0.1 }}
                          className="bg-slate-800/30 rounded-2xl p-4 border border-slate-700/50 hover:border-cyan-500/30 transition-all duration-300 group cursor-pointer"
                        >
                          <feature.icon className={`w-8 h-8 mx-auto mb-3 ${feature.color} group-hover:scale-110 transition-transform`} />
                          <div className="text-sm text-slate-400 mb-1 text-center">{feature.label}</div>
                          <div className="text-white font-bold text-lg text-center group-hover:text-cyan-400 transition-colors">
                            {feature.value}
                          </div>
                        </motion.div>
                      ))}
                    </div>
                  </div>

                  {/* Asset Features */}
                  {asset.features && asset.features.length > 0 && (
                    <div className="bg-slate-800/30 rounded-2xl p-6 border border-slate-700/50">
                      <h3 className="text-2xl font-bold text-white mb-4">Premium Features</h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        {asset.features.map((feature, index) => (
                          <motion.div
                            key={index}
                            initial={{ opacity: 0, x: -20 }}
                            animate={{ opacity: 1, x: 0 }}
                            transition={{ delay: index * 0.05 }}
                            className="flex items-center gap-3 p-3 rounded-xl bg-slate-700/30 hover:bg-slate-700/50 transition-all duration-300 group"
                          >
                            <div className="w-2 h-2 bg-cyan-400 rounded-full group-hover:scale-150 transition-transform" />
                            <span className="text-slate-300 group-hover:text-white transition-colors">{feature}</span>
                          </motion.div>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* 3D Experience */}
                  {threeDFeatures.length > 0 && (
                    <div className="bg-gradient-to-r from-purple-500/10 to-cyan-500/10 rounded-2xl p-6 border border-purple-500/20">
                      <h3 className="text-2xl font-bold text-white mb-4 flex items-center gap-3">
                        <Zap className="w-6 h-6 text-purple-400" />
                        Immersive 3D Experience
                      </h3>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        {threeDFeatures.map((feature, index) => (
                          <div key={feature.label} className="text-center p-3">
                            <feature.icon className={`w-6 h-6 mx-auto mb-2 ${feature.color}`} />
                            <div className="text-xs text-slate-400 mb-1">{feature.label}</div>
                            <div className="text-white font-semibold text-sm">{feature.value}</div>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              )}

              {activeTab === 'financials' && (
                <div className="p-8 space-y-6">
                  <h3 className="text-2xl font-bold text-white mb-6">Financial Performance</h3>
                  
                  {/* Financial Metrics Grid */}
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                    {financialDetails.map((detail, index) => (
                      <motion.div
                        key={detail.label}
                        initial={{ opacity: 0, scale: 0.9 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ delay: index * 0.1 }}
                        className="bg-slate-800/30 rounded-2xl p-4 border border-slate-700/50 hover:border-cyan-500/30 transition-all duration-300"
                      >
                        <div className="text-sm text-slate-400 mb-1">{detail.label}</div>
                        <div className="text-white font-bold text-lg mb-1">{detail.value}</div>
                        <div className="text-emerald-400 text-sm font-semibold">{detail.change}</div>
                      </motion.div>
                    ))}
                  </div>

                  {/* Progress Bars */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="bg-slate-800/30 rounded-2xl p-6 border border-slate-700/50">
                      <div className="flex justify-between text-slate-400 mb-3">
                        <span>Funding Progress</span>
                        <span className="text-cyan-400 font-semibold">{asset.fundingProgress}%</span>
                      </div>
                      <div className="w-full bg-slate-700 rounded-full h-3">
                        <motion.div 
                          className="bg-gradient-to-r from-cyan-500 to-blue-500 h-3 rounded-full relative overflow-hidden"
                          initial={{ width: 0 }}
                          animate={{ width: `${asset.fundingProgress}%` }}
                          transition={{ duration: 1.5, ease: "easeOut" }}
                        >
                          <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent -skew-x-12 animate-shimmer" />
                        </motion.div>
                      </div>
                    </div>

                    <div className="bg-slate-800/30 rounded-2xl p-6 border border-slate-700/50">
                      <div className="flex justify-between text-slate-400 mb-3">
                        <span>ROI Performance</span>
                        <span className="text-emerald-400 font-semibold">{asset.projectedROI}%</span>
                      </div>
                      <div className="w-full bg-slate-700 rounded-full h-3">
                        <div 
                          className={`bg-gradient-to-r ${getROIColor(asset.projectedROI)} h-3 rounded-full`}
                          style={{ width: `${Math.min(asset.projectedROI, 100)}%` }}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {activeTab === 'gallery' && (
                <div className="p-8">
                  <h3 className="text-2xl font-bold text-white mb-6">Asset Gallery</h3>
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {asset.images?.map((image, index) => (
                      <motion.div
                        key={index}
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ delay: index * 0.1 }}
                        className="relative aspect-square rounded-2xl overflow-hidden cursor-pointer group"
                        onClick={() => setCurrentImageIndex(index)}
                      >
                        <Image
                          src={image}
                          alt={`${asset.name} - Image ${index + 1}`}
                          className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                        />
                        <div className="absolute inset-0 bg-black/0 group-hover:bg-black/30 transition-all duration-300" />
                      </motion.div>
                    ))}
                  </div>
                </div>
              )}

              {/* Investment CTA */}
              <div className="p-8 border-t border-slate-700/50 bg-gradient-to-r from-slate-800/50 to-slate-900/50">
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="bg-gradient-to-r from-cyan-500/10 via-blue-500/10 to-purple-500/10 rounded-2xl p-8 border-2 border-cyan-500/30 text-center relative overflow-hidden"
                >
                  {/* Background Pattern */}
                  <div className="absolute inset-0 opacity-5">
                    <div className="absolute top-4 left-4 w-8 h-8 border-2 border-cyan-400 rounded-lg" />
                    <div className="absolute bottom-4 right-4 w-6 h-6 border-2 border-blue-400 rounded-lg" />
                  </div>

                  <h3 className="text-3xl font-bold text-white mb-3">Ready to Invest in Premium Real Estate?</h3>
                  <p className="text-slate-300 text-lg mb-6 max-w-2xl mx-auto">
                    <span className="text-cyan-400 font-semibold"> {asset.projectedROI}% projected returns</span> with this exclusive opportunity.
                  </p>
                  
                  <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
                    <motion.button
                      onClick={handleInvestClick}
                      className="bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 text-white font-bold py-4 px-8 rounded-2xl transition-all duration-300 flex items-center gap-3 group relative overflow-hidden"
                      whileHover={{ scale: 1.05, y: -2 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <DollarSign className="w-5 h-5" />
                      <span>Invest from ${asset.minimumInvestment.toLocaleString()}</span>
                      <ArrowRight className="w-5 h-5 group-hover:translate-x-1 transition-transform" />
                      <div className="absolute inset-0 -skew-x-12 bg-gradient-to-r from-transparent via-white/10 to-transparent translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000" />
                    </motion.button>
                    
                    <motion.button
                      onClick={onClose}
                      className="bg-transparent border-2 border-slate-600 text-slate-300 hover:border-slate-500 hover:text-white py-4 px-6 rounded-2xl font-semibold transition-all duration-300"
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      Learn More First
                    </motion.button>
                  </div>

                  <div className="flex items-center justify-center gap-6 mt-6 text-sm text-slate-400">
                    <div className="flex items-center gap-2">
                      <Shield className="w-4 h-4 text-emerald-400" />
                      <span>Blockchain Verified</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Clock className="w-4 h-4 text-amber-400" />
                      <span>24/7 Support</span>
                    </div>
                    <div className="flex items-center gap-2">
                      <Award className="w-4 h-4 text-cyan-400" />
                      <span>98% Success Rate</span>
                    </div>
                  </div>
                </motion.div>
              </div>
            </div>
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default AssetDetailsModal;
