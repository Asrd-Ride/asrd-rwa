// src/components/ui/InvestmentModal.tsx - PREMIUM ENHANCED VERSION
"use client";

import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, DollarSign, Calendar, Shield, TrendingUp, CheckCircle, 
  AlertCircle, Hand, MousePointer, Zap, Lock, Globe, Target,
  BarChart3, Clock, Users, Crown, Sparkles, Rocket
} from 'lucide-react';
import { useUniversal } from '@/lib/universal';
import { Asset } from '@/types';

interface InvestmentModalProps {
  isOpen: boolean;
  onClose: () => void;
  asset: Asset | null;
  onInvest: (amount: number) => void;
  userBalance: number;
}

const InvestmentModal: React.FC<InvestmentModalProps> = ({
  isOpen,
  onClose,
  asset,
  onInvest,
  userBalance
}) => {
  const { deviceInfo, universalAttributes } = useUniversal();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [gestureActive, setGestureActive] = useState(false);
  const [investmentAmount, setInvestmentAmount] = useState(100);
  const [investmentDuration, setInvestmentDuration] = useState(36);
  const [agreement, setAgreement] = useState(false);
  const [amountError, setAmountError] = useState('');
  const [currentStep, setCurrentStep] = useState(1);
  const [showConfetti, setShowConfetti] = useState(false);
  const modalRef = useRef<HTMLDivElement>(null);

  // Enhanced gesture handling with touch/mouse support
  const handleGesture = (delta: number) => {
    if (!asset) return;
    
    const sensitivity = deviceInfo.input === 'touch' ? 2 : 1;
    const step = sensitivity * 100;
    const newAmount = Math.max(
      asset.minimumInvestment,
      Math.min(1000000, investmentAmount + delta * step)
    );
    handleAmountChange(newAmount);
    setGestureActive(true);
    setTimeout(() => setGestureActive(false), 200);
  };

  // Enhanced form submission with multi-step validation
  const handleFormSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!asset) return;

    // Multi-step validation
    if (currentStep === 1) {
      if (investmentAmount < asset.minimumInvestment) {
        setAmountError(`Minimum investment is $${asset.minimumInvestment.toLocaleString()}`);
        return;
      }

      if (investmentAmount > 1000000) {
        setAmountError('Maximum investment is $1,000,000');
        return;
      }

      if (investmentAmount > userBalance * 0.8) {
        setAmountError('Investment exceeds 80% of your balance. Consider a smaller amount.');
        return;
      }

      setCurrentStep(2);
      return;
    }

    if (currentStep === 2 && !agreement) {
      setAmountError('Please agree to the investment terms');
      return;
    }

    setAmountError('');
    setIsSubmitting(true);

    try {
      // Enhanced API simulation with progress steps
      await new Promise(resolve => setTimeout(resolve, 1500));
      setCurrentStep(3); // Success step
      setShowConfetti(true);
      
      await new Promise(resolve => setTimeout(resolve, 2000));
      onInvest(investmentAmount);
      console.log(`Successfully invested $${investmentAmount} in ${asset.name}`);
      
      // Reset and close
      setTimeout(() => {
        setCurrentStep(1);
        setShowConfetti(false);
        onClose();
      }, 1000);
      
    } catch (err) {
      console.error('Investment failed:', err);
      setAmountError('Investment failed. Please try again.');
      setCurrentStep(1);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleAmountChange = (amount: number) => {
    setInvestmentAmount(amount);
    if (amountError) setAmountError('');
  };

  // Quick investment amounts
  const quickAmounts = [100, 500, 1000, 5000, 10000];

  // Enhanced investment metrics
  const getInvestmentMetrics = () => {
    if (!asset) return null;
    
    const projectedReturn = investmentAmount * (asset.projectedROI / 100);
    const monthlyReturn = projectedReturn / asset.term;
    const totalValue = investmentAmount + projectedReturn;
    
    return {
      projectedReturn,
      monthlyReturn,
      totalValue,
      annualizedROI: (asset.projectedROI / (asset.term / 12)).toFixed(1)
    };
  };

  const metrics = getInvestmentMetrics();

  if (!asset) return null;

  // Enhanced investment details with premium styling
  const investmentDetails = [
    {
      label: 'Minimum Investment',
      value: `$${asset.minimumInvestment.toLocaleString()}`,
      icon: DollarSign,
      color: 'text-blue-400',
      bg: 'from-blue-500/10 to-blue-600/10'
    },
    {
      label: 'Projected ROI',
      value: `${asset.projectedROI}%`,
      icon: TrendingUp,
      color: 'text-emerald-400',
      bg: 'from-emerald-500/10 to-emerald-600/10'
    },
    {
      label: 'Investment Term',
      value: `${asset.term} months`,
      icon: Calendar,
      color: 'text-purple-400',
      bg: 'from-purple-500/10 to-purple-600/10'
    },
    {
      label: 'Risk Level',
      value: asset.riskLevel,
      icon: Shield,
      color: asset.riskLevel === 'Low' ? 'text-emerald-400' :
             asset.riskLevel === 'Medium' ? 'text-amber-400' : 'text-rose-400',
      bg: asset.riskLevel === 'Low' ? 'from-emerald-500/10 to-emerald-600/10' :
          asset.riskLevel === 'Medium' ? 'from-amber-500/10 to-amber-600/10' : 'from-rose-500/10 to-rose-600/10'
    }
  ];

  // Performance-adaptive effects
  const showAdvancedEffects = deviceInfo.performance === 'high';

  return (
    <AnimatePresence>
      {isOpen && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="fixed inset-0 bg-black/90 backdrop-blur-xl z-50 flex items-center justify-center p-4 overflow-y-auto"
          onClick={onClose}
        >
          {/* Premium Background Effects */}
          {showAdvancedEffects && (
            <>
              <div className="absolute inset-0 pointer-events-none">
                {/* Animated gradient orbs */}
                <div className="absolute top-1/4 left-1/4 w-4 h-4 bg-cyan-400 rounded-full opacity-60 animate-pulse blur-sm" />
                <div className="absolute top-1/3 right-1/4 w-3 h-3 bg-blue-400 rounded-full opacity-40 animate-bounce blur-sm" />
                <div className="absolute bottom-1/4 left-1/3 w-3 h-3 bg-purple-400 rounded-full opacity-50 animate-ping blur-sm" />
                <div className="absolute top-1/2 right-1/3 w-2 h-2 bg-emerald-400 rounded-full opacity-70 animate-pulse blur-sm" />
              </div>
              
              {/* Floating particles */}
              <div className="absolute inset-0 overflow-hidden pointer-events-none">
                {[...Array(8)].map((_, i) => (
                  <motion.div
                    key={i}
                    className="absolute w-1 h-1 bg-white rounded-full opacity-20"
                    initial={{ 
                      x: Math.random() * window.innerWidth,
                      y: Math.random() * window.innerHeight 
                    }}
                    animate={{
                      y: [0, -30, 0],
                      opacity: [0.2, 0.5, 0.2],
                    }}
                    transition={{
                      duration: 3 + Math.random() * 2,
                      repeat: Infinity,
                      delay: i * 0.5,
                    }}
                  />
                ))}
              </div>
            </>
          )}

          {/* Confetti Effect */}
          {showConfetti && (
            <div className="absolute inset-0 pointer-events-none">
              {[...Array(50)].map((_, i) => (
                <motion.div
                  key={i}
                  className="absolute w-2 h-2"
                  style={{
                    left: `${Math.random() * 100}%`,
                    background: ['#f59e0b', '#ef4444', '#10b981', '#3b82f6', '#8b5cf6'][i % 5],
                  }}
                  initial={{ y: -100, opacity: 1, rotate: 0 }}
                  animate={{ 
                    y: window.innerHeight,
                    opacity: 0,
                    rotate: 360,
                    x: Math.random() * 100 - 50,
                  }}
                  transition={{ 
                    duration: 2 + Math.random() * 1,
                    ease: "easeOut"
                  }}
                />
              ))}
            </div>
          )}

          <motion.div
            ref={modalRef}
            initial={{ opacity: 0, scale: 0.9, y: 20 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: 20 }}
            className="bg-gradient-to-br from-slate-900 via-slate-800 to-slate-900 rounded-3xl border border-slate-700/50 w-full max-w-2xl relative overflow-hidden shadow-2xl my-8"
            onClick={(e) => e.stopPropagation()}
          >
            {/* Premium Header with Glow Effect */}
            <motion.div
              className="relative p-8 border-b border-slate-700/50 bg-gradient-to-r from-slate-800/50 to-slate-900/50"
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.4 }}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="relative">
                    <div className="w-12 h-12 bg-gradient-to-br from-cyan-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
                      <Rocket className="w-6 h-6 text-white" />
                    </div>
                    <div className="absolute -inset-1 bg-cyan-500 rounded-2xl blur opacity-30"></div>
                  </div>
                  <div>
                    <h2 className="text-2xl font-bold text-white">
                      {currentStep === 3 ? 'Investment Successful! ðŸŽ‰' : `Invest in ${asset.name}`}
                    </h2>
                    <p className="text-slate-400 mt-1 flex items-center">
                      <Globe className="w-4 h-4 mr-2" />
                      {asset.location.city}, {asset.location.country}
                    </p>
                  </div>
                </div>
                
                <motion.button
                  onClick={onClose}
                  className="p-3 hover:bg-slate-700/50 rounded-2xl transition-all duration-300 group"
                  whileHover={{ scale: 1.1, rotate: 90 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <X className="w-6 h-6 text-slate-400 group-hover:text-white transition-colors" />
                </motion.button>
              </div>

              {/* Progress Steps */}
              {currentStep < 3 && (
                <div className="flex items-center justify-center space-x-4 mt-6">
                  {[1, 2, 3].map((step) => (
                    <div key={step} className="flex items-center">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-semibold transition-all duration-300 ${
                        step === currentStep 
                          ? 'bg-cyan-500 text-white shadow-lg shadow-cyan-500/25' 
                          : step < currentStep
                          ? 'bg-emerald-500 text-white'
                          : 'bg-slate-700 text-slate-400'
                      }`}>
                        {step < currentStep ? <CheckCircle className="w-4 h-4" /> : step}
                      </div>
                      {step < 3 && (
                        <div className={`w-12 h-1 mx-2 rounded-full transition-all duration-300 ${
                          step < currentStep ? 'bg-emerald-500' : 'bg-slate-700'
                        }`} />
                      )}
                    </div>
                  ))}
                </div>
              )}
            </motion.div>

            {/* Investment Content - Multi Step */}
            <div className="p-8">
              {currentStep === 1 && (
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="space-y-8"
                >
                  {/* Premium Investment Metrics */}
                  <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
                    {investmentDetails.map((detail, index) => (
                      <motion.div
                        key={index}
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ duration: 0.4, delay: index * 0.1 }}
                        className={`bg-gradient-to-br ${detail.bg} border border-slate-700/50 rounded-2xl p-4 text-center backdrop-blur-sm hover:scale-105 transition-transform duration-300 cursor-help group`}
                        title={detail.label}
                      >
                        <detail.icon className={`w-6 h-6 mx-auto mb-3 ${detail.color} group-hover:scale-110 transition-transform`} />
                        <div className="text-xs text-slate-400 mb-1 uppercase tracking-wide">{detail.label}</div>
                        <div className={`text-sm font-bold ${detail.color}`}>{detail.value}</div>
                      </motion.div>
                    ))}
                  </div>

                  {/* Quick Investment Amounts */}
                  <div className="space-y-4">
                    <label className="block text-sm font-semibold text-slate-300 uppercase tracking-wide">
                      Quick Select Amount
                    </label>
                    <div className="grid grid-cols-2 sm:grid-cols-5 gap-3">
                      {quickAmounts.map((amount) => (
                        <motion.button
                          key={amount}
                          type="button"
                          onClick={() => handleAmountChange(amount)}
                          className={`p-3 rounded-xl border transition-all duration-300 text-sm font-semibold ${
                            investmentAmount === amount
                              ? 'bg-cyan-500 border-cyan-500 text-white shadow-lg shadow-cyan-500/25'
                              : 'bg-slate-800/50 border-slate-600 text-slate-300 hover:border-cyan-500 hover:text-cyan-400'
                          }`}
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          ${amount.toLocaleString()}
                        </motion.button>
                      ))}
                    </div>
                  </div>

                  {/* Enhanced Amount Input */}
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <label className="block text-sm font-semibold text-slate-300 uppercase tracking-wide">
                        Custom Investment Amount
                      </label>
                      <div className="flex items-center gap-2 text-xs text-slate-400">
                        {deviceInfo.input === 'touch' ? (
                          <Hand className="w-4 h-4" />
                        ) : (
                          <MousePointer className="w-4 h-4" />
                        )}
                        <span>Drag or type to adjust</span>
                      </div>
                    </div>

                    <div className="relative">
                      <DollarSign className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-slate-400" />
                      <input
                        type="number"
                        value={investmentAmount}
                        onChange={(e) => handleAmountChange(Number(e.target.value))}
                        className={`w-full bg-slate-800/50 border-2 ${
                          gestureActive ? 'border-cyan-500 shadow-lg shadow-cyan-500/25' : 'border-slate-600'
                        } rounded-xl pl-12 pr-20 py-4 text-white placeholder-slate-400 focus:border-cyan-500 focus:ring-2 focus:ring-cyan-500/20 transition-all duration-300 text-lg font-semibold ${
                          gestureActive ? 'scale-105' : ''
                        }`}
                        placeholder="Enter amount"
                        min={asset.minimumInvestment}
                        max={1000000}
                        step="100"
                      />
                      <div className="absolute right-4 top-1/2 transform -translate-y-1/2 flex items-center space-x-2">
                        <span className="text-slate-400 text-sm">USD</span>
                        <motion.div
                          className="w-2 h-8 bg-cyan-500 rounded-full opacity-60"
                          animate={{ scaleY: gestureActive ? 1.3 : 1 }}
                          transition={{ duration: 0.2 }}
                        />
                      </div>
                    </div>

                    {/* Amount Slider */}
                    <input
                      type="range"
                      min={asset.minimumInvestment}
                      max={1000000}
                      step="100"
                      value={investmentAmount}
                      onChange={(e) => handleAmountChange(Number(e.target.value))}
                      className="w-full h-2 bg-slate-700 rounded-lg appearance-none cursor-pointer slider-thumb"
                    />

                    {amountError && (
                      <motion.p
                        className="text-rose-400 text-sm flex items-center bg-rose-500/10 border border-rose-500/20 rounded-lg p-3"
                        initial={{ opacity: 0, y: -10 }}
                        animate={{ opacity: 1, y: 0 }}
                      >
                        <AlertCircle className="w-4 h-4 mr-2" />
                        {amountError}
                      </motion.p>
                    )}
                  </div>

                  {/* Enhanced Balance Display */}
                  <motion.div
                    className="bg-gradient-to-r from-amber-500/10 to-orange-500/10 border border-amber-500/20 rounded-2xl p-4"
                    whileHover={{ scale: 1.02 }}
                    transition={{ type: "spring", stiffness: 400 }}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className="w-10 h-10 bg-amber-500/20 rounded-xl flex items-center justify-center">
                          <Zap className="w-5 h-5 text-amber-400" />
                        </div>
                        <div>
                          <div className="text-amber-400 font-semibold">Your ASRD Balance</div>
                          <div className="text-white text-lg font-bold">{userBalance.toLocaleString()} ASRD</div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className="text-slate-400 text-sm">Available</div>
                        <div className="text-emerald-400 font-semibold">
                          ${(userBalance - investmentAmount).toLocaleString()}
                        </div>
                      </div>
                    </div>
                  </motion.div>
                </motion.div>
              )}

              {currentStep === 2 && (
                <motion.div
                  initial={{ opacity: 0, x: 20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="space-y-6"
                >
                  {/* Investment Summary */}
                  <div className="bg-gradient-to-br from-slate-800/50 to-slate-900/50 border border-slate-700/50 rounded-2xl p-6">
                    <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
                      <Target className="w-5 h-5 mr-2 text-cyan-400" />
                      Investment Summary
                    </h3>
                    
                    <div className="space-y-3">
                      <div className="flex justify-between items-center py-2 border-b border-slate-700/50">
                        <span className="text-slate-400">Investment Amount</span>
                        <span className="text-white font-semibold">${investmentAmount.toLocaleString()}</span>
                      </div>
                      
                      <div className="flex justify-between items-center py-2 border-b border-slate-700/50">
                        <span className="text-slate-400">Projected ROI ({asset.projectedROI}%)</span>
                        <span className="text-emerald-400 font-semibold">
                          +${metrics?.projectedReturn.toLocaleString()}
                        </span>
                      </div>
                      
                      <div className="flex justify-between items-center py-2 border-b border-slate-700/50">
                        <span className="text-slate-400">Monthly Returns</span>
                        <span className="text-blue-400 font-semibold">
                          ~${metrics?.monthlyReturn.toLocaleString()}
                        </span>
                      </div>
                      
                      <div className="flex justify-between items-center py-2">
                        <span className="text-slate-300 font-semibold">Total Projected Value</span>
                        <span className="text-cyan-400 font-bold text-lg">
                          ${metrics?.totalValue.toLocaleString()}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Agreement Checkbox */}
                  <motion.div
                    className="flex items-start space-x-4 p-4 bg-slate-800/30 rounded-2xl border border-slate-700/50"
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: 0.2 }}
                  >
                    <input
                      type="checkbox"
                      checked={agreement}
                      onChange={(e) => setAgreement(e.target.checked)}
                      className="mt-1 w-5 h-5 bg-slate-700 border-slate-600 rounded focus:ring-2 focus:ring-cyan-500 focus:border-cyan-500 text-cyan-500"
                    />
                    <label className="text-slate-300 leading-relaxed flex-1">
                      <span className="font-semibold text-white">I agree to the investment terms and conditions</span>
                      <br />
                      <span className="text-sm text-slate-400">
                        I understand the risks involved in this investment and confirm that I have read and agree to the 
                        platform's terms of service, privacy policy, and investment agreement. I am aware that returns are 
                        projected and not guaranteed.
                      </span>
                    </label>
                  </motion.div>

                  {amountError && (
                    <motion.p
                      className="text-rose-400 text-sm flex items-center bg-rose-500/10 border border-rose-500/20 rounded-xl p-4"
                      initial={{ opacity: 0, y: -10 }}
                      animate={{ opacity: 1, y: 0 }}
                    >
                      <AlertCircle className="w-5 h-5 mr-3" />
                      {amountError}
                    </motion.p>
                  )}
                </motion.div>
              )}

              {currentStep === 3 && (
                <motion.div
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{ opacity: 1, scale: 1 }}
                  className="text-center space-y-6 py-8"
                >
                  <div className="w-20 h-20 bg-emerald-500 rounded-full flex items-center justify-center mx-auto shadow-lg shadow-emerald-500/25">
                    <CheckCircle className="w-10 h-10 text-white" />
                  </div>
                  
                  <div>
                    <h3 className="text-2xl font-bold text-white mb-2">Investment Confirmed! ðŸŽ‰</h3>
                    <p className="text-slate-300 text-lg">
                      You've successfully invested <span className="text-cyan-400 font-semibold">${investmentAmount.toLocaleString()}</span> in {asset.name}
                    </p>
                  </div>

                  <div className="bg-gradient-to-br from-emerald-500/10 to-cyan-500/10 border border-emerald-500/20 rounded-2xl p-6 max-w-md mx-auto">
                    <div className="space-y-2 text-sm">
                      <div className="flex justify-between">
                        <span className="text-slate-400">Transaction ID:</span>
                        <span className="text-white font-mono">TX_{Date.now().toString(36).toUpperCase()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-slate-400">Date & Time:</span>
                        <span className="text-white">{new Date().toLocaleString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-slate-400">Status:</span>
                        <span className="text-emerald-400 font-semibold">Completed</span>
                      </div>
                    </div>
                  </div>
                </motion.div>
              )}
            </div>

            {/* Enhanced Action Buttons */}
            {currentStep < 3 && (
              <motion.div
                className="p-8 border-t border-slate-700/50 bg-slate-900/50"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
              >
                <div className="flex gap-4">
                  {currentStep > 1 && (
                    <motion.button
                      type="button"
                      onClick={() => setCurrentStep(currentStep - 1)}
                      className="flex-1 bg-transparent border-2 border-slate-600 text-slate-300 hover:border-slate-500 hover:text-white py-4 px-6 rounded-xl font-semibold transition-all duration-300 flex items-center justify-center space-x-2"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <X className="w-5 h-5" />
                      <span>Back</span>
                    </motion.button>
                  )}
                  
                  <motion.button
                    type="submit"
                    onClick={handleFormSubmit}
                    disabled={isSubmitting || (currentStep === 2 && !agreement)}
                    className={`flex-1 bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 disabled:from-slate-600 disabled:to-slate-700 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-300 flex items-center justify-center space-x-3 relative overflow-hidden group ${
                      currentStep === 1 ? 'flex-1' : 'flex-[2]'
                    }`}
                    whileHover={!isSubmitting ? { scale: 1.02, y: -2 } : {}}
                    whileTap={!isSubmitting ? { scale: 0.98 } : {}}
                  >
                    {isSubmitting ? (
                      <>
                        <div className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin" />
                        <span className="text-lg">Processing...</span>
                      </>
                    ) : (
                      <>
                        {currentStep === 1 ? (
                          <>
                            <Lock className="w-5 h-5" />
                            <span className="text-lg">Continue to Review</span>
                          </>
                        ) : (
                          <>
                            <CheckCircle className="w-5 h-5" />
                            <span className="text-lg">Confirm Investment</span>
                          </>
                        )}
                      </>
                    )}

                    {/* Premium Button Effects */}
                    <div className="absolute inset-0 -skew-x-12 bg-gradient-to-r from-transparent via-white/20 to-transparent translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000" />
                    <div className="absolute inset-0 bg-gradient-to-r from-cyan-500/0 via-cyan-300/10 to-cyan-500/0 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
                  </motion.button>
                </div>

                {/* Security Badge */}
                <div className="flex items-center justify-center space-x-2 mt-4 text-xs text-slate-500">
                  <Shield className="w-4 h-4" />
                  <span>256-bit SSL Encrypted â€¢ Bank-Level Security</span>
                </div>
              </motion.div>
            )}
          </motion.div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

export default InvestmentModal;