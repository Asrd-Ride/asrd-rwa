"use client";

import React from 'react';
import { useScrollAnimation } from '@/hooks/useScrollAnimation';

interface PremiumBackgroundProps {
  intensity?: 'subtle' | 'medium' | 'high';
  theme?: 'tech' | 'corporate' | 'creative';
  className?: string;
}

export default function PremiumBackground({ 
  intensity = 'medium', 
  theme = 'tech',
  className = '' 
}: PremiumBackgroundProps) {
  const { getParallaxStyle, scrollProgress } = useScrollAnimation();

  // Enhanced gradient system with ASRD color themes
  const getGradient = () => {
    const gradients = {
      tech: {
        20: 'linear-gradient(135deg, var(--asrd-deep) 0%, var(--asrd-navy) 25%, var(--asrd-slate) 50%, var(--asrd-charcoal) 100%)',
        40: 'linear-gradient(135deg, var(--asrd-navy) 0%, var(--asrd-slate) 25%, var(--asrd-charcoal) 50%, #475569 100%)',
        60: 'linear-gradient(135deg, var(--asrd-slate) 0%, var(--asrd-charcoal) 25%, #475569 50%, #64748b 100%)',
        default: 'linear-gradient(135deg, var(--asrd-charcoal) 0%, #475569 25%, #64748b 50%, #94a3b8 100%)'
      },
      corporate: {
        20: 'linear-gradient(135deg, #1e3a8a 0%, var(--asrd-navy) 25%, var(--asrd-slate) 50%, var(--asrd-charcoal) 100%)',
        40: 'linear-gradient(135deg, var(--asrd-navy) 0%, var(--asrd-slate) 25%, var(--asrd-charcoal) 50%, #475569 100%)',
        60: 'linear-gradient(135deg, var(--asrd-slate) 0%, var(--asrd-charcoal) 25%, #475569 50%, #64748b 100%)',
        default: 'linear-gradient(135deg, var(--asrd-charcoal) 0%, #475569 25%, #64748b 50%, #94a3b8 100%)'
      },
      creative: {
        20: 'linear-gradient(135deg, #831843 0%, #9d174d 25%, var(--asrd-slate) 50%, var(--asrd-charcoal) 100%)',
        40: 'linear-gradient(135deg, #9d174d 0%, #be185d 25%, var(--asrd-charcoal) 50%, #475569 100%)',
        60: 'linear-gradient(135deg, #be185d 0%, #db2777 25%, #475569 50%, #64748b 100%)',
        default: 'linear-gradient(135deg, #db2777 0%, #ec4899 25%, #64748b 50%, #94a3b8 100%)'
      }
    };

    const themeGradients = gradients[theme];

    if (scrollProgress < 20) return themeGradients[20];
    if (scrollProgress < 40) return themeGradients[40];
    if (scrollProgress < 60) return themeGradients[60];
    return themeGradients.default;
  };

  // Intensity settings
  const getIntensitySettings = () => {
    const settings = {
      subtle: { gridOpacity: 15, particleOpacity: 15, lineOpacity: 10, hologramOpacity: 20 },
      medium: { gridOpacity: 30, particleOpacity: 30, lineOpacity: 20, hologramOpacity: 40 },
      high: { gridOpacity: 50, particleOpacity: 50, lineOpacity: 35, hologramOpacity: 60 }
    };
    return settings[intensity];
  };

  const intensitySettings = getIntensitySettings();

  return (
    <div className={`fixed inset-0 -z-50 overflow-hidden ${className}`}>
      {/* Main Gradient Background */}
      <div
        className="absolute inset-0 transition-all duration-2000 ease-out"
        style={{
          background: getGradient(),
        }}
      />

      {/* Dynamic Grid System */}
      <div
        className="absolute inset-0"
        style={{
          opacity: `${intensitySettings.gridOpacity}%`,
          backgroundImage: `
            linear-gradient(var(--asrd-cyan-glow) 1px, transparent 1px),
            linear-gradient(90deg, var(--asrd-cyan-glow) 1px, transparent 1px)
          `,
          backgroundSize: '60px 60px',
          ...getParallaxStyle(0.05)
        }}
      />

      {/* Animated Connection Lines */}
      <div className="absolute inset-0">
        <div
          className="absolute top-1/4 left-0 w-full h-px bg-gradient-to-r from-transparent via-cyan-400/30 to-transparent animate-pulse"
          style={getParallaxStyle(0.1)}
        />
        <div
          className="absolute top-1/2 left-0 w-full h-px bg-gradient-to-r from-transparent via-purple-400/30 to-transparent animate-pulse"
          style={{...getParallaxStyle(0.08), animationDelay: '0.5s'}}
        />
        <div
          className="absolute top-3/4 left-0 w-full h-px bg-gradient-to-r from-transparent via-blue-400/30 to-transparent animate-pulse"
          style={{...getParallaxStyle(0.1), animationDelay: '1s'}}
        />
      </div>

      {/* Floating Holographic Elements */}
      <div className="absolute inset-0">
        {/* Main Hologram */}
        <div
          className="absolute top-1/3 left-1/4 w-64 h-64 bg-gradient-to-br from-cyan-400/10 to-blue-500/10 rounded-full blur-3xl animate-float-hologram"
          style={{
            ...getParallaxStyle(0.2),
            opacity: `${intensitySettings.hologramOpacity}%`
          }}
        />
        
        {/* Secondary Holograms */}
        <div
          className="absolute top-2/3 right-1/4 w-48 h-48 bg-gradient-to-br from-purple-400/10 to-pink-500/10 rounded-full blur-3xl animate-float-hologram"
          style={{
            ...getParallaxStyle(0.15),
            animationDelay: '2s',
            opacity: `${intensitySettings.hologramOpacity}%`
          }}
        />
        
        <div
          className="absolute bottom-1/4 left-1/3 w-32 h-32 bg-gradient-to-br from-emerald-400/10 to-cyan-500/10 rounded-full blur-3xl animate-float-hologram"
          style={{
            ...getParallaxStyle(0.1),
            animationDelay: '4s',
            opacity: `${intensitySettings.hologramOpacity}%`
          }}
        />

        {/* Additional floating elements */}
        <div
          className="absolute top-1/4 right-1/5 w-40 h-40 bg-gradient-to-br from-amber-400/10 to-rose-500/10 rounded-full blur-3xl animate-float-hologram"
          style={{
            ...getParallaxStyle(0.12),
            animationDelay: '3s',
            opacity: `${intensitySettings.hologramOpacity}%`
          }}
        />
      </div>

      {/* Animated Data Particles */}
      {[...Array(20)].map((_, i) => (
        <div
          key={i}
          className="absolute rounded-full animate-float-data"
          style={{
            left: `${5 + (i * 4.5)}%`,
            top: `${10 + (i * 4)}%`,
            width: `${1 + (i % 2)}px`,
            height: `${1 + (i % 2)}px`,
            backgroundColor: `var(--asrd-cyan-glow)`,
            opacity: `${intensitySettings.particleOpacity}%`,
            animationDelay: `${i * 0.3}s`,
            animationDuration: `${8 + (i % 6)}s`,
            ...getParallaxStyle(0.02 + i * 0.01)
          }}
        />
      ))}

      {/* Binary Rain Effect */}
      <div className="absolute inset-0" style={{ opacity: `${intensitySettings.particleOpacity}%` }}>
        {[...Array(12)].map((_, i) => (
          <div
            key={i}
            className="absolute text-xs font-mono text-cyan-400/60 animate-binary-rain"
            style={{
              left: `${8 + (i * 7)}%`,
              animationDelay: `${i * 0.7}s`,
              animationDuration: `${12 + (i % 4)}s`
            }}
          >
            {Math.random() > 0.5 ? '1' : '0'}
          </div>
        ))}
      </div>

      {/* Scan Lines Overlay */}
      <div
        className="absolute inset-0"
        style={{
          opacity: `${intensitySettings.lineOpacity}%`,
          background: `repeating-linear-gradient(0deg, transparent, transparent 2px, var(--asrd-cyan-glow) 2px, var(--asrd-cyan-glow) 4px)`,
          ...getParallaxStyle(0.02)
        }}
      />

      {/* Animated Glow Border */}
      <div
        className="absolute inset-0 border-2 pointer-events-none"
        style={{
          opacity: Math.sin(scrollProgress * 0.1) * 0.1 + 0.05,
          borderImage: 'linear-gradient(45deg, var(--asrd-cyan), var(--asrd-purple), var(--asrd-cyan)) 1',
          boxShadow: 'inset 0 0 50px var(--asrd-cyan-glow)',
          ...getParallaxStyle(0.01)
        }}
      />
    </div>
  );
}