// src/hooks/useUniversalDevice.ts - PREMIUM ENHANCED VERSION
"use client";

import { useState, useEffect } from 'react';

export interface DeviceInfo {
  type: 'mobile' | 'tablet' | 'desktop';
  input: 'touch' | 'mouse';
  performance: 'low' | 'medium' | 'high';
  orientation: 'portrait' | 'landscape';
  supportsHover: boolean;
  pixelRatio: number;
  connection: 'slow-2g' | '2g' | '3g' | '4g' | '5g';
  screenSize: { width: number; height: number };
  isRetina: boolean;
  browser: string;
  os: string;
}

export interface UniversalDeviceReturn {
  deviceInfo: DeviceInfo;
  isMobile: boolean;
  isTablet: boolean;
  isDesktop: boolean;
  isTouchDevice: boolean;
  isHighPerformance: boolean;
  orientation: string;
  connectionSpeed: string;
  screenSize: { width: number; height: number };
}

const useUniversalDevice = (): UniversalDeviceReturn => {
  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo>({
    type: 'desktop',
    input: 'mouse',
    performance: 'high',
    orientation: 'landscape',
    supportsHover: true,
    pixelRatio: 1,
    connection: '4g',
    screenSize: { width: 1024, height: 768 },
    isRetina: false,
    browser: 'unknown',
    os: 'unknown'
  });

  useEffect(() => {
    const updateDeviceInfo = () => {
      // Device type detection
      const userAgent = navigator.userAgent.toLowerCase();
      const isMobile = /iphone|ipod|android|blackberry|windows phone/g.test(userAgent);
      const isTablet = /ipad|tablet/g.test(userAgent) || (navigator.maxTouchPoints && navigator.maxTouchPoints > 2);
      
      let type: DeviceInfo['type'] = 'desktop';
      if (isMobile) type = 'mobile';
      else if (isTablet) type = 'tablet';

      // Input type detection
      const input = navigator.maxTouchPoints > 0 ? 'touch' : 'mouse';

      // Performance detection
      const memory = (navigator as any).deviceMemory || 4;
      const cores = navigator.hardwareConcurrency || 4;
      let performance: DeviceInfo['performance'] = 'medium';
      if (memory >= 8 && cores >= 8) performance = 'high';
      else if (memory <= 2 || cores <= 2) performance = 'low';

      // Orientation
      const orientation = window.innerHeight > window.innerWidth ? 'portrait' : 'landscape';

      // Hover support
      const supportsHover = !isMobile && !isTablet;

      // Display information
      const pixelRatio = window.devicePixelRatio || 1;
      const screenSize = {
        width: window.screen.width,
        height: window.screen.height
      };
      const isRetina = pixelRatio > 1;

      // Network information
      const connection = (navigator as any).connection;
      let connectionType: DeviceInfo['connection'] = '4g';
      if (connection) {
        switch (connection.effectiveType) {
          case 'slow-2g':
          case '2g':
            connectionType = '2g';
            break;
          case '3g':
            connectionType = '3g';
            break;
          case '4g':
            connectionType = '4g';
            break;
          case '5g':
            connectionType = '5g';
            break;
          default:
            connectionType = '4g';
        }
      }

      // Browser and OS detection
      let browser = 'unknown';
      let os = 'unknown';
      
      if (userAgent.includes('chrome')) browser = 'chrome';
      else if (userAgent.includes('firefox')) browser = 'firefox';
      else if (userAgent.includes('safari')) browser = 'safari';
      else if (userAgent.includes('edge')) browser = 'edge';
      
      if (userAgent.includes('windows')) os = 'windows';
      else if (userAgent.includes('mac')) os = 'macos';
      else if (userAgent.includes('linux')) os = 'linux';
      else if (userAgent.includes('android')) os = 'android';
      else if (userAgent.includes('ios')) os = 'ios';

      setDeviceInfo({
        type,
        input,
        performance,
        orientation,
        supportsHover,
        pixelRatio,
        connection: connectionType,
        screenSize,
        isRetina,
        browser,
        os
      });
    };

    updateDeviceInfo();
    
    // Listen for orientation changes
    const handleResize = () => {
      updateDeviceInfo();
    };

    window.addEventListener('resize', handleResize);
    window.addEventListener('orientationchange', handleResize);

    return () => {
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('orientationchange', handleResize);
    };
  }, []);

  return {
    deviceInfo,
    isMobile: deviceInfo.type === 'mobile',
    isTablet: deviceInfo.type === 'tablet',
    isDesktop: deviceInfo.type === 'desktop',
    isTouchDevice: deviceInfo.input === 'touch',
    isHighPerformance: deviceInfo.performance === 'high',
    orientation: deviceInfo.orientation,
    connectionSpeed: deviceInfo.connection,
    screenSize: deviceInfo.screenSize
  };
};

export default useUniversalDevice;